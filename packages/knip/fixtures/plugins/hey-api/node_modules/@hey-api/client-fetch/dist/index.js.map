{"version":3,"sources":["../../client-core/src/auth.ts","../../client-core/src/bodySerializer.ts","../../client-core/src/params.ts","../../client-core/src/pathSerializer.ts","../src/utils.ts","../src/client.ts"],"names":["getAuthToken","auth","callback","token","serializeFormDataPair","data","key","value","serializeUrlSearchParamsPair","formDataBodySerializer","body","v","jsonBodySerializer","urlSearchParamsBodySerializer","extraPrefixesMap","extraPrefixes","buildKeyMap","fields","map","config","stripEmptySlots","params","slot","buildClientParams","args","index","arg","field","name","extra","prefix","allowed","separatorArrayExplode","style","separatorArrayNoExplode","separatorObjectExplode","serializeArrayParam","allowReserved","explode","joinedValues","separator","serializePrimitiveParam","serializeObjectParam","values","PATH_PARAM_RE","defaultPathSerializer","path","_url","url","matches","match","R","$","f","replaceValue","createQuerySerializer","array","object","queryParams","search","serializedArray","serializedObject","serializedPrimitive","getParseAs","contentType","cleanContent","type","setAuthParams","security","options","h","buildUrl","getUrl","baseUrl","query","querySerializer","pathUrl","mergeConfigs","a","b","mergeHeaders","headers","mergedHeaders","header","iterator","Interceptors","id","fn","createInterceptors","defaultQuerySerializer","defaultHeaders","createConfig","override","z","createClient","_config","getConfig","setConfig","interceptors","request","opts","requestInit","_fetch","response","result","parseAs","error","finalError"],"mappings":"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","file":"index.js","sourcesContent":["export type AuthToken = string | undefined;\n\nexport interface Auth {\n  /**\n   * Which part of the request do we use to send the auth?\n   *\n   * @default 'header'\n   */\n  in?: 'header' | 'query' | 'cookie';\n  /**\n   * Header or query parameter name.\n   *\n   * @default 'Authorization'\n   */\n  name?: string;\n  scheme?: 'basic' | 'bearer';\n  type: 'apiKey' | 'http';\n}\n\nexport const getAuthToken = async (\n  auth: Auth,\n  callback: ((auth: Auth) => Promise<AuthToken> | AuthToken) | AuthToken,\n): Promise<string | undefined> => {\n  const token =\n    typeof callback === 'function' ? await callback(auth) : callback;\n\n  if (!token) {\n    return;\n  }\n\n  if (auth.scheme === 'bearer') {\n    return `Bearer ${token}`;\n  }\n\n  if (auth.scheme === 'basic') {\n    return `Basic ${btoa(token)}`;\n  }\n\n  return token;\n};\n","import type {\n  ArrayStyle,\n  ObjectStyle,\n  SerializerOptions,\n} from './pathSerializer';\n\nexport type QuerySerializer = (query: Record<string, unknown>) => string;\n\nexport type BodySerializer = (body: any) => any;\n\nexport interface QuerySerializerOptions {\n  allowReserved?: boolean;\n  array?: SerializerOptions<ArrayStyle>;\n  object?: SerializerOptions<ObjectStyle>;\n}\n\nconst serializeFormDataPair = (data: FormData, key: string, value: unknown) => {\n  if (typeof value === 'string' || value instanceof Blob) {\n    data.append(key, value);\n  } else {\n    data.append(key, JSON.stringify(value));\n  }\n};\n\nconst serializeUrlSearchParamsPair = (\n  data: URLSearchParams,\n  key: string,\n  value: unknown,\n) => {\n  if (typeof value === 'string') {\n    data.append(key, value);\n  } else {\n    data.append(key, JSON.stringify(value));\n  }\n};\n\nexport const formDataBodySerializer = {\n  bodySerializer: <T extends Record<string, any> | Array<Record<string, any>>>(\n    body: T,\n  ) => {\n    const data = new FormData();\n\n    Object.entries(body).forEach(([key, value]) => {\n      if (value === undefined || value === null) {\n        return;\n      }\n      if (Array.isArray(value)) {\n        value.forEach((v) => serializeFormDataPair(data, key, v));\n      } else {\n        serializeFormDataPair(data, key, value);\n      }\n    });\n\n    return data;\n  },\n};\n\nexport const jsonBodySerializer = {\n  bodySerializer: <T>(body: T) =>\n    JSON.stringify(body, (key, value) =>\n      typeof value === 'bigint' ? value.toString() : value,\n    ),\n};\n\nexport const urlSearchParamsBodySerializer = {\n  bodySerializer: <T extends Record<string, any> | Array<Record<string, any>>>(\n    body: T,\n  ) => {\n    const data = new URLSearchParams();\n\n    Object.entries(body).forEach(([key, value]) => {\n      if (value === undefined || value === null) {\n        return;\n      }\n      if (Array.isArray(value)) {\n        value.forEach((v) => serializeUrlSearchParamsPair(data, key, v));\n      } else {\n        serializeUrlSearchParamsPair(data, key, value);\n      }\n    });\n\n    return data.toString();\n  },\n};\n","type Slot = 'body' | 'headers' | 'path' | 'query';\n\nexport type Field =\n  | {\n      in: Exclude<Slot, 'body'>;\n      key: string;\n      map?: string;\n    }\n  | {\n      in: Extract<Slot, 'body'>;\n      key?: string;\n      map?: string;\n    };\n\nexport interface Fields {\n  allowExtra?: Partial<Record<Slot, boolean>>;\n  args?: ReadonlyArray<Field>;\n}\n\nexport type FieldsConfig = ReadonlyArray<Field | Fields>;\n\nconst extraPrefixesMap: Record<string, Slot> = {\n  $body_: 'body',\n  $headers_: 'headers',\n  $path_: 'path',\n  $query_: 'query',\n};\nconst extraPrefixes = Object.entries(extraPrefixesMap);\n\ntype KeyMap = Map<\n  string,\n  {\n    in: Slot;\n    map?: string;\n  }\n>;\n\nconst buildKeyMap = (fields: FieldsConfig, map?: KeyMap): KeyMap => {\n  if (!map) {\n    map = new Map();\n  }\n\n  for (const config of fields) {\n    if ('in' in config) {\n      if (config.key) {\n        map.set(config.key, {\n          in: config.in,\n          map: config.map,\n        });\n      }\n    } else if (config.args) {\n      buildKeyMap(config.args, map);\n    }\n  }\n\n  return map;\n};\n\ninterface Params {\n  body: unknown;\n  headers: Record<string, unknown>;\n  path: Record<string, unknown>;\n  query: Record<string, unknown>;\n}\n\nconst stripEmptySlots = (params: Params) => {\n  for (const [slot, value] of Object.entries(params)) {\n    if (value && typeof value === 'object' && !Object.keys(value).length) {\n      delete params[slot as Slot];\n    }\n  }\n};\n\nexport const buildClientParams = (\n  args: ReadonlyArray<unknown>,\n  fields: FieldsConfig,\n) => {\n  const params: Params = {\n    body: {},\n    headers: {},\n    path: {},\n    query: {},\n  };\n\n  const map = buildKeyMap(fields);\n\n  let config: FieldsConfig[number] | undefined;\n\n  for (const [index, arg] of args.entries()) {\n    if (fields[index]) {\n      config = fields[index];\n    }\n\n    if (!config) {\n      continue;\n    }\n\n    if ('in' in config) {\n      if (config.key) {\n        const field = map.get(config.key)!;\n        const name = field.map || config.key;\n        (params[field.in] as Record<string, unknown>)[name] = arg;\n      } else {\n        params.body = arg;\n      }\n    } else {\n      for (const [key, value] of Object.entries(arg ?? {})) {\n        const field = map.get(key);\n\n        if (field) {\n          const name = field.map || key;\n          (params[field.in] as Record<string, unknown>)[name] = value;\n        } else {\n          const extra = extraPrefixes.find(([prefix]) =>\n            key.startsWith(prefix),\n          );\n\n          if (extra) {\n            const [prefix, slot] = extra;\n            (params[slot] as Record<string, unknown>)[\n              key.slice(prefix.length)\n            ] = value;\n          } else {\n            for (const [slot, allowed] of Object.entries(\n              config.allowExtra ?? {},\n            )) {\n              if (allowed) {\n                (params[slot as Slot] as Record<string, unknown>)[key] = value;\n                break;\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  stripEmptySlots(params);\n\n  return params;\n};\n","interface SerializeOptions<T>\n  extends SerializePrimitiveOptions,\n    SerializerOptions<T> {}\n\ninterface SerializePrimitiveOptions {\n  allowReserved?: boolean;\n  name: string;\n}\n\nexport interface SerializerOptions<T> {\n  /**\n   * @default true\n   */\n  explode: boolean;\n  style: T;\n}\n\nexport type ArrayStyle = 'form' | 'spaceDelimited' | 'pipeDelimited';\nexport type ArraySeparatorStyle = ArrayStyle | MatrixStyle;\ntype MatrixStyle = 'label' | 'matrix' | 'simple';\nexport type ObjectStyle = 'form' | 'deepObject';\ntype ObjectSeparatorStyle = ObjectStyle | MatrixStyle;\n\ninterface SerializePrimitiveParam extends SerializePrimitiveOptions {\n  value: string;\n}\n\nexport const separatorArrayExplode = (style: ArraySeparatorStyle) => {\n  switch (style) {\n    case 'label':\n      return '.';\n    case 'matrix':\n      return ';';\n    case 'simple':\n      return ',';\n    default:\n      return '&';\n  }\n};\n\nexport const separatorArrayNoExplode = (style: ArraySeparatorStyle) => {\n  switch (style) {\n    case 'form':\n      return ',';\n    case 'pipeDelimited':\n      return '|';\n    case 'spaceDelimited':\n      return '%20';\n    default:\n      return ',';\n  }\n};\n\nexport const separatorObjectExplode = (style: ObjectSeparatorStyle) => {\n  switch (style) {\n    case 'label':\n      return '.';\n    case 'matrix':\n      return ';';\n    case 'simple':\n      return ',';\n    default:\n      return '&';\n  }\n};\n\nexport const serializeArrayParam = ({\n  allowReserved,\n  explode,\n  name,\n  style,\n  value,\n}: SerializeOptions<ArraySeparatorStyle> & {\n  value: unknown[];\n}) => {\n  if (!explode) {\n    const joinedValues = (\n      allowReserved ? value : value.map((v) => encodeURIComponent(v as string))\n    ).join(separatorArrayNoExplode(style));\n    switch (style) {\n      case 'label':\n        return `.${joinedValues}`;\n      case 'matrix':\n        return `;${name}=${joinedValues}`;\n      case 'simple':\n        return joinedValues;\n      default:\n        return `${name}=${joinedValues}`;\n    }\n  }\n\n  const separator = separatorArrayExplode(style);\n  const joinedValues = value\n    .map((v) => {\n      if (style === 'label' || style === 'simple') {\n        return allowReserved ? v : encodeURIComponent(v as string);\n      }\n\n      return serializePrimitiveParam({\n        allowReserved,\n        name,\n        value: v as string,\n      });\n    })\n    .join(separator);\n  return style === 'label' || style === 'matrix'\n    ? separator + joinedValues\n    : joinedValues;\n};\n\nexport const serializePrimitiveParam = ({\n  allowReserved,\n  name,\n  value,\n}: SerializePrimitiveParam) => {\n  if (value === undefined || value === null) {\n    return '';\n  }\n\n  if (typeof value === 'object') {\n    throw new Error(\n      'Deeply-nested arrays/objects aren’t supported. Provide your own `querySerializer()` to handle these.',\n    );\n  }\n\n  return `${name}=${allowReserved ? value : encodeURIComponent(value)}`;\n};\n\nexport const serializeObjectParam = ({\n  allowReserved,\n  explode,\n  name,\n  style,\n  value,\n}: SerializeOptions<ObjectSeparatorStyle> & {\n  value: Record<string, unknown> | Date;\n}) => {\n  if (value instanceof Date) {\n    return `${name}=${value.toISOString()}`;\n  }\n\n  if (style !== 'deepObject' && !explode) {\n    let values: string[] = [];\n    Object.entries(value).forEach(([key, v]) => {\n      values = [\n        ...values,\n        key,\n        allowReserved ? (v as string) : encodeURIComponent(v as string),\n      ];\n    });\n    const joinedValues = values.join(',');\n    switch (style) {\n      case 'form':\n        return `${name}=${joinedValues}`;\n      case 'label':\n        return `.${joinedValues}`;\n      case 'matrix':\n        return `;${name}=${joinedValues}`;\n      default:\n        return joinedValues;\n    }\n  }\n\n  const separator = separatorObjectExplode(style);\n  const joinedValues = Object.entries(value)\n    .map(([key, v]) =>\n      serializePrimitiveParam({\n        allowReserved,\n        name: style === 'deepObject' ? `${name}[${key}]` : key,\n        value: v as string,\n      }),\n    )\n    .join(separator);\n  return style === 'label' || style === 'matrix'\n    ? separator + joinedValues\n    : joinedValues;\n};\n","import type {\n  QuerySerializer,\n  QuerySerializerOptions,\n} from '@hey-api/client-core';\nimport {\n  getAuthToken,\n  jsonBodySerializer,\n  serializeArrayParam,\n  serializeObjectParam,\n  serializePrimitiveParam,\n} from '@hey-api/client-core';\n\nimport type { Client, ClientOptions, Config, RequestOptions } from './types';\n\ninterface PathSerializer {\n  path: Record<string, unknown>;\n  url: string;\n}\n\nconst PATH_PARAM_RE = /\\{[^{}]+\\}/g;\n\ntype ArrayStyle = 'form' | 'spaceDelimited' | 'pipeDelimited';\ntype MatrixStyle = 'label' | 'matrix' | 'simple';\ntype ArraySeparatorStyle = ArrayStyle | MatrixStyle;\n\nconst defaultPathSerializer = ({ path, url: _url }: PathSerializer) => {\n  let url = _url;\n  const matches = _url.match(PATH_PARAM_RE);\n  if (matches) {\n    for (const match of matches) {\n      let explode = false;\n      let name = match.substring(1, match.length - 1);\n      let style: ArraySeparatorStyle = 'simple';\n\n      if (name.endsWith('*')) {\n        explode = true;\n        name = name.substring(0, name.length - 1);\n      }\n\n      if (name.startsWith('.')) {\n        name = name.substring(1);\n        style = 'label';\n      } else if (name.startsWith(';')) {\n        name = name.substring(1);\n        style = 'matrix';\n      }\n\n      const value = path[name];\n\n      if (value === undefined || value === null) {\n        continue;\n      }\n\n      if (Array.isArray(value)) {\n        url = url.replace(\n          match,\n          serializeArrayParam({ explode, name, style, value }),\n        );\n        continue;\n      }\n\n      if (typeof value === 'object') {\n        url = url.replace(\n          match,\n          serializeObjectParam({\n            explode,\n            name,\n            style,\n            value: value as Record<string, unknown>,\n          }),\n        );\n        continue;\n      }\n\n      if (style === 'matrix') {\n        url = url.replace(\n          match,\n          `;${serializePrimitiveParam({\n            name,\n            value: value as string,\n          })}`,\n        );\n        continue;\n      }\n\n      const replaceValue = encodeURIComponent(\n        style === 'label' ? `.${value as string}` : (value as string),\n      );\n      url = url.replace(match, replaceValue);\n    }\n  }\n  return url;\n};\n\nexport const createQuerySerializer = <T = unknown>({\n  allowReserved,\n  array,\n  object,\n}: QuerySerializerOptions = {}) => {\n  const querySerializer = (queryParams: T) => {\n    const search: string[] = [];\n    if (queryParams && typeof queryParams === 'object') {\n      for (const name in queryParams) {\n        const value = queryParams[name];\n\n        if (value === undefined || value === null) {\n          continue;\n        }\n\n        if (Array.isArray(value)) {\n          const serializedArray = serializeArrayParam({\n            allowReserved,\n            explode: true,\n            name,\n            style: 'form',\n            value,\n            ...array,\n          });\n          if (serializedArray) search.push(serializedArray);\n        } else if (typeof value === 'object') {\n          const serializedObject = serializeObjectParam({\n            allowReserved,\n            explode: true,\n            name,\n            style: 'deepObject',\n            value: value as Record<string, unknown>,\n            ...object,\n          });\n          if (serializedObject) search.push(serializedObject);\n        } else {\n          const serializedPrimitive = serializePrimitiveParam({\n            allowReserved,\n            name,\n            value: value as string,\n          });\n          if (serializedPrimitive) search.push(serializedPrimitive);\n        }\n      }\n    }\n    return search.join('&');\n  };\n  return querySerializer;\n};\n\n/**\n * Infers parseAs value from provided Content-Type header.\n */\nexport const getParseAs = (\n  contentType: string | null,\n): Exclude<Config['parseAs'], 'auto'> => {\n  if (!contentType) {\n    // If no Content-Type header is provided, the best we can do is return the raw response body,\n    // which is effectively the same as the 'stream' option.\n    return 'stream';\n  }\n\n  const cleanContent = contentType.split(';')[0]?.trim();\n\n  if (!cleanContent) {\n    return;\n  }\n\n  if (\n    cleanContent.startsWith('application/json') ||\n    cleanContent.endsWith('+json')\n  ) {\n    return 'json';\n  }\n\n  if (cleanContent === 'multipart/form-data') {\n    return 'formData';\n  }\n\n  if (\n    ['application/', 'audio/', 'image/', 'video/'].some((type) =>\n      cleanContent.startsWith(type),\n    )\n  ) {\n    return 'blob';\n  }\n\n  if (cleanContent.startsWith('text/')) {\n    return 'text';\n  }\n};\n\nexport const setAuthParams = async ({\n  security,\n  ...options\n}: Pick<Required<RequestOptions>, 'security'> &\n  Pick<RequestOptions, 'auth' | 'query'> & {\n    headers: Headers;\n  }) => {\n  for (const auth of security) {\n    const token = await getAuthToken(auth, options.auth);\n\n    if (!token) {\n      continue;\n    }\n\n    const name = auth.name ?? 'Authorization';\n\n    switch (auth.in) {\n      case 'query':\n        if (!options.query) {\n          options.query = {};\n        }\n        options.query[name] = token;\n        break;\n      case 'cookie':\n        options.headers.append('Cookie', `${name}=${token}`);\n        break;\n      case 'header':\n      default:\n        options.headers.set(name, token);\n        break;\n    }\n\n    return;\n  }\n};\n\nexport const buildUrl: Client['buildUrl'] = (options) => {\n  const url = getUrl({\n    baseUrl: options.baseUrl as string,\n    path: options.path,\n    query: options.query,\n    querySerializer:\n      typeof options.querySerializer === 'function'\n        ? options.querySerializer\n        : createQuerySerializer(options.querySerializer),\n    url: options.url,\n  });\n  return url;\n};\n\nexport const getUrl = ({\n  baseUrl,\n  path,\n  query,\n  querySerializer,\n  url: _url,\n}: {\n  baseUrl?: string;\n  path?: Record<string, unknown>;\n  query?: Record<string, unknown>;\n  querySerializer: QuerySerializer;\n  url: string;\n}) => {\n  const pathUrl = _url.startsWith('/') ? _url : `/${_url}`;\n  let url = (baseUrl ?? '') + pathUrl;\n  if (path) {\n    url = defaultPathSerializer({ path, url });\n  }\n  let search = query ? querySerializer(query) : '';\n  if (search.startsWith('?')) {\n    search = search.substring(1);\n  }\n  if (search) {\n    url += `?${search}`;\n  }\n  return url;\n};\n\nexport const mergeConfigs = (a: Config, b: Config): Config => {\n  const config = { ...a, ...b };\n  if (config.baseUrl?.endsWith('/')) {\n    config.baseUrl = config.baseUrl.substring(0, config.baseUrl.length - 1);\n  }\n  config.headers = mergeHeaders(a.headers, b.headers);\n  return config;\n};\n\nexport const mergeHeaders = (\n  ...headers: Array<Required<Config>['headers'] | undefined>\n): Headers => {\n  const mergedHeaders = new Headers();\n  for (const header of headers) {\n    if (!header || typeof header !== 'object') {\n      continue;\n    }\n\n    const iterator =\n      header instanceof Headers ? header.entries() : Object.entries(header);\n\n    for (const [key, value] of iterator) {\n      if (value === null) {\n        mergedHeaders.delete(key);\n      } else if (Array.isArray(value)) {\n        for (const v of value) {\n          mergedHeaders.append(key, v as string);\n        }\n      } else if (value !== undefined) {\n        // assume object headers are meant to be JSON stringified, i.e. their\n        // content value in OpenAPI specification is 'application/json'\n        mergedHeaders.set(\n          key,\n          typeof value === 'object' ? JSON.stringify(value) : (value as string),\n        );\n      }\n    }\n  }\n  return mergedHeaders;\n};\n\ntype ErrInterceptor<Err, Res, Req, Options> = (\n  error: Err,\n  response: Res,\n  request: Req,\n  options: Options,\n) => Err | Promise<Err>;\n\ntype ReqInterceptor<Req, Options> = (\n  request: Req,\n  options: Options,\n) => Req | Promise<Req>;\n\ntype ResInterceptor<Res, Req, Options> = (\n  response: Res,\n  request: Req,\n  options: Options,\n) => Res | Promise<Res>;\n\nclass Interceptors<Interceptor> {\n  _fns: (Interceptor | null)[];\n\n  constructor() {\n    this._fns = [];\n  }\n\n  clear() {\n    this._fns = [];\n  }\n\n  getInterceptorIndex(id: number | Interceptor): number {\n    if (typeof id === 'number') {\n      return this._fns[id] ? id : -1;\n    } else {\n      return this._fns.indexOf(id);\n    }\n  }\n  exists(id: number | Interceptor) {\n    const index = this.getInterceptorIndex(id);\n    return !!this._fns[index];\n  }\n\n  eject(id: number | Interceptor) {\n    const index = this.getInterceptorIndex(id);\n    if (this._fns[index]) {\n      this._fns[index] = null;\n    }\n  }\n\n  update(id: number | Interceptor, fn: Interceptor) {\n    const index = this.getInterceptorIndex(id);\n    if (this._fns[index]) {\n      this._fns[index] = fn;\n      return id;\n    } else {\n      return false;\n    }\n  }\n\n  use(fn: Interceptor) {\n    this._fns = [...this._fns, fn];\n    return this._fns.length - 1;\n  }\n}\n\n// `createInterceptors()` response, meant for external use as it does not\n// expose internals\nexport interface Middleware<Req, Res, Err, Options> {\n  error: Pick<\n    Interceptors<ErrInterceptor<Err, Res, Req, Options>>,\n    'eject' | 'use'\n  >;\n  request: Pick<Interceptors<ReqInterceptor<Req, Options>>, 'eject' | 'use'>;\n  response: Pick<\n    Interceptors<ResInterceptor<Res, Req, Options>>,\n    'eject' | 'use'\n  >;\n}\n\n// do not add `Middleware` as return type so we can use _fns internally\nexport const createInterceptors = <Req, Res, Err, Options>() => ({\n  error: new Interceptors<ErrInterceptor<Err, Res, Req, Options>>(),\n  request: new Interceptors<ReqInterceptor<Req, Options>>(),\n  response: new Interceptors<ResInterceptor<Res, Req, Options>>(),\n});\n\nconst defaultQuerySerializer = createQuerySerializer({\n  allowReserved: false,\n  array: {\n    explode: true,\n    style: 'form',\n  },\n  object: {\n    explode: true,\n    style: 'deepObject',\n  },\n});\n\nconst defaultHeaders = {\n  'Content-Type': 'application/json',\n};\n\nexport const createConfig = <T extends ClientOptions = ClientOptions>(\n  override: Config<Omit<ClientOptions, keyof T> & T> = {},\n): Config<Omit<ClientOptions, keyof T> & T> => ({\n  ...jsonBodySerializer,\n  headers: defaultHeaders,\n  parseAs: 'auto',\n  querySerializer: defaultQuerySerializer,\n  ...override,\n});\n","import type { Client, Config, RequestOptions } from './types';\nimport {\n  buildUrl,\n  createConfig,\n  createInterceptors,\n  getParseAs,\n  mergeConfigs,\n  mergeHeaders,\n  setAuthParams,\n} from './utils';\n\ntype ReqInit = Omit<RequestInit, 'body' | 'headers'> & {\n  body?: any;\n  headers: ReturnType<typeof mergeHeaders>;\n};\n\nexport const createClient = (config: Config = {}): Client => {\n  let _config = mergeConfigs(createConfig(), config);\n\n  const getConfig = (): Config => ({ ..._config });\n\n  const setConfig = (config: Config): Config => {\n    _config = mergeConfigs(_config, config);\n    return getConfig();\n  };\n\n  const interceptors = createInterceptors<\n    Request,\n    Response,\n    unknown,\n    RequestOptions\n  >();\n\n  const request: Client['request'] = async (options) => {\n    const opts = {\n      ..._config,\n      ...options,\n      fetch: options.fetch ?? _config.fetch ?? globalThis.fetch,\n      headers: mergeHeaders(_config.headers, options.headers),\n    };\n\n    if (opts.security) {\n      await setAuthParams({\n        ...opts,\n        security: opts.security,\n      });\n    }\n\n    if (opts.body && opts.bodySerializer) {\n      opts.body = opts.bodySerializer(opts.body);\n    }\n\n    // remove Content-Type header if body is empty to avoid sending invalid requests\n    if (opts.body === undefined || opts.body === '') {\n      opts.headers.delete('Content-Type');\n    }\n\n    const url = buildUrl(opts);\n    const requestInit: ReqInit = {\n      redirect: 'follow',\n      ...opts,\n    };\n\n    let request = new Request(url, requestInit);\n\n    for (const fn of interceptors.request._fns) {\n      if (fn) {\n        request = await fn(request, opts);\n      }\n    }\n\n    // fetch must be assigned here, otherwise it would throw the error:\n    // TypeError: Failed to execute 'fetch' on 'Window': Illegal invocation\n    const _fetch = opts.fetch!;\n    let response = await _fetch(request);\n\n    for (const fn of interceptors.response._fns) {\n      if (fn) {\n        response = await fn(response, request, opts);\n      }\n    }\n\n    const result = {\n      request,\n      response,\n    };\n\n    if (response.ok) {\n      if (\n        response.status === 204 ||\n        response.headers.get('Content-Length') === '0'\n      ) {\n        return opts.responseStyle === 'data'\n          ? {}\n          : {\n              data: {},\n              ...result,\n            };\n      }\n\n      const parseAs =\n        (opts.parseAs === 'auto'\n          ? getParseAs(response.headers.get('Content-Type'))\n          : opts.parseAs) ?? 'json';\n\n      if (parseAs === 'stream') {\n        return opts.responseStyle === 'data'\n          ? response.body\n          : {\n              data: response.body,\n              ...result,\n            };\n      }\n\n      let data = await response[parseAs]();\n      if (parseAs === 'json') {\n        if (opts.responseValidator) {\n          await opts.responseValidator(data);\n        }\n\n        if (opts.responseTransformer) {\n          data = await opts.responseTransformer(data);\n        }\n      }\n\n      return opts.responseStyle === 'data'\n        ? data\n        : {\n            data,\n            ...result,\n          };\n    }\n\n    let error = await response.text();\n\n    try {\n      error = JSON.parse(error);\n    } catch {\n      // noop\n    }\n\n    let finalError = error;\n\n    for (const fn of interceptors.error._fns) {\n      if (fn) {\n        finalError = (await fn(error, response, request, opts)) as string;\n      }\n    }\n\n    finalError = finalError || ({} as string);\n\n    if (opts.throwOnError) {\n      throw finalError;\n    }\n\n    // TODO: we probably want to return error and improve types\n    return opts.responseStyle === 'data'\n      ? undefined\n      : {\n          error: finalError,\n          ...result,\n        };\n  };\n\n  return {\n    buildUrl,\n    connect: (options) => request({ ...options, method: 'CONNECT' }),\n    delete: (options) => request({ ...options, method: 'DELETE' }),\n    get: (options) => request({ ...options, method: 'GET' }),\n    getConfig,\n    head: (options) => request({ ...options, method: 'HEAD' }),\n    interceptors,\n    options: (options) => request({ ...options, method: 'OPTIONS' }),\n    patch: (options) => request({ ...options, method: 'PATCH' }),\n    post: (options) => request({ ...options, method: 'POST' }),\n    put: (options) => request({ ...options, method: 'PUT' }),\n    request,\n    setConfig,\n    trace: (options) => request({ ...options, method: 'TRACE' }),\n  };\n};\n"]}