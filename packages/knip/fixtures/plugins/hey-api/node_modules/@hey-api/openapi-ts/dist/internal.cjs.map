{"version":3,"sources":["../src/mergeHeaders.ts","../src/getSpec.ts","../src/getLogs.ts","../src/plugins/@hey-api/client-core/config.ts","../src/plugins/@hey-api/client-core/utils.ts","../src/compiler/classes.ts","../src/utils/regexp.ts","../src/utils/escape.ts","../src/utils/config.ts","../src/compiler/utils.ts","../src/compiler/types.ts","../src/compiler/module.ts","../src/compiler/convert.ts","../src/compiler/return.ts","../src/compiler/transform.ts","../src/compiler/typedef.ts","../src/compiler/index.ts","../src/generate/client.ts","../src/generate/utils.ts","../src/utils/url.ts","../src/utils/ref.ts","../src/utils/stringCase.ts","../src/plugins/shared/utils/ref.ts","../src/plugins/@hey-api/typescript/ref.ts","../src/plugins/@hey-api/client-core/client.ts","../src/plugins/@hey-api/client-core/createClientConfig.ts","../src/plugins/@hey-api/client-core/plugin.ts","../src/plugins/@hey-api/client-axios/config.ts","../src/plugins/@hey-api/client-fetch/config.ts","../src/plugins/@hey-api/client-next/config.ts","../src/plugins/@hey-api/client-nuxt/config.ts","../src/plugins/@hey-api/legacy-angular/config.ts","../src/plugins/@hey-api/legacy-axios/config.ts","../src/plugins/@hey-api/legacy-fetch/config.ts","../src/plugins/@hey-api/legacy-node/config.ts","../src/plugins/@hey-api/legacy-xhr/config.ts","../src/openApi/shared/utils/identifier.ts","../src/plugins/@hey-api/schemas/plugin.ts","../src/generate/files.ts","../src/ir/context.ts","../src/generate/tsConfig.ts","../src/error.ts","../src/ir/parameter.ts","../src/ir/schema.ts","../src/openApi/shared/utils/schema.ts","../src/ir/utils.ts","../src/ir/operation.ts","../src/openApi/shared/utils/graph.ts","../src/openApi/common/parser/sanitize.ts","../src/openApi/shared/utils/operation.ts","../src/openApi/shared/utils/filter.ts","../src/openApi/shared/utils/parameter.ts","../src/openApi/shared/utils/validator.ts","../src/openApi/2.0.x/parser/filter.ts","../src/openApi/2.0.x/parser/graph.ts","../src/ir/mediaType.ts","../src/openApi/2.0.x/parser/mediaType.ts","../src/ir/pagination.ts","../src/openApi/shared/utils/discriminator.ts","../src/openApi/2.0.x/parser/schema.ts","../src/openApi/2.0.x/parser/pagination.ts","../src/openApi/2.0.x/parser/operation.ts","../src/openApi/2.0.x/parser/parameter.ts","../src/openApi/2.0.x/parser/server.ts","../src/openApi/2.0.x/parser/index.ts","../src/openApi/3.0.x/parser/filter.ts","../src/openApi/3.0.x/parser/graph.ts","../src/openApi/3.0.x/parser/mediaType.ts","../src/openApi/3.0.x/parser/schema.ts","../src/openApi/3.0.x/parser/pagination.ts","../src/openApi/3.0.x/parser/operation.ts","../src/openApi/3.0.x/parser/parameter.ts","../src/openApi/3.0.x/parser/requestBody.ts","../src/openApi/3.0.x/parser/server.ts","../src/openApi/3.0.x/parser/index.ts","../src/openApi/3.1.x/parser/filter.ts","../src/openApi/3.1.x/parser/graph.ts","../src/openApi/3.1.x/parser/mediaType.ts","../src/openApi/3.1.x/parser/schema.ts","../src/openApi/3.1.x/parser/pagination.ts","../src/openApi/3.1.x/parser/operation.ts","../src/openApi/3.1.x/parser/parameter.ts","../src/openApi/3.1.x/parser/requestBody.ts","../src/openApi/3.1.x/parser/server.ts","../src/openApi/3.1.x/parser/index.ts","../src/utils/const.ts","../src/utils/transform.ts","../src/utils/unique.ts","../src/utils/sort.ts","../src/utils/enum.ts","../src/utils/meta.ts","../src/utils/type.ts","../src/openApi/common/parser/operation.ts","../src/openApi/index.ts","../src/plugins/@hey-api/schemas/plugin-legacy.ts","../src/plugins/@hey-api/schemas/config.ts","../src/plugins/shared/utils/operation.ts","../src/plugins/@hey-api/sdk/constants.ts","../src/plugins/@hey-api/transformers/plugin.ts","../src/plugins/@hey-api/sdk/auth.ts","../src/plugins/valibot/constants.ts","../src/plugins/zod/plugin.ts","../src/plugins/shared/utils/schema.ts","../src/plugins/@hey-api/sdk/validator.ts","../src/plugins/@hey-api/sdk/operation.ts","../src/plugins/@hey-api/sdk/plugin-legacy.ts","../src/plugins/@hey-api/sdk/typeOptions.ts","../src/plugins/@hey-api/sdk/plugin.ts","../src/plugins/@hey-api/sdk/config.ts","../src/plugins/@hey-api/typescript/plugin-legacy.ts","../src/plugins/@hey-api/transformers/plugin-legacy.ts","../src/plugins/@hey-api/transformers/config.ts","../src/plugins/shared/utils/case.ts","../src/plugins/@hey-api/typescript/clientOptions.ts","../src/plugins/@hey-api/typescript/plugin.ts","../src/plugins/@hey-api/typescript/config.ts","../src/plugins/@tanstack/query-core/infiniteQueryOptions.ts","../src/plugins/@tanstack/query-core/useType.ts","../src/plugins/@tanstack/query-core/queryKey.ts","../src/plugins/@tanstack/query-core/mutationOptions.ts","../src/plugins/@tanstack/query-core/queryOptions.ts","../src/plugins/@tanstack/query-core/plugin.ts","../src/plugins/@tanstack/query-core/plugin-legacy.ts","../src/plugins/@tanstack/angular-query-experimental/config.ts","../src/plugins/@tanstack/react-query/config.ts","../src/plugins/@tanstack/solid-query/config.ts","../src/plugins/@tanstack/svelte-query/config.ts","../src/plugins/@tanstack/vue-query/config.ts","../src/plugins/fastify/plugin.ts","../src/plugins/fastify/config.ts","../src/plugins/valibot/plugin.ts","../src/plugins/valibot/config.ts","../src/plugins/zod/config.ts","../src/plugins/index.ts","../src/initConfigs.ts"],"names":["mergeHeaders","headers","mergedHeaders","header","iterator","key","value","v","getSpec","fetchOptions","inputPath","timeout","watch","refParser","$RefParser","resolvedInput","getResolvedInput","arrayBuffer","hasChanged","response","request","sendRequest","error","eTag","lastModified","content","getLogs","userConfig","logs","clientDefaultConfig","clientId","getClientBaseUrlKey","config","client","getClientPlugin","name","plugin","illegalStartCharactersRegExp","numberRegExp","reservedBrowserGlobalsRegExp","reservedJavaScriptGlobalsRegExp","reservedJavaScriptKeywordsRegExp","reservedNodeGlobalsRegExp","reservedTypeScriptKeywordsRegExp","validTypescriptIdentifierRegExp","escapeName","unescapeName","escapeComment","_l","w","EOL","_config","getConfig","setConfig","isLegacyClient","legacyNameFromConfig","printer","ts","createSourceFile","sourceText","blankSourceFile","unescapeUnicode","_","hex","tsNodeToString","node","unescape","result","stringToTsNodes","createIdentifier","text","createThis","createModifier","keyword","kind","syntaxKindKeyword","createPropertyDeclaration","initializer","modifier","type","ots","alias","asType","nameNode","aliasNode","hasBothQuotes","hasNewlines","hasUnescapedBackticks","isBacktickEscaped","createStringLiteral","isTsNode","isType","processCommentObject","commentObject","lines","line","jsdocTexts","index","jsdoc","cleanedJsdoc","addLeadingComments","comments","isObjectStyle","comment","commentObjects","createTypeNode","base","args","createTypeReferenceNode","arg","createPropertyAccessChain","expression","createPropertyAccessExpression","isOptional","nodeExpression","nodeName","createNull","toExpression","identifiers","isValueAccess","shorthand","createArrayLiteralExpression","createObjectType","parts","toParameterDeclarations","parameters","parameter","createParameterDeclaration","param","modifiers","createKeywordTypeNode","toTypeParameters","types","createTypeParameterDeclaration","createTypeOperatorNode","operator","operatorKeyword","constraint","defaultType","createMappedTypeNode","members","nameType","questionToken","readonlyToken","typeParameter","createLiteralTypeNode","literal","createArrowFunction","async","multiLine","returnType","statements","createBlock","createAnonymousFunction","elements","createAwaitExpression","createFunctionTypeNode","typeParameters","obj","properties","canShorthand","assignment","nameIdentifier","createAsExpression","createPropertyAssignment","createEnumDeclaration","enumMemberComments","enumMember","createEnumMember","createNamespaceDeclaration","createIndexedAccessTypeNode","indexType","objectType","isSingleQuote","createConditionalExpression","condition","whenFalse","whenTrue","createTypeOfExpression","createTypeAliasDeclaration","exportType","typeArguments","typeName","createTypeParenthesizedNode","required","createNewExpression","argumentsArray","createForOfStatement","awaitModifier","statement","createAssignment","left","right","createRegularExpressionLiteral","flags","textWithSlashes","createTemplateLiteralType","spans","spanText","item","span","createExportAllDeclaration","module","createCallExpression","functionName","createNamedExportDeclarations","exports","exportedTypes","hasNonTypeExport","exportClause","moduleSpecifier","createConstVariable","assertion","destructure","exportConst","declaration","createNamedImportDeclarations","imports","importedTypes","hasNonTypeImport","namespaceImport","namedBindings","importClause","createConstructorDeclaration","accessLevel","createMethodDeclaration","isStatic","createClassDeclaration","decorator","exportClass","extendedClasses","nodes","heritageClauses","extendedClass","expressionToStatement","createReturnStatement","createReturnFunctionCall","createReturnVariable","createSafeAccessExpression","path","element","createAccessExpression","createPropertyAccessExpressions","expressions","createBinaryExpression","createIfStatement","elseStatement","thenStatement","createDateTransformMutation","safeAccessExpression","accessExpression","createFunctionTransformMutation","transformerName","createArrayTransformMutation","createDateTransformerExpression","parameterName","createArrayMapTransform","transformExpression","nullNode","maybeNullable","isNullable","createTypeInterfaceNode","indexKey","indexProperty","useLegacyResolution","property","signature","isIndexMapped","indexSignature","createTypeUnionNode","createTypeIntersectionNode","createTypeTupleNode","createTypeRecordNode","keys","values","keyNode","valueNode","createTypeArrayNode","compiler","ensureDirSync","fs","relativeModulePath","moduleOutput","sourceOutput","outputParts","getClientSrcPath","pluginFilePathComponents","clientModulePath","clientSrcPath","outputPath","clientApi","parseUrlRegExp","parseUrl","errorResponse","match","host","protocol","irRef","isRefOpenApiComponent","$ref","refToParts","refToName","resolveRef","spec","current","part","p","uppercaseRegExp","lowercaseRegExp","identifierRegExp","separatorsRegExp","leadingSeparatorsRegExp","separatorsAndIdentifierRegExp","numbersAndIdentifierRegExp","preserveCase","_case","string","isLastCharLower","isLastCharUpper","isLastLastCharUpper","isLastLastCharPreserved","separator","character","nextIndex","nextCharacter","isSeparatorBeforeNextCharacter","characterLower","characterUpper","stringCase","stripLeadingSeparators","identifier","offset","operationIrRef","id","parameterId","affix","separate","typesId","refIdentifier","onGet","importIdentifier","context","file","operation","ref","resolveBaseUrlString","baseUrl","servers","createClient","clientModule","createConfig","clientOptions","createClientConfig","defaultValues","resolvedBaseUrl","url","createConfigParameters","createClientConfigType","configType","defaultClientOptions","defaultClientOptionsType","tType","typeCreateClientConfig","clientPluginHandler","defaultConfig","regexps","ensureValidIdentifier","regexp","schemasId","stripSchema","schema","schemaToJsonSchemaDraft_04","_schema","schemaToJsonSchemaDraft_05","schemaToJsonSchema2020_12","schemaName","customName","schemasV2_0_X","schemasV3_0_X","schemasV3_1_X","handler","TypeScriptFile","dir","exportFromIndex","identifierCase","namespace","parseRef","refValue","ensureUniqueIdentifier","importedItem","moduleMap","splitNameAndExtension","filePath","configFileParts","cfgParts","thisPathParts","filePathParts","relativePath","pathArray","relativePathToFile","relativeFolder","fileName","options","extension","tsConfig","output","shouldAppendJs","importsStringArray","_module","resolvedModule","propIndex","prop","count","create","nameTransformer","nameWithCasing","lowercaseName","nameWithCasingAndTransformer","nameValue","__filename","fileURLToPath","__dirname","HeyApiError","event","pluginName","message","IRContext","eventListeners","listener","originalError","outputDir","createdFile","resolved","dereferenced","callbackFn","getPaginationSchema","hasParameterGroupObjectRequired","parameterGroup","hasParametersObjectRequired","parameterWithPagination","deduplicateSchema","uniqueItems","typeIds","typeId","liftedSchema","mergeSchemaAccessScopes","a","b","mergedScopes","scope","assignItems","items","addItemsToSchema","logicalOperator","mutateSchemaOneItem","hasOperationDataRequired","createOperationKey","method","operationPagination","body","resolvedSchema","paginationProp","statusCodeToGroup","statusCode","operationResponsesMap","errors","responses","defaultResponse","inferred","description","errorKeys","errorUnion","responseKeys","responseUnion","stringToNamespace","namespaceNeedle","addNamespace","removeNamespace","ensureValidTypeScriptJavaScriptIdentifier","replaced","sanitizeNamespaceIdentifier","sanitizeOperationParameterName","withoutBrackets","httpMethods","operationToId","state","urlWithoutPlaceholders","createFiltersSetAndRegExps","filters","collectFiltersSetFromRegExpsOpenApiV2","excludeOperations","excludeSchemas","includeOperations","includeSchemas","entry","pathItem","collectFiltersSetFromRegExpsOpenApiV3","excludeParameters","excludeRequestBodies","excludeResponses","includeParameters","includeRequestBodies","includeResponses","collectFiltersSetFromRegExps","createFilters","hasFilters","collectOperations","graph","requestBodies","schemas","finalSet","stack","tag","dependency","collectParameters","collectRequestBodies","collectResponses","collectSchemas","dropExcludedParameters","excludedKey","dropExcludedRequestBodies","dropExcludedResponses","dropExcludedSchemas","dropOrphans","operationDependencies","collectOperationDependencies","operations","dependencies","createFilteredDependencies","mergeParametersObjects","source","target","isSimpleKey","formatPath","segment","i","formatValidatorIssue","issue","pathStr","level","colors","highlightedMessage","code","shouldPrint","handleValidatorResult","filterSpec","preserveOrder","filtered","collectSchemaDependencies","createGraph","validate","issues","operationIds","operationKey","fileLikeRegExp","jsonMimeRegExp","multipartFormDataMimeRegExp","textMimeRegExp","xWwwFormUrlEncodedMimeRegExp","octetStreamMimeRegExp","isMediaTypeFileLike","mediaType","mediaTypeToIrMediaType","contentToSchema","mediaTypeObject","mimeTypes","DEFAULT_PAGINATION_KEYWORDS","getPaginationKeywordsRegExp","keywords","pattern","discriminatorValues","mapping","getSchemaType","parseSchemaJsDoc","irSchema","parseSchemaMeta","parseArray","schemaItems","irItemsSchema","schemaToIrSchema","ofArray","parseBoolean","parseNumber","parseObject","schemaProperties","irPropertySchema","irAdditionalPropertiesSchema","parseString","initIrSchema","parseAllOf","schemaType","compositionSchemas","compositionSchema","irCompositionSchema","valueSchemas","irDiscriminatorSchema","irRefSchema","irObjectSchema","parseOneType","requiredProperty","finalCompositionSchema","nestedItems","parseEnum","enumValue","typeOfEnumValue","enumType","irTypeSchema","refSchema","parseNullableType","typeIrSchema","parseType","parseUnknown","parseSchema","isPaginationType","paginationField","finalSchema","allOf","pagination","parseOperationJsDoc","irOperation","initIrOperation","operationToIrOperation","securitySchemesMap","isRequestBodyRequired","requestBodyObject","requestBodyObjectRequired","requestBodyParameter","requestBody","responseObject","securitySchemeObjects","securityRequirementObject","securitySchemeObject","irSecuritySchemeObject","parseOperation","defaultExplode","collectionFormat","defaultStyle","_in","parametersArrayToObject","parametersObject","parameterOrReference","parameterToIrParameter","style","irParameter","parseServers","schemes","scheme","parseV2_0_X","shouldFilterSpec","sets","finalPathItem","commonOperation","operationArgs","media","server","parseAnyOf","parseOneOf","defaultAllowReserved","explode","parseParameter","requestBodyToIrRequestBody","irRequestBody","parseRequestBody","parseV3_0_X","securityOrReference","requestBodyOrReference","getSchemaTypes","irItemSchema","parseNull","schemaTypes","irResolvedRefSchema","parseManyTypes","nonNullCompositionSchemas","parseV3_1_X","refSchemasPartial","transformClassName","transformTypeName","cleanAndTransformTypeName","transformed","unique","arr","sort","nameA","nameB","sorterByName","sortByName","enumKey","enumUnionType","enums","enumerator","union","enumEntry","getSchemasMeta","definitionName","isModelDate","model","typeReference","typeNode","meta","typeArray","m","toType","typeEnum","typeDict","typeUnionOrIntersection","typeInterface","isLegacy","maybeRequired","transformTypeKeyName","setUniqueTypeName","unsetUniqueTypeName","isOperationParameterRequired","parseOpenApiSpec","ensureValidSchemaOutput","parentKey","toSchemaName","validName","handlerLegacy","files","openApi","addSchema","definition","createOperationComment","isOperationOptionsRequired","isNuxtClient","nuxtTypeComposable","nuxtTypeDefault","nuxtTypeResponse","sdkId","bigIntExpressions","dataExpression","bigIntCallExpression","dateExpressions","identifierDate","operationTransformerIrRef","schemaIrRef","schemaResponseTransformerRef","transformersId","dataVariableName","ensureStatements","isNodeReturnStatement","schemaResponseTransformerNodes","identifierData","processSchemaType","callExpression","mapCallbackStatements","stmt","propertyAccessExpression","propertyNodes","noNullableTypesInSchema","x","arrayNodes","identifierItem","identifierResponse","identifierResponseTransformer","responseTransformerNode","securitySchemeObjectToAuthObject","operationAuth","auth","authObject","valibotId","createSchemaComment","zodId","andIdentifier","coerceIdentifier","defaultIdentifier","intersectionIdentifier","lazyIdentifier","lengthIdentifier","literalIdentifier","maxIdentifier","minIdentifier","objectIdentifier","optionalIdentifier","readonlyIdentifier","regexIdentifier","unionIdentifier","zIdentifier","arrayTypeToZodSchema","arrayExpression","unknownTypeToZodSchema","itemExpressions","schemaToZodSchema","booleanTypeToZodSchema","enumTypeToZodSchema","enumMembers","enumExpression","neverTypeToZodSchema","nullTypeToZodSchema","numberParameter","isBigInt","numberTypeToZodSchema","numberExpression","objectTypeToZodSchema","isRequired","propertyExpression","propertyName","stringTypeToZodSchema","stringExpression","tupleTypeToZodSchema","tupleElements","undefinedTypeToZodSchema","voidTypeToZodSchema","schemaTypeToZodSchema","operationToZodSchema","group","optional","anyType","isCircularReference","identifierRef","zodSchema","itemTypes","firstSchema","callParameter","valibotResponseValidator","identifierSchema","zodResponseValidator","createResponseValidator","operationClassName","getOperationMethodName","operationClasses","classNames","className","methodName","classCandidates","methodCandidate","rootClasses","rootClass","finalClassName","operationOptionsType","throwOnError","optionsName","getResponseType","contentType","cleanContent","operationStatements","isRequiredOptions","sdkOutput","identifierError","requestOptions","responseType","identifierTransformer","responseValidator","parameterContentType","spread","errorType","heyApiClient","optionsClient","clientExpression","generateImport","onImport","setUniqueTypeNameArgs","created","modelResponseTransformerTypeName","operationDataTypeName","operationErrorTypeName","operationResponseTransformerTypeName","operationResponseTypeName","operationOptionsLegacyParserType","importedType","toOperationParamType","getDefaultPrintable","typePath","toOperationReturnType","toOperationComment","params","successResponses","toRequestOptions","onClientImport","responseTransformerName","contents","toObj","prev","curr","errorResponses","serviceFunctionIdentifier","handleIllegal","toOperationStatements","processService","onNode","service","clientPlugin","throwOnErrorTypeGeneric","compileFunctionParams","_members","member","imported","createTypeOptions","tDataShape","clientType","typeOptions","createClientClassNodes","clientAssignmentStatement","generateClassSdk","sdkClasses","generatedClasses","clientClassNodes","classes","currentClassName","parentClassName","parentClass","currentClass","functionNode","generateClass","childClassName","childClass","sdkClass","generateFlatSdk","treeName","emptyModel","generateEnum","leadingComment","generateType","onCreated","processComposition","props","enumDeclarations","processType","processEnum","processScopedEnum","processModel","processServiceTypes","pathsMap","pathMap","methodMap","bodyParameters","bodyParameter","headerParameters","pathParameters","queryParameters","operationProperties","_method","methodParameters","operationName","reqKey","reqResParameters","resKey","isVoidResponse","getRefModels","refModel","ensureModelResponseTransformerExists","modelName","generateResponseTransformer","processArray","refModels","nameModelResponseTransformer","processProperty","onRemoveNode","nonVoidResponses","nameCreated","fieldName","stringType","serverToBaseUrlType","createClientOptions","typeClientOptions","scopeToRef","accessScope","refParts","nameBuilder","processedName","processNameBuilder","shouldSkipSchema","stateAccessScope","addJavaScriptEnum","enumObject","schemaToEnumObject","typeofItems","typeOfItemConst","addTypeEnum","schemaToType","shouldCreateTypeScriptEnum","addTypeScriptEnum","arrayTypeToIdentifier","booleanTypeToIdentifier","enumTypeToIdentifier","isRefComponent","shouldExportEnum","objectNode","enumNode","numberTypeToIdentifier","objectTypeToIdentifier","indexPropertyItems","hasOptionalProperties","hasSkippedProperties","propertyType","stringTypeToIdentifier","tupleTypeToIdentifier","schemaTypeToIdentifier","irParametersToIrSchema","operationToDataType","data","dataRequired","operationToType","identifierErrors","errorsType","keyofType","identifierResponses","responsesType","isSchemaSplit","scopes","hasSchemaScope","finalRef","useTypeData","useTypeError","typeError","axiosError","useTypeResponse","createQueryKeyFn","queryKeyName","TOptionsType","infiniteIdentifier","optionsIdentifier","createQueryKeyFunction","identifierCreateQueryKey","fn","createQueryKeyLiteral","isInfinite","createQueryKeyType","queryKeyType","queryKeyFunctionIdentifier","queryKeyStatement","typeQueryKey","typeData","identifierQueryKey","createInfiniteParamsFn","infiniteQueryOptionsFn","createInfiniteParamsFunction","infiniteQueryOptionsFunctionIdentifier","createInfiniteQueryOptions","queryFn","typeResponse","typePageObjectParam","typePageParam","infiniteQueryKeyName","awaitSdkExpression","mutationOptionsFn","mutationOptionsFunctionIdentifier","createMutationOptions","mutationsType","mutationType","queryOptionsFn","queryOptionsFunctionIdentifier","createQueryOptions","sdk","toInfiniteQueryOptionsName","toMutationOptionsName","toQueryOptionsName","toQueryKeyName","getPaginationIn","createTypeData","typesModulePath","nameTypeData","createTypeError","nameTypeError","createTypeResponse","nameTypeResponse","typeInfiniteData","hasCreateInfiniteParamsFunction","hasCreateQueryKeyParamsFunction","hasInfiniteQueries","hasMutations","hasQueries","processedOperations","hasUsedQueryFn","paginationParameter","fastifyId","operationToRouteHandler","fileTypes","errorsTypeReference","responsesTypeReference","replyTypes","routeHandlers","routeHandler","pipesToExpression","pipes","arrayTypeToValibotSchema","unknownTypeToValibotSchema","schemaPipes","schemaToValibotSchema","booleanTypeToValibotSchema","enumTypeToValibotSchema","resultExpression","neverTypeToValibotSchema","nullTypeToValibotSchema","numberTypeToValibotSchema","objectTypeToValibotSchema","stringTypeToValibotSchema","tupleTypeToValibotSchema","undefinedTypeToValibotSchema","voidTypeToValibotSchema","schemaTypeToValibotSchema","operationToValibotSchema","lazyExpression","valibotSchema","intersectExpression","unionExpression","readonlyExpression","defaultPluginConfigs","defaultPlugins","defaultWatch","getInput","input","getWatch","getPluginsConfig","pluginConfigs","userPlugins","userPluginsConfig","circularReferenceTracker","pluginOrder","plugins","dfs","defaultOptions","userOptions","nativePluginOption","errorMessage","userPlugin","getOutput","isPluginClient","getPlugins","definedPlugins","mergeObjects","objA","objB","mergeConfigs","configA","configB","merged","initConfigs","configurationFile","configFromFile","loadConfig","configFile","dryRun","experimentalParser","exportCore","useOptions"],"mappings":"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","file":"internal.cjs","sourcesContent":["// copy-pasted from @hey-api/client-fetch\nexport const mergeHeaders = (\n  ...headers: Array<RequestInit['headers'] | undefined>\n): Headers => {\n  const mergedHeaders = new Headers();\n  for (const header of headers) {\n    if (!header || typeof header !== 'object') {\n      continue;\n    }\n\n    const iterator =\n      header instanceof Headers ? header.entries() : Object.entries(header);\n\n    for (const [key, value] of iterator) {\n      if (value === null) {\n        mergedHeaders.delete(key);\n      } else if (Array.isArray(value)) {\n        for (const v of value) {\n          mergedHeaders.append(key, v as string);\n        }\n      } else if (value !== undefined) {\n        // assume object headers are meant to be JSON stringified, i.e. their\n        // content value in OpenAPI specification is 'application/json'\n        mergedHeaders.set(\n          key,\n          typeof value === 'object' ? JSON.stringify(value) : (value as string),\n        );\n      }\n    }\n  }\n  return mergedHeaders;\n};\n","import {\n  $RefParser,\n  getResolvedInput,\n  type JSONSchema,\n  sendRequest,\n} from '@hey-api/json-schema-ref-parser';\n\nimport { mergeHeaders } from './mergeHeaders';\nimport type { Config } from './types/config';\nimport type { WatchValues } from './types/types';\n\ninterface SpecResponse {\n  data: JSONSchema;\n  error?: undefined;\n  response?: undefined;\n}\n\ninterface SpecError {\n  data?: undefined;\n  error: 'not-modified' | 'not-ok';\n  response: Response;\n}\n\n/**\n * @internal\n */\nexport const getSpec = async ({\n  fetchOptions,\n  inputPath,\n  timeout,\n  watch,\n}: {\n  fetchOptions?: RequestInit;\n  inputPath: Config['input']['path'];\n  timeout: number;\n  watch: WatchValues;\n}): Promise<SpecResponse | SpecError> => {\n  const refParser = new $RefParser();\n  const resolvedInput = getResolvedInput({ pathOrUrlOrSchema: inputPath });\n\n  let arrayBuffer: ArrayBuffer | undefined;\n  // boolean signals whether the file has **definitely** changed\n  let hasChanged: boolean | undefined;\n  let response: Response | undefined;\n\n  if (resolvedInput.type === 'url') {\n    // do NOT send HEAD request on first run or if unsupported\n    if (watch.lastValue && watch.isHeadMethodSupported !== false) {\n      try {\n        const request = await sendRequest({\n          fetchOptions: {\n            method: 'HEAD',\n            ...fetchOptions,\n            headers: mergeHeaders(fetchOptions?.headers, watch.headers),\n          },\n          timeout,\n          url: resolvedInput.path,\n        });\n\n        if (request.response.status >= 300) {\n          return {\n            error: 'not-ok',\n            response: request.response,\n          };\n        }\n\n        response = request.response;\n      } catch (error) {\n        return {\n          error: 'not-ok',\n          response: new Response(error.message),\n        };\n      }\n\n      if (!response.ok && watch.isHeadMethodSupported) {\n        // assume the server is no longer running\n        // do nothing, it might be restarted later\n        return {\n          error: 'not-ok',\n          response,\n        };\n      }\n\n      if (watch.isHeadMethodSupported === undefined) {\n        watch.isHeadMethodSupported = response.ok;\n      }\n\n      if (response.status === 304) {\n        return {\n          error: 'not-modified',\n          response,\n        };\n      }\n\n      if (hasChanged === undefined) {\n        const eTag = response.headers.get('ETag');\n        if (eTag) {\n          hasChanged = eTag !== watch.headers.get('If-None-Match');\n\n          if (hasChanged) {\n            watch.headers.set('If-None-Match', eTag);\n          }\n        }\n      }\n\n      if (hasChanged === undefined) {\n        const lastModified = response.headers.get('Last-Modified');\n        if (lastModified) {\n          hasChanged = lastModified !== watch.headers.get('If-Modified-Since');\n\n          if (hasChanged) {\n            watch.headers.set('If-Modified-Since', lastModified);\n          }\n        }\n      }\n\n      // we definitely know the input has not changed\n      if (hasChanged === false) {\n        return {\n          error: 'not-modified',\n          response,\n        };\n      }\n    }\n\n    try {\n      const request = await sendRequest({\n        fetchOptions: {\n          method: 'GET',\n          ...fetchOptions,\n        },\n        timeout,\n        url: resolvedInput.path,\n      });\n\n      if (request.response.status >= 300) {\n        return {\n          error: 'not-ok',\n          response: request.response,\n        };\n      }\n\n      response = request.response;\n    } catch (error) {\n      return {\n        error: 'not-ok',\n        response: new Response(error.message),\n      };\n    }\n\n    if (!response.ok) {\n      // assume the server is no longer running\n      // do nothing, it might be restarted later\n      return {\n        error: 'not-ok',\n        response,\n      };\n    }\n\n    arrayBuffer = response.body\n      ? await response.arrayBuffer()\n      : new ArrayBuffer(0);\n\n    if (hasChanged === undefined) {\n      const content = new TextDecoder().decode(arrayBuffer);\n      hasChanged = content !== watch.lastValue;\n      watch.lastValue = content;\n    }\n  } else {\n    // we do not support watch mode for files or raw spec data\n    if (!watch.lastValue) {\n      watch.lastValue = resolvedInput.type;\n    } else {\n      hasChanged = false;\n    }\n  }\n\n  if (hasChanged === false) {\n    return {\n      error: 'not-modified',\n      response: response!,\n    };\n  }\n\n  const data = await refParser.bundle({\n    arrayBuffer,\n    pathOrUrlOrSchema: undefined,\n    resolvedInput,\n  });\n\n  return {\n    data,\n  };\n};\n","import type { Config, UserConfig } from './types/config';\n\nexport const getLogs = (userConfig: UserConfig | undefined): Config['logs'] => {\n  let logs: Config['logs'] = {\n    file: true,\n    level: 'info',\n    path: process.cwd(),\n  };\n  if (typeof userConfig?.logs === 'string') {\n    logs.path = userConfig.logs;\n  } else {\n    logs = {\n      ...logs,\n      ...userConfig?.logs,\n    };\n  }\n  return logs;\n};\n","export const clientDefaultConfig = {\n  _dependencies: ['@hey-api/typescript'],\n  _tags: ['client'],\n  baseUrl: true,\n  bundle: false,\n  exportFromIndex: false,\n  output: 'client',\n} as const;\n","import type { Config } from '../../../types/config';\nimport type { PluginClientNames } from '../../types';\n\nexport const clientId = 'client';\n\ntype Plugins = Required<Config>['plugins'];\n\nexport const getClientBaseUrlKey = (config: Config) => {\n  const client = getClientPlugin(config);\n  if (\n    client.name === '@hey-api/client-axios' ||\n    client.name === '@hey-api/client-nuxt'\n  ) {\n    return 'baseURL';\n  }\n  return 'baseUrl';\n};\n\nexport const getClientPlugin = (\n  config: Config,\n): Required<Plugins>[PluginClientNames] => {\n  for (const name of config.pluginOrder) {\n    const plugin = config.plugins[name];\n    if (plugin?._tags?.includes('client')) {\n      return plugin as Required<Plugins>[PluginClientNames];\n    }\n  }\n\n  return {\n    // @ts-expect-error\n    name: '',\n  };\n};\n","import ts from 'typescript';\n\nimport { createCallExpression } from './module';\nimport {\n  type AccessLevel,\n  createBlock,\n  createTypeNode,\n  type FunctionParameter,\n  type FunctionTypeParameter,\n  toExpression,\n  toParameterDeclarations,\n  toTypeParameters,\n} from './types';\nimport type { Comments } from './utils';\nimport {\n  addLeadingComments,\n  createIdentifier,\n  createModifier,\n  isType,\n} from './utils';\n\n/**\n * Create a class constructor declaration.\n * @param accessLevel - the access level of the constructor.\n * @param comment - comment to add to function.\n * @param multiLine - if it should be multi line.\n * @param parameters - parameters for the constructor.\n * @param statements - statements to put in the constructor body.\n * @returns ts.ConstructorDeclaration\n */\nexport const createConstructorDeclaration = ({\n  accessLevel,\n  comment,\n  multiLine = true,\n  parameters = [],\n  statements = [],\n}: {\n  accessLevel?: AccessLevel;\n  comment?: Comments;\n  multiLine?: boolean;\n  parameters?: FunctionParameter[];\n  statements?: ts.Statement[];\n}) => {\n  const modifiers = accessLevel\n    ? [createModifier({ keyword: accessLevel })]\n    : undefined;\n  const node = ts.factory.createConstructorDeclaration(\n    modifiers,\n    toParameterDeclarations(parameters),\n    createBlock({ multiLine, statements }),\n  );\n\n  addLeadingComments({\n    comments: comment,\n    node,\n  });\n\n  return node;\n};\n\n/**\n * Create a class method declaration.\n * @param accessLevel - the access level of the method.\n * @param comment - comment to add to function.\n * @param isStatic - if the function is static.\n * @param multiLine - if it should be multi line.\n * @param name - name of the method.\n * @param parameters - parameters for the method.\n * @param returnType - the return type of the method.\n * @param statements - statements to put in the constructor body.\n * @returns ts.MethodDeclaration\n */\nexport const createMethodDeclaration = ({\n  accessLevel,\n  comment,\n  isStatic = false,\n  multiLine = true,\n  name,\n  parameters = [],\n  returnType,\n  statements = [],\n  types = [],\n}: {\n  accessLevel?: AccessLevel;\n  comment?: Comments;\n  isStatic?: boolean;\n  multiLine?: boolean;\n  name: string;\n  parameters?: ReadonlyArray<FunctionParameter>;\n  returnType?: string | ts.TypeNode;\n  statements?: ts.Statement[];\n  types?: FunctionTypeParameter[];\n}) => {\n  const modifiers = accessLevel\n    ? [createModifier({ keyword: accessLevel })]\n    : [];\n\n  if (isStatic) {\n    modifiers.push(createModifier({ keyword: 'static' }));\n  }\n\n  const node = ts.factory.createMethodDeclaration(\n    modifiers,\n    undefined,\n    createIdentifier({ text: name }),\n    undefined,\n    types ? toTypeParameters(types) : undefined,\n    toParameterDeclarations(parameters),\n    returnType ? createTypeNode(returnType) : undefined,\n    createBlock({ multiLine, statements }),\n  );\n\n  addLeadingComments({\n    comments: comment,\n    node,\n  });\n\n  return node;\n};\n\ntype ClassDecorator = {\n  args: any[];\n  name: string;\n};\n\n/**\n * Create a class declaration.\n */\nexport const createClassDeclaration = ({\n  decorator,\n  exportClass,\n  extendedClasses,\n  name,\n  nodes,\n}: {\n  /**\n   * Class decorator.\n   */\n  decorator?: ClassDecorator;\n  /**\n   * @default false\n   */\n  exportClass?: boolean;\n  /**\n   * List of extended classes.\n   */\n  extendedClasses?: ReadonlyArray<string>;\n  /**\n   * Class name.\n   */\n  name: string;\n  /**\n   * Class elements.\n   */\n  nodes: ReadonlyArray<ts.ClassElement>;\n}): ts.ClassDeclaration => {\n  const modifiers: Array<ts.ModifierLike> = [];\n\n  if (exportClass) {\n    modifiers.push(createModifier({ keyword: 'export' }));\n  }\n\n  if (decorator) {\n    modifiers.unshift(\n      ts.factory.createDecorator(\n        createCallExpression({\n          functionName: decorator.name,\n          parameters: decorator.args\n            .map((arg) => toExpression({ value: arg }))\n            .filter(isType<ts.Expression>),\n        }),\n      ),\n    );\n  }\n\n  const heritageClauses: Array<ts.HeritageClause> = [];\n\n  if (extendedClasses) {\n    for (const extendedClass of extendedClasses) {\n      heritageClauses.push(\n        ts.factory.createHeritageClause(ts.SyntaxKind.ExtendsKeyword, [\n          ts.factory.createExpressionWithTypeArguments(\n            createIdentifier({ text: extendedClass }),\n            undefined,\n          ),\n        ]),\n      );\n    }\n  }\n\n  return ts.factory.createClassDeclaration(\n    modifiers,\n    createIdentifier({ text: name }),\n    undefined,\n    heritageClauses,\n    nodes,\n  );\n};\n","/**\n * Matches characters from the start as long as they're not allowed.\n */\nexport const illegalStartCharactersRegExp = /^[^$_\\p{ID_Start}]+/u;\n\n/**\n * Matches string if it contains only digits and optionally decimal point or\n * leading minus sign.\n */\nexport const numberRegExp = /^-?\\d+(\\.\\d+)?$/;\n\nexport const reservedBrowserGlobalsRegExp =\n  /^(document|history|location|navigator|window)$/g;\n\nexport const reservedJavaScriptGlobalsRegExp =\n  /^(console|Array|Date|Error|Function|JSON|Map|Math|Object|Promise|RegExp|Set|WeakMap|WeakSet)$/g;\n\nexport const reservedJavaScriptKeywordsRegExp =\n  /^(arguments|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|eval|export|extends|false|finally|for|from|function|if|implements|import|in|instanceof|interface|let|new|null|package|private|protected|public|return|static|super|switch|this|throw|true|try|typeof|var|void|while|with|yield)$/g;\n\nexport const reservedNodeGlobalsRegExp = /^(global|process|Buffer)$/g;\n\nexport const reservedTypeScriptKeywordsRegExp =\n  /^(any|as|bigint|boolean|namespace|never|null|number|string|symbol|type|undefined|unknown|void)$/g;\n\n/**\n * Javascript identifier regexp pattern retrieved from\n * {@link} https://developer.mozilla.org/docs/Web/JavaScript/Reference/Lexical_grammar#identifiers\n */\nexport const validTypescriptIdentifierRegExp =\n  /^[$_\\p{ID_Start}][$\\u200c\\u200d\\p{ID_Continue}]*$/u;\n","import { EOL } from 'os';\n\nimport { validTypescriptIdentifierRegExp } from './regexp';\n\nexport const escapeName = (value: string): string => {\n  if (value || value === '') {\n    validTypescriptIdentifierRegExp.lastIndex = 0;\n    const validName = validTypescriptIdentifierRegExp.test(value);\n    if (!validName) {\n      return `'${value}'`;\n    }\n  }\n  return value;\n};\n\nexport const unescapeName = (value: string): string => {\n  if (value && value.startsWith(\"'\") && value.endsWith(\"'\")) {\n    return value.slice(1, value.length - 1);\n  }\n  return value;\n};\n\nexport const escapeComment = (value: string) =>\n  value\n    .replace(/\\*\\//g, '*')\n    .replace(/\\/\\*/g, '*')\n    .replace(/\\r?\\n(.*)/g, (_l, w) => EOL + w.trim());\n","import { getClientPlugin } from '../plugins/@hey-api/client-core/utils';\nimport type { Config } from '../types/config';\n\nlet _config: Config;\n\nexport const getConfig = () => {\n  const config = _config;\n  const plugin = getClientPlugin(config);\n  // patch legacy config to avoid breaking handlebars\n  // @ts-expect-error\n  config.client = plugin;\n  return config;\n};\n\nexport const setConfig = (config: Config) => {\n  _config = config;\n  return getConfig();\n};\n\nexport const isLegacyClient = (config: Config) => {\n  const plugin = getClientPlugin(config);\n  return plugin.name.startsWith('legacy/');\n};\n\n/**\n * Wrap legacy `name` option so we don't use it when not using legacy clients.\n */\nexport const legacyNameFromConfig = (config: Config) => {\n  if (!isLegacyClient(config)) {\n    return;\n  }\n\n  return config.name;\n};\n","import ts from 'typescript';\n\nimport { getConfig } from '../utils/config';\nimport { unescapeName } from '../utils/escape';\nimport type { AccessLevel } from './types';\nimport { createStringLiteral, syntaxKindKeyword } from './types';\n\nexport interface ImportExportItemObject {\n  alias?: string;\n  asType?: boolean;\n  name: string;\n}\n\nconst printer = ts.createPrinter({\n  newLine: ts.NewLineKind.LineFeed,\n  removeComments: false,\n});\n\nexport const createSourceFile = (sourceText: string) =>\n  ts.createSourceFile(\n    '',\n    sourceText,\n    ts.ScriptTarget.ESNext,\n    false,\n    ts.ScriptKind.TS,\n  );\n\nconst blankSourceFile = createSourceFile('');\n\nconst unescapeUnicode = (value: string) =>\n  value.replace(/\\\\u([0-9a-fA-F]{4})/g, (_, hex: string) =>\n    String.fromCharCode(Number.parseInt(hex, 16)),\n  );\n\n/**\n * Print a TypeScript node to a string.\n * @param node the node to print\n * @returns string\n */\nexport function tsNodeToString({\n  node,\n  unescape = false,\n}: {\n  node: ts.Node;\n  unescape?: boolean;\n}): string {\n  const result = printer.printNode(\n    ts.EmitHint.Unspecified,\n    node,\n    blankSourceFile,\n  );\n\n  if (!unescape) {\n    return result;\n  }\n\n  try {\n    /**\n     * TypeScript Compiler API escapes unicode characters by default and there\n     * is no way to disable this behavior\n     * {@link https://github.com/microsoft/TypeScript/issues/36174}\n     */\n    return unescapeUnicode(result);\n  } catch {\n    if (getConfig().logs.level === 'debug') {\n      console.warn('Could not decode value:', result);\n    }\n    return result;\n  }\n}\n\n/**\n * Convert a string to a TypeScript Node\n * @param value the string to convert.\n * @returns ts.Node\n */\nexport function stringToTsNodes(value: string): ts.Node {\n  const file = createSourceFile(value);\n  return file.statements[0]!;\n}\n\nexport const createIdentifier = ({ text }: { text: string }) => {\n  const identifier = ts.factory.createIdentifier(text);\n  return identifier;\n};\n\nexport const createThis = () => ts.factory.createThis();\n\ntype Modifier = AccessLevel | 'async' | 'export' | 'readonly' | 'static';\n\nexport const createModifier = ({ keyword }: { keyword: Modifier }) => {\n  const kind = syntaxKindKeyword({ keyword });\n  return ts.factory.createModifier(kind);\n};\n\nexport const createPropertyDeclaration = ({\n  initializer,\n  modifier,\n  name,\n  type,\n}: {\n  initializer?: ts.Expression;\n  modifier?: Modifier;\n  name: string | ts.PropertyName;\n  type?: ts.TypeNode;\n}) => {\n  const node = ts.factory.createPropertyDeclaration(\n    modifier ? [createModifier({ keyword: modifier })] : undefined,\n    name,\n    undefined,\n    type,\n    initializer,\n  );\n  return node;\n};\n\n/**\n * ots for @hey-api/openapi-ts are helpers to reduce repetition of basic TypeScript\n * factory functions.\n */\nexport const ots = {\n  /**\n   * Create a boolean expression based on value.\n   */\n  boolean: (value: boolean) =>\n    value ? ts.factory.createTrue() : ts.factory.createFalse(),\n  export: ({ alias, asType = false, name }: ImportExportItemObject) => {\n    const nameNode = createIdentifier({ text: name });\n    if (alias) {\n      const aliasNode = createIdentifier({ text: alias });\n      return ts.factory.createExportSpecifier(asType, nameNode, aliasNode);\n    }\n    return ts.factory.createExportSpecifier(asType, undefined, nameNode);\n  },\n  import: ({ alias, asType = false, name }: ImportExportItemObject) => {\n    const nameNode = createIdentifier({ text: name });\n    if (alias) {\n      const aliasNode = createIdentifier({ text: alias });\n      return ts.factory.createImportSpecifier(asType, nameNode, aliasNode);\n    }\n    return ts.factory.createImportSpecifier(asType, undefined, nameNode);\n  },\n  /**\n   * Create a numeric expression, handling negative numbers.\n   */\n  number: (value: number) => {\n    if (value < 0) {\n      return ts.factory.createPrefixUnaryExpression(\n        ts.SyntaxKind.MinusToken,\n        ts.factory.createNumericLiteral(Math.abs(value)),\n      );\n    }\n    return ts.factory.createNumericLiteral(value);\n  },\n  /**\n   * Create a string literal. This handles strings that start with '`' or \"'\".\n   */\n  string: (value: string, unescape = false) => {\n    let text = value;\n    if (unescape) {\n      text = unescapeName(text);\n    }\n    const hasBothQuotes = text.includes(\"'\") && text.includes('\"');\n    const hasNewlines = text.includes('\\n');\n    const hasUnescapedBackticks = text.startsWith('`');\n    const isBacktickEscaped = text.startsWith('\\\\`') && text.endsWith('\\\\`');\n    if (\n      (hasNewlines || hasBothQuotes || hasUnescapedBackticks) &&\n      !isBacktickEscaped\n    ) {\n      text = `\\`${text.replace(/(?<!\\\\)`/g, '\\\\`').replace(/\\${/g, '\\\\${')}\\``;\n    }\n    if (text.startsWith('`')) {\n      return createIdentifier({ text });\n    }\n    return createStringLiteral({ text });\n  },\n};\n\nexport const isTsNode = (node: any): node is ts.Expression =>\n  node !== null &&\n  typeof node === 'object' &&\n  typeof node.kind === 'number' &&\n  typeof node.flags === 'number' &&\n  typeof node.pos === 'number' &&\n  typeof node.end === 'number';\n\nexport const isType = <T>(value: T | undefined): value is T =>\n  value !== undefined;\n\ntype CommentLines = Array<string | null | false | undefined>;\ntype CommentObject = {\n  jsdoc?: boolean;\n  lines: CommentLines;\n};\nexport type Comments = CommentLines | Array<CommentObject>;\n\nconst processCommentObject = ({\n  commentObject,\n  node,\n}: {\n  commentObject: CommentObject;\n  node: ts.Node;\n}) => {\n  const lines = commentObject.lines.filter(\n    (line) => Boolean(line) || line === '',\n  ) as string[];\n  if (!lines.length) {\n    return;\n  }\n\n  if (!commentObject.jsdoc) {\n    for (const line of lines) {\n      ts.addSyntheticLeadingComment(\n        node,\n        ts.SyntaxKind.SingleLineCommentTrivia,\n        ` ${line}`,\n        true,\n      );\n    }\n    return;\n  }\n\n  const jsdocTexts = lines.map((line, index) => {\n    let text = line;\n    if (index !== lines.length) {\n      text = `${text}\\n`;\n    }\n    const jsdocText = ts.factory.createJSDocText(text);\n    return jsdocText;\n  });\n\n  const jsdoc = ts.factory.createJSDocComment(\n    ts.factory.createNodeArray(jsdocTexts),\n    undefined,\n  );\n\n  const cleanedJsdoc = tsNodeToString({ node: jsdoc, unescape: true })\n    .replace('/*', '')\n    .replace('*  */', '');\n\n  ts.addSyntheticLeadingComment(\n    node,\n    ts.SyntaxKind.MultiLineCommentTrivia,\n    cleanedJsdoc,\n    true,\n  );\n};\n\nexport const addLeadingComments = ({\n  comments = [],\n  node,\n}: {\n  comments?: Comments;\n  node: ts.Node;\n}) => {\n  const isObjectStyle = Boolean(\n    comments.find((comment) => typeof comment === 'object' && comment),\n  );\n\n  let commentObjects = comments as Array<CommentObject>;\n  if (!isObjectStyle) {\n    commentObjects = [\n      {\n        jsdoc: true,\n        lines: comments as CommentLines,\n      },\n    ];\n  }\n\n  for (const commentObject of commentObjects) {\n    processCommentObject({\n      commentObject,\n      node,\n    });\n  }\n};\n","import ts from 'typescript';\n\nimport { escapeName } from '../utils/escape';\nimport { validTypescriptIdentifierRegExp } from '../utils/regexp';\nimport {\n  addLeadingComments,\n  type Comments,\n  createIdentifier,\n  createModifier,\n  isTsNode,\n  isType,\n  ots,\n} from './utils';\n\nexport type AccessLevel = 'private' | 'protected' | 'public';\n\nexport type FunctionParameter =\n  | {\n      accessLevel?: AccessLevel;\n      default?: any;\n      isReadOnly?: boolean;\n      isRequired?: boolean;\n      name: string;\n      type?: any | ts.TypeNode;\n    }\n  | {\n      destructure: ReadonlyArray<FunctionParameter>;\n      type?: any | ts.TypeNode;\n    };\n\nexport interface FunctionTypeParameter {\n  default?: any;\n  extends?: string | ts.TypeNode;\n  name: string | ts.Identifier;\n}\n\nexport const createTypeNode = (\n  base: any | ts.TypeNode,\n  args?: (any | ts.TypeNode)[],\n): ts.TypeNode => {\n  if (ts.isTypeNode(base)) {\n    return base;\n  }\n\n  if (typeof base === 'number') {\n    return ts.factory.createLiteralTypeNode(ots.number(base));\n  }\n\n  return createTypeReferenceNode({\n    typeArguments: args?.map((arg) => createTypeNode(arg)),\n    typeName: base,\n  });\n};\n\nexport const createPropertyAccessChain = ({\n  expression,\n  name,\n}: {\n  expression: ts.Expression;\n  name: string | ts.MemberName;\n}) => {\n  const node = ts.factory.createPropertyAccessChain(\n    expression,\n    ts.factory.createToken(ts.SyntaxKind.QuestionDotToken),\n    name,\n  );\n  return node;\n};\n\nexport const createPropertyAccessExpression = ({\n  expression,\n  isOptional,\n  name,\n}: {\n  expression: string | ts.Expression;\n  isOptional?: boolean;\n  name: string | number | ts.MemberName;\n}):\n  | ts.PropertyAccessChain\n  | ts.PropertyAccessExpression\n  | ts.ElementAccessExpression => {\n  const nodeExpression =\n    typeof expression === 'string'\n      ? createIdentifier({ text: expression })\n      : expression;\n\n  if (isOptional && typeof name !== 'number') {\n    return createPropertyAccessChain({\n      expression: nodeExpression,\n      name,\n    });\n  }\n\n  if (typeof name === 'string') {\n    validTypescriptIdentifierRegExp.lastIndex = 0;\n    if (!validTypescriptIdentifierRegExp.test(name)) {\n      // TODO: parser - this should escape name only for new parser\n      if (!name.startsWith(\"'\") && !name.endsWith(\"'\")) {\n        // eslint-disable-next-line no-useless-escape\n        name = `\\'${name}\\'`;\n      }\n      const nodeName = createIdentifier({ text: name });\n      return ts.factory.createElementAccessExpression(nodeExpression, nodeName);\n    }\n\n    const nodeName = createIdentifier({ text: name });\n    return ts.factory.createPropertyAccessExpression(nodeExpression, nodeName);\n  }\n\n  if (typeof name === 'number') {\n    const nodeName = ts.factory.createNumericLiteral(name);\n    return ts.factory.createElementAccessExpression(nodeExpression, nodeName);\n  }\n\n  return ts.factory.createPropertyAccessExpression(nodeExpression, name);\n};\n\nexport const createNull = (): ts.NullLiteral => ts.factory.createNull();\n\n/**\n * Convert an unknown value to an expression.\n * @param identifiers - list of keys that are treated as identifiers.\n * @param shorthand - if shorthand syntax is allowed.\n * @param unescape - if string should be unescaped.\n * @param value - the unknown value.\n * @returns ts.Expression\n */\nexport const toExpression = <T = unknown>({\n  identifiers = [],\n  isValueAccess,\n  shorthand,\n  unescape,\n  value,\n}: {\n  identifiers?: string[];\n  isValueAccess?: boolean;\n  shorthand?: boolean;\n  unescape?: boolean;\n  value: T;\n}): ts.Expression | undefined => {\n  if (value === null) {\n    return createNull();\n  }\n\n  if (Array.isArray(value)) {\n    return createArrayLiteralExpression({ elements: value });\n  }\n\n  if (typeof value === 'object') {\n    return createObjectType({\n      identifiers,\n      obj: value,\n      shorthand,\n    });\n  }\n\n  if (typeof value === 'number') {\n    return ots.number(value);\n  }\n\n  if (typeof value === 'boolean') {\n    return ots.boolean(value);\n  }\n\n  if (typeof value === 'string') {\n    if (isValueAccess) {\n      // TODO; handle more than single nested level, i.e. foo.bar.baz\n      const parts = value.split('.');\n      return createPropertyAccessExpression({\n        expression: parts[0]!,\n        name: parts[1]!,\n      });\n    }\n    return ots.string(value, unescape);\n  }\n};\n\n/**\n * Convert parameters to the declaration array expected by compiler API.\n * @param parameters - the parameters to convert to declarations\n * @returns ts.ParameterDeclaration[]\n */\nexport const toParameterDeclarations = (\n  parameters: ReadonlyArray<FunctionParameter>,\n) =>\n  parameters.map((parameter) => {\n    if ('destructure' in parameter) {\n      return createParameterDeclaration({\n        name: ts.factory.createObjectBindingPattern(\n          parameter.destructure\n            .map((param) => {\n              // TODO: add support for nested destructuring, not needed at the moment\n              if ('destructure' in param) {\n                return;\n              }\n\n              const result = ts.factory.createBindingElement(\n                undefined,\n                undefined,\n                createIdentifier({ text: param.name }),\n                undefined,\n              );\n              return result;\n            })\n            .filter(Boolean) as ts.BindingElement[],\n        ),\n        type:\n          parameter.type !== undefined\n            ? createTypeNode(parameter.type)\n            : undefined,\n      });\n    }\n\n    const modifiers = parameter.accessLevel\n      ? [createModifier({ keyword: parameter.accessLevel })]\n      : [];\n\n    if (parameter.isReadOnly) {\n      modifiers.push(createModifier({ keyword: 'readonly' }));\n    }\n\n    return createParameterDeclaration({\n      initializer:\n        parameter.default !== undefined\n          ? toExpression({ value: parameter.default })\n          : undefined,\n      modifiers,\n      name: createIdentifier({ text: parameter.name }),\n      required: parameter.isRequired !== false,\n      type:\n        parameter.type !== undefined\n          ? createTypeNode(parameter.type)\n          : undefined,\n    });\n  });\n\nexport type SyntaxKindKeyword =\n  | 'any'\n  | 'async'\n  | 'boolean'\n  | 'export'\n  | 'never'\n  | 'number'\n  | 'private'\n  | 'protected'\n  | 'public'\n  | 'readonly'\n  | 'static'\n  | 'string'\n  | 'undefined'\n  | 'unknown'\n  | 'void';\n\nexport const syntaxKindKeyword = <T extends SyntaxKindKeyword>({\n  keyword,\n}: {\n  keyword: T;\n}): T extends 'protected'\n  ? ts.SyntaxKind.ProtectedKeyword\n  : T extends 'public'\n    ? ts.SyntaxKind.PublicKeyword\n    : T extends 'private'\n      ? ts.SyntaxKind.PrivateKeyword\n      : T extends 'export'\n        ? ts.SyntaxKind.ExportKeyword\n        : T extends 'async'\n          ? ts.SyntaxKind.ExportKeyword\n          : T extends 'readonly'\n            ? ts.SyntaxKind.ExportKeyword\n            : T extends 'static'\n              ? ts.SyntaxKind.ExportKeyword\n              :\n                  | ts.SyntaxKind.AnyKeyword\n                  | ts.SyntaxKind.BooleanKeyword\n                  | ts.SyntaxKind.NeverKeyword\n                  | ts.SyntaxKind.NumberKeyword\n                  | ts.SyntaxKind.StringKeyword\n                  | ts.SyntaxKind.UndefinedKeyword\n                  | ts.SyntaxKind.UnknownKeyword\n                  | ts.SyntaxKind.VoidKeyword => {\n  switch (keyword) {\n    case 'any':\n      return ts.SyntaxKind.AnyKeyword as any;\n    case 'async':\n      return ts.SyntaxKind.AsyncKeyword as any;\n    case 'boolean':\n      return ts.SyntaxKind.BooleanKeyword as any;\n    case 'export':\n      return ts.SyntaxKind.ExportKeyword as any;\n    case 'never':\n      return ts.SyntaxKind.NeverKeyword as any;\n    case 'number':\n      return ts.SyntaxKind.NumberKeyword as any;\n    case 'private':\n      return ts.SyntaxKind.PrivateKeyword as any;\n    case 'protected':\n      return ts.SyntaxKind.ProtectedKeyword as any;\n    case 'public':\n      return ts.SyntaxKind.PublicKeyword as any;\n    case 'readonly':\n      return ts.SyntaxKind.ReadonlyKeyword as any;\n    case 'static':\n      return ts.SyntaxKind.StaticKeyword as any;\n    case 'string':\n      return ts.SyntaxKind.StringKeyword as any;\n    case 'undefined':\n      return ts.SyntaxKind.UndefinedKeyword as any;\n    case 'unknown':\n      return ts.SyntaxKind.UnknownKeyword as any;\n    case 'void':\n      return ts.SyntaxKind.VoidKeyword as any;\n    default:\n      throw new Error(`unsupported syntax kind keyword \"${keyword}\"`);\n  }\n};\n\nexport const createKeywordTypeNode = ({\n  keyword,\n}: {\n  keyword: Extract<\n    SyntaxKindKeyword,\n    | 'any'\n    | 'boolean'\n    | 'never'\n    | 'number'\n    | 'string'\n    | 'undefined'\n    | 'unknown'\n    | 'void'\n  >;\n}) => {\n  const kind = syntaxKindKeyword({ keyword });\n  return ts.factory.createKeywordTypeNode(kind);\n};\n\nexport const toTypeParameters = (\n  types: (FunctionTypeParameter | ts.TypeParameterDeclaration)[],\n) =>\n  types.map((node) => {\n    // @ts-expect-error\n    if (ts.isTypeParameterDeclaration(node)) {\n      return node;\n    }\n\n    return createTypeParameterDeclaration({\n      // TODO: support other extends values\n      constraint: node.extends\n        ? typeof node.extends === 'string'\n          ? createKeywordTypeNode({ keyword: 'boolean' })\n          : node.extends\n        : undefined,\n      // TODO: support other default types\n      defaultType:\n        node.default !== undefined\n          ? isTsNode(node.default)\n            ? (node.default as unknown as ts.TypeNode)\n            : ts.factory.createLiteralTypeNode(\n                node.default\n                  ? ts.factory.createTrue()\n                  : ts.factory.createFalse(),\n              )\n          : undefined,\n      name: node.name,\n    });\n  });\n\nexport const createTypeOperatorNode = ({\n  operator,\n  type,\n}: {\n  operator: 'keyof' | 'readonly' | 'unique';\n  type: ts.TypeNode;\n}) => {\n  const operatorKeyword =\n    operator === 'keyof'\n      ? ts.SyntaxKind.KeyOfKeyword\n      : operator === 'readonly'\n        ? ts.SyntaxKind.ReadonlyKeyword\n        : ts.SyntaxKind.UniqueKeyword;\n  return ts.factory.createTypeOperatorNode(operatorKeyword, type);\n};\n\nexport const createTypeParameterDeclaration = ({\n  constraint,\n  defaultType,\n  modifiers,\n  name,\n}: {\n  constraint?: ts.TypeNode;\n  defaultType?: ts.TypeNode;\n  modifiers?: Array<ts.Modifier>;\n  name: string | ts.Identifier;\n}) =>\n  ts.factory.createTypeParameterDeclaration(\n    modifiers,\n    name,\n    constraint,\n    defaultType,\n  );\n\nexport const createMappedTypeNode = ({\n  members,\n  nameType,\n  questionToken,\n  readonlyToken,\n  type,\n  typeParameter,\n}: {\n  members?: ts.NodeArray<ts.TypeElement>;\n  nameType?: ts.TypeNode;\n  questionToken?: ts.QuestionToken | ts.PlusToken | ts.MinusToken;\n  readonlyToken?: ts.ReadonlyKeyword | ts.PlusToken | ts.MinusToken;\n  type?: ts.TypeNode;\n  typeParameter: ts.TypeParameterDeclaration;\n}) =>\n  ts.factory.createMappedTypeNode(\n    readonlyToken,\n    typeParameter,\n    nameType,\n    questionToken,\n    type,\n    members,\n  );\n\nexport const createLiteralTypeNode = ({\n  literal,\n}: {\n  literal: ts.LiteralTypeNode['literal'];\n}) => {\n  const node = ts.factory.createLiteralTypeNode(literal);\n  return node;\n};\n\n/**\n * Create arrow function type expression.\n */\nexport const createArrowFunction = ({\n  async,\n  comment,\n  multiLine,\n  parameters = [],\n  returnType,\n  statements = [],\n  types = [],\n}: {\n  async?: boolean;\n  comment?: Comments;\n  multiLine?: boolean;\n  parameters?: ReadonlyArray<FunctionParameter>;\n  returnType?: string | ts.TypeNode;\n  statements?: ts.Statement[] | ts.Expression;\n  types?: FunctionTypeParameter[];\n}) => {\n  const expression = ts.factory.createArrowFunction(\n    async ? [createModifier({ keyword: 'async' })] : undefined,\n    types ? toTypeParameters(types) : undefined,\n    toParameterDeclarations(parameters),\n    returnType ? createTypeNode(returnType) : undefined,\n    undefined,\n    Array.isArray(statements)\n      ? createBlock({ multiLine, statements })\n      : statements,\n  );\n\n  addLeadingComments({\n    comments: comment,\n    node: expression,\n  });\n\n  return expression;\n};\n\n/**\n * Create anonymous function type expression.\n */\nexport const createAnonymousFunction = ({\n  async,\n  comment,\n  multiLine,\n  parameters = [],\n  returnType,\n  statements = [],\n  types = [],\n}: {\n  async?: boolean;\n  comment?: Comments;\n  multiLine?: boolean;\n  parameters?: FunctionParameter[];\n  returnType?: string | ts.TypeNode;\n  statements?: ts.Statement[];\n  types?: FunctionTypeParameter[];\n}) => {\n  const expression = ts.factory.createFunctionExpression(\n    async ? [createModifier({ keyword: 'async' })] : undefined,\n    undefined,\n    undefined,\n    types ? toTypeParameters(types) : undefined,\n    toParameterDeclarations(parameters),\n    returnType ? createTypeNode(returnType) : undefined,\n    createBlock({ multiLine, statements }),\n  );\n\n  addLeadingComments({\n    comments: comment,\n    node: expression,\n  });\n\n  return expression;\n};\n\n/**\n * Create Array type expression.\n */\nexport const createArrayLiteralExpression = <T>({\n  elements,\n  multiLine = false,\n}: {\n  /**\n   * The array to create.\n   */\n  elements: T[];\n  /**\n   * Should the array be multi line?\n   *\n   * @default false\n   */\n  multiLine?: boolean;\n}): ts.ArrayLiteralExpression => {\n  const expression = ts.factory.createArrayLiteralExpression(\n    elements\n      .map((value) => (isTsNode(value) ? value : toExpression({ value })))\n      .filter(isType<ts.Expression>),\n    // multiline if array contains objects\n    multiLine ||\n      (!Array.isArray(elements[0]) && typeof elements[0] === 'object'),\n  );\n  return expression;\n};\n\nexport const createAwaitExpression = ({\n  expression,\n}: {\n  expression: ts.Expression;\n}) => ts.factory.createAwaitExpression(expression);\n\nexport const createFunctionTypeNode = ({\n  parameters = [],\n  returnType,\n  typeParameters,\n}: {\n  parameters?: ts.ParameterDeclaration[];\n  returnType: ts.TypeNode;\n  typeParameters?: ts.TypeParameterDeclaration[];\n}) => {\n  const node = ts.factory.createFunctionTypeNode(\n    typeParameters,\n    parameters,\n    returnType,\n  );\n  return node;\n};\n\nexport type ObjectValue =\n  | {\n      assertion?: 'any' | ts.TypeNode;\n      comments?: Comments;\n      spread: string;\n    }\n  | {\n      comments?: Comments;\n      isValueAccess?: boolean;\n      key: string;\n      shorthand?: boolean;\n      value: any;\n    };\n\ntype ObjectAssignment =\n  | ts.PropertyAssignment\n  | ts.ShorthandPropertyAssignment\n  | ts.SpreadAssignment;\n\n/**\n * Create Object type expression.\n * @param comments - comments to add to each property.\n * @param identifier - keys that should be treated as identifiers.\n * @param multiLine - if the object should be multiline.\n * @param obj - the object to create expression with.\n * @param shorthand - if shorthand syntax should be used.\n * @param unescape - if properties strings should be unescaped.\n * @returns ts.ObjectLiteralExpression\n */\nexport const createObjectType = <\n  T extends Record<string, any> | Array<ObjectValue>,\n>({\n  comments,\n  identifiers = [],\n  multiLine = true,\n  obj,\n  shorthand,\n  unescape = false,\n}: {\n  comments?: Comments;\n  identifiers?: string[];\n  multiLine?: boolean;\n  obj: T;\n  shorthand?: boolean;\n  unescape?: boolean;\n}): ts.ObjectLiteralExpression => {\n  const properties = Array.isArray(obj)\n    ? obj\n        .map((value: ObjectValue) => {\n          // Check key value equality before possibly modifying it\n          let canShorthand = false;\n          if ('key' in value) {\n            const { key } = value;\n            canShorthand = key === value.value;\n            const firstDigitAndNonDigits =\n              key.match(/^[0-9]/) && key.match(/\\D+/g);\n            if (\n              (firstDigitAndNonDigits || key.match(/\\W/g) || key === '') &&\n              !key.startsWith(\"'\") &&\n              !key.endsWith(\"'\")\n            ) {\n              value.key = `'${key}'`;\n            }\n          }\n          let assignment: ObjectAssignment;\n          if ('spread' in value) {\n            const nameIdentifier = isTsNode(value.spread)\n              ? value.spread\n              : createIdentifier({ text: value.spread });\n            assignment = ts.factory.createSpreadAssignment(\n              value.assertion\n                ? createAsExpression({\n                    expression: nameIdentifier,\n                    type:\n                      typeof value.assertion === 'string'\n                        ? createKeywordTypeNode({ keyword: value.assertion })\n                        : value.assertion,\n                  })\n                : nameIdentifier,\n            );\n          } else if (value.shorthand || (shorthand && canShorthand)) {\n            assignment = ts.factory.createShorthandPropertyAssignment(\n              value.value,\n            );\n          } else {\n            let initializer: ts.Expression | undefined = isTsNode(value.value)\n              ? value.value\n              : Array.isArray(value.value) &&\n                  (!value.value.length || typeof value.value[0] === 'object')\n                ? createObjectType({\n                    multiLine,\n                    obj: value.value,\n                    shorthand,\n                    unescape,\n                  })\n                : toExpression({\n                    identifiers: identifiers.includes(value.key)\n                      ? Object.keys(value.value)\n                      : [],\n                    isValueAccess: value.isValueAccess,\n                    shorthand,\n                    unescape,\n                    value: value.value,\n                  });\n            if (!initializer) {\n              return undefined;\n            }\n            // Create a identifier if the current key is one and it is not an object\n            if (\n              identifiers.includes(value.key) &&\n              !ts.isObjectLiteralExpression(initializer)\n            ) {\n              initializer = createIdentifier({ text: value.value as string });\n            }\n            assignment = createPropertyAssignment({\n              initializer,\n              name: value.key,\n            });\n          }\n\n          addLeadingComments({\n            comments: value.comments,\n            node: assignment,\n          });\n\n          return assignment;\n        })\n        .filter(isType<ObjectAssignment>)\n    : Object.entries(obj)\n        .map(([key, value]) => {\n          // Pass all object properties as identifiers if the whole object is an identifier\n          let initializer: ts.Expression | undefined = toExpression({\n            identifiers: identifiers.includes(key) ? Object.keys(value) : [],\n            shorthand,\n            unescape,\n            value,\n          });\n          if (!initializer) {\n            return undefined;\n          }\n          // Create a identifier if the current key is one and it is not an object\n          if (\n            identifiers.includes(key) &&\n            !ts.isObjectLiteralExpression(initializer)\n          ) {\n            initializer = createIdentifier({ text: value as string });\n          }\n          // Check key value equality before possibly modifying it\n          const canShorthand = key === value;\n          if (\n            key.match(/^[0-9]/) &&\n            key.match(/\\D+/g) &&\n            !key.startsWith(\"'\") &&\n            !key.endsWith(\"'\")\n          ) {\n            key = `'${key}'`;\n          }\n          if (key.match(/\\W/g) && !key.startsWith(\"'\") && !key.endsWith(\"'\")) {\n            key = `'${key}'`;\n          }\n          const assignment =\n            shorthand && canShorthand\n              ? ts.factory.createShorthandPropertyAssignment(value)\n              : createPropertyAssignment({ initializer, name: key });\n\n          return assignment;\n        })\n        .filter(isType<ObjectAssignment>);\n\n  const node = ts.factory.createObjectLiteralExpression(\n    properties as any[],\n    multiLine,\n  );\n\n  addLeadingComments({\n    comments,\n    node,\n  });\n\n  return node;\n};\n\n/**\n * Create enum declaration. Example `export enum T = { X, Y };`\n * @param comments - comments to add to each property.\n * @param leadingComment - leading comment to add to enum.\n * @param name - the name of the enum.\n * @param obj - the object representing the enum.\n * @returns ts.EnumDeclaration\n */\nexport const createEnumDeclaration = <\n  T extends Record<string, any> | Array<ObjectValue>,\n>({\n  comments: enumMemberComments = {},\n  leadingComment: comments,\n  name,\n  obj,\n}: {\n  comments?: Record<string | number, Comments>;\n  leadingComment?: Comments;\n  name: string;\n  obj: T;\n}): ts.EnumDeclaration => {\n  const members: Array<ts.EnumMember> = Array.isArray(obj)\n    ? obj.map((value) => {\n        const enumMember = createEnumMember({\n          initializer: toExpression({\n            value: value.value,\n          }),\n          name: value.key,\n        });\n\n        addLeadingComments({\n          comments: value.comments,\n          node: enumMember,\n        });\n\n        return enumMember;\n      })\n    : // TODO: parser - deprecate object syntax\n      Object.entries(obj).map(([key, value]) => {\n        const enumMember = ts.factory.createEnumMember(\n          key,\n          toExpression({\n            unescape: true,\n            value,\n          }),\n        );\n\n        addLeadingComments({\n          comments: enumMemberComments[key],\n          node: enumMember,\n        });\n\n        return enumMember;\n      });\n\n  const node = ts.factory.createEnumDeclaration(\n    [createModifier({ keyword: 'export' })],\n    createIdentifier({ text: name }),\n    members,\n  );\n\n  addLeadingComments({\n    comments,\n    node,\n  });\n\n  return node;\n};\n\nconst createEnumMember = ({\n  initializer,\n  name,\n}: {\n  initializer?: ts.Expression;\n  name: string | ts.PropertyName;\n}) => {\n  let key = name;\n  if (typeof key === 'string') {\n    if (key.includes(\"'\")) {\n      key = createStringLiteral({\n        isSingleQuote: false,\n        text: key,\n      });\n    } else {\n      key = escapeName(key);\n    }\n  }\n  return ts.factory.createEnumMember(key, initializer);\n};\n\n/**\n * Create namespace declaration. Example `export namespace MyNamespace { ... }`\n * @param name - the name of the namespace.\n * @param nodes - the nodes in the namespace.\n * @returns\n */\nexport const createNamespaceDeclaration = ({\n  name,\n  statements,\n}: {\n  name: string;\n  statements: Array<ts.Statement>;\n}) =>\n  ts.factory.createModuleDeclaration(\n    [createModifier({ keyword: 'export' })],\n    createIdentifier({ text: name }),\n    ts.factory.createModuleBlock(statements),\n    ts.NodeFlags.Namespace,\n  );\n\nexport const createIndexedAccessTypeNode = ({\n  indexType,\n  objectType,\n}: {\n  indexType: ts.TypeNode;\n  objectType: ts.TypeNode;\n}) => {\n  const node = ts.factory.createIndexedAccessTypeNode(objectType, indexType);\n  return node;\n};\n\nexport const createStringLiteral = ({\n  isSingleQuote,\n  text,\n}: {\n  isSingleQuote?: boolean;\n  text: string;\n}) => {\n  if (isSingleQuote === undefined) {\n    isSingleQuote = !text.includes(\"'\");\n  }\n  const node = ts.factory.createStringLiteral(text, isSingleQuote);\n  return node;\n};\n\nexport const createConditionalExpression = ({\n  condition,\n  whenFalse,\n  whenTrue,\n}: {\n  condition: ts.Expression;\n  whenFalse: ts.Expression;\n  whenTrue: ts.Expression;\n}) => {\n  const expression = ts.factory.createConditionalExpression(\n    condition,\n    ts.factory.createToken(ts.SyntaxKind.QuestionToken),\n    whenTrue,\n    ts.factory.createToken(ts.SyntaxKind.ColonToken),\n    whenFalse,\n  );\n  return expression;\n};\n\nexport const createTypeOfExpression = ({ text }: { text: string }) => {\n  const expression = ts.factory.createTypeOfExpression(\n    createIdentifier({ text }),\n  );\n  return expression;\n};\n\n/**\n * Create a type alias declaration. Example `export type X = Y;`.\n * @param comment (optional) comments to add\n * @param name the name of the type\n * @param type the type\n * @returns ts.TypeAliasDeclaration\n */\nexport const createTypeAliasDeclaration = ({\n  comment,\n  exportType,\n  name,\n  type,\n  typeParameters = [],\n}: {\n  comment?: Comments;\n  exportType?: boolean;\n  name: string;\n  type: string | ts.TypeNode;\n  typeParameters?: FunctionTypeParameter[];\n}): ts.TypeAliasDeclaration => {\n  const node = ts.factory.createTypeAliasDeclaration(\n    exportType ? [createModifier({ keyword: 'export' })] : undefined,\n    createIdentifier({ text: name }),\n    toTypeParameters(typeParameters),\n    createTypeNode(type),\n  );\n\n  addLeadingComments({\n    comments: comment,\n    node,\n  });\n\n  return node;\n};\n\nexport const createTypeReferenceNode = ({\n  typeArguments,\n  typeName,\n}: {\n  typeArguments?: ts.TypeNode[];\n  typeName: string | ts.EntityName;\n}) => {\n  const node = ts.factory.createTypeReferenceNode(typeName, typeArguments);\n  return node;\n};\n\nexport const createTypeParenthesizedNode = ({\n  type,\n}: {\n  type: ts.TypeNode;\n}) => {\n  const node = ts.factory.createParenthesizedType(type);\n  return node;\n};\n\nexport const createParameterDeclaration = ({\n  initializer,\n  modifiers,\n  name,\n  required = true,\n  type,\n}: {\n  initializer?: ts.Expression;\n  modifiers?: ReadonlyArray<ts.ModifierLike>;\n  name: string | ts.BindingName;\n  required?: boolean;\n  type?: ts.TypeNode;\n}) => {\n  const node = ts.factory.createParameterDeclaration(\n    modifiers,\n    undefined,\n    name,\n    required ? undefined : ts.factory.createToken(ts.SyntaxKind.QuestionToken),\n    type,\n    initializer,\n  );\n  return node;\n};\n\nexport const createNewExpression = ({\n  argumentsArray,\n  expression,\n  typeArguments,\n}: {\n  argumentsArray?: Array<ts.Expression>;\n  expression: ts.Expression;\n  typeArguments?: Array<ts.TypeNode>;\n}) => {\n  const node = ts.factory.createNewExpression(\n    expression,\n    typeArguments,\n    argumentsArray,\n  );\n  return node;\n};\n\nexport const createForOfStatement = ({\n  awaitModifier,\n  expression,\n  initializer,\n  statement,\n}: {\n  // TODO: parser - simplify this to be await?: boolean\n  awaitModifier?: ts.AwaitKeyword;\n  expression: ts.Expression;\n  initializer: ts.ForInitializer;\n  statement: ts.Statement;\n}) => {\n  const node = ts.factory.createForOfStatement(\n    awaitModifier,\n    initializer,\n    expression,\n    statement,\n  );\n  return node;\n};\n\nexport const createAssignment = ({\n  left,\n  right,\n}: {\n  left: ts.Expression;\n  right: ts.Expression;\n}) => ts.factory.createAssignment(left, right);\n\nexport const createBlock = ({\n  multiLine = true,\n  statements,\n}: {\n  multiLine?: boolean;\n  statements: Array<ts.Statement>;\n}) => ts.factory.createBlock(statements, multiLine);\n\nexport const createPropertyAssignment = ({\n  initializer,\n  name,\n}: {\n  initializer: ts.Expression;\n  name: string | ts.PropertyName;\n}) => ts.factory.createPropertyAssignment(name, initializer);\n\nexport const createRegularExpressionLiteral = ({\n  flags = [],\n  text,\n}: {\n  flags?: ReadonlyArray<'g' | 'i' | 'm' | 's' | 'u' | 'y'>;\n  text: string;\n}) => {\n  const textWithSlashes =\n    text.startsWith('/') && text.endsWith('/') ? text : `/${text}/`;\n  return ts.factory.createRegularExpressionLiteral(\n    `${textWithSlashes}${flags.join('')}`,\n  );\n};\n\nexport const createAsExpression = ({\n  expression,\n  type,\n}: {\n  expression: ts.Expression;\n  type: ts.TypeNode;\n}) => ts.factory.createAsExpression(expression, type);\n\nexport const createTemplateLiteralType = ({\n  value,\n}: {\n  value: ReadonlyArray<string | ts.TypeNode>;\n}) => {\n  const spans: Array<ts.TemplateLiteralTypeSpan> = [];\n  let spanText = '';\n\n  for (const item of value.slice(0).reverse()) {\n    if (typeof item === 'string') {\n      spanText = `${item}${spanText}`;\n    } else {\n      const literal = spans.length\n        ? ts.factory.createTemplateMiddle(spanText)\n        : ts.factory.createTemplateTail(spanText);\n      const span = ts.factory.createTemplateLiteralTypeSpan(item, literal);\n      spans.push(span);\n      spanText = '';\n    }\n  }\n\n  const templateLiteralType = ts.factory.createTemplateLiteralType(\n    ts.factory.createTemplateHead(spanText),\n    spans.reverse(),\n  );\n  return templateLiteralType;\n};\n","import ts from 'typescript';\n\nimport { createAsExpression, createTypeReferenceNode } from './types';\nimport {\n  addLeadingComments,\n  type Comments,\n  createIdentifier,\n  createModifier,\n  type ImportExportItemObject,\n  ots,\n} from './utils';\n\n/**\n * Create export all declaration. Example: `export * from './y'`.\n * @param module - module containing exports\n * @returns ts.ExportDeclaration\n */\nexport const createExportAllDeclaration = ({\n  module,\n}: {\n  module: string;\n}): ts.ExportDeclaration => {\n  const statement = ts.factory.createExportDeclaration(\n    undefined,\n    false,\n    undefined,\n    ots.string(module),\n  );\n  return statement;\n};\n\nexport type ImportExportItem = ImportExportItemObject | string;\n\nexport const createCallExpression = ({\n  functionName,\n  parameters = [],\n  types,\n}: {\n  functionName:\n    | string\n    | ts.PropertyAccessExpression\n    | ts.PropertyAccessChain\n    | ts.ElementAccessExpression\n    | ts.Expression;\n  parameters?: Array<string | ts.Expression | undefined>;\n  types?: ReadonlyArray<ts.TypeNode>;\n}) => {\n  const expression =\n    typeof functionName === 'string'\n      ? createIdentifier({ text: functionName })\n      : functionName;\n  const argumentsArray = parameters\n    .filter((parameter) => parameter !== undefined)\n    .map((parameter) =>\n      typeof parameter === 'string'\n        ? createIdentifier({ text: parameter })\n        : parameter,\n    );\n  const callExpression = ts.factory.createCallExpression(\n    expression,\n    types,\n    argumentsArray,\n  );\n  return callExpression;\n};\n\n/**\n * Create a named export declaration. Example: `export { X } from './y'`.\n * @param exports - named imports to export\n * @param module - module containing exports\n * @returns ts.ExportDeclaration\n */\nexport const createNamedExportDeclarations = ({\n  exports,\n  module,\n}: {\n  exports: Array<ImportExportItem> | ImportExportItem;\n  module: string;\n}): ts.ExportDeclaration => {\n  const exportedTypes = Array.isArray(exports) ? exports : [exports];\n  const hasNonTypeExport = exportedTypes.some(\n    (item) => typeof item !== 'object' || !item.asType,\n  );\n  const elements = exportedTypes.map((name) => {\n    const item = typeof name === 'string' ? { name } : name;\n    return ots.export({\n      alias: item.alias,\n      asType: hasNonTypeExport && item.asType,\n      name: item.name,\n    });\n  });\n  const exportClause = ts.factory.createNamedExports(elements);\n  const moduleSpecifier = ots.string(module);\n  const statement = ts.factory.createExportDeclaration(\n    undefined,\n    !hasNonTypeExport,\n    exportClause,\n    moduleSpecifier,\n  );\n  return statement;\n};\n\n/**\n * Create a const variable. Optionally, it can use const assertion or export\n * statement. Example: `export x = {} as const`.\n * @param assertion use const assertion?\n * @param exportConst export created variable?\n * @param expression expression for the variable.\n * @param name name of the variable.\n * @returns ts.VariableStatement\n */\nexport const createConstVariable = ({\n  assertion,\n  comment,\n  destructure,\n  exportConst,\n  expression,\n  name,\n  typeName,\n}: {\n  assertion?: 'const' | ts.TypeNode;\n  comment?: Comments;\n  destructure?: boolean;\n  exportConst?: boolean;\n  expression: ts.Expression;\n  name: string;\n  // TODO: support a more intuitive definition of generics for example\n  typeName?: string | ts.IndexedAccessTypeNode | ts.TypeNode;\n}): ts.VariableStatement => {\n  const initializer = assertion\n    ? createAsExpression({\n        expression,\n        type:\n          typeof assertion === 'string'\n            ? createTypeReferenceNode({ typeName: assertion })\n            : assertion,\n      })\n    : expression;\n  const nameIdentifier = createIdentifier({ text: name });\n  const declaration = ts.factory.createVariableDeclaration(\n    destructure\n      ? ts.factory.createObjectBindingPattern([\n          ts.factory.createBindingElement(\n            undefined,\n            undefined,\n            nameIdentifier,\n            undefined,\n          ),\n        ])\n      : nameIdentifier,\n    undefined,\n    typeName\n      ? typeof typeName === 'string'\n        ? createTypeReferenceNode({ typeName })\n        : typeName\n      : undefined,\n    initializer,\n  );\n  const statement = ts.factory.createVariableStatement(\n    exportConst ? [createModifier({ keyword: 'export' })] : undefined,\n    ts.factory.createVariableDeclarationList([declaration], ts.NodeFlags.Const),\n  );\n\n  addLeadingComments({\n    comments: comment,\n    node: statement,\n  });\n\n  return statement;\n};\n\n/**\n * Create a named import declaration. Example: `import { X } from './y'`.\n * @param imports - named exports to import\n * @param module - module containing imports\n * @returns ts.ImportDeclaration\n */\nexport const createNamedImportDeclarations = ({\n  imports,\n  module,\n}: {\n  imports: Array<ImportExportItem> | ImportExportItem;\n  module: string;\n}): ts.ImportDeclaration => {\n  const importedTypes = Array.isArray(imports) ? imports : [imports];\n  const hasNonTypeImport = importedTypes.some(\n    (item) => typeof item !== 'object' || !item.asType,\n  );\n  let namespaceImport: ImportExportItemObject | undefined;\n  const elements: Array<ts.ImportSpecifier> = [];\n  importedTypes.forEach((name) => {\n    const item = typeof name === 'string' ? { name } : name;\n    if (item.name === '*' && item.alias) {\n      namespaceImport = item;\n    } else {\n      elements.push(\n        ots.import({\n          alias: item.alias,\n          asType: hasNonTypeImport && item.asType,\n          name: item.name,\n        }),\n      );\n    }\n  });\n  const namedBindings = namespaceImport\n    ? ts.factory.createNamespaceImport(\n        createIdentifier({ text: namespaceImport.alias! }),\n      )\n    : ts.factory.createNamedImports(elements);\n  const importClause = ts.factory.createImportClause(\n    !hasNonTypeImport,\n    undefined,\n    namedBindings,\n  );\n  const moduleSpecifier = ots.string(module);\n  const statement = ts.factory.createImportDeclaration(\n    undefined,\n    importClause,\n    moduleSpecifier,\n  );\n  return statement;\n};\n","import ts from 'typescript';\n\nexport const expressionToStatement = ({\n  expression,\n}: {\n  expression: ts.Expression;\n}) => {\n  const statement = ts.factory.createExpressionStatement(expression);\n  return statement;\n};\n","import ts from 'typescript';\n\nimport { createCallExpression } from './module';\nimport { createTypeReferenceNode } from './types';\nimport { createIdentifier, isType } from './utils';\n\nexport const createReturnStatement = ({\n  expression,\n}: {\n  expression?: ts.Expression;\n}) => ts.factory.createReturnStatement(expression);\n\n/**\n * Create a return function call statement.\n *\n * @example `return fn<string>(params)`\n *\n * @returns ts.ReturnStatement\n */\nexport const createReturnFunctionCall = ({\n  args = [],\n  name,\n  types = [],\n}: {\n  /**\n   * Arguments to pass to the function.\n   */\n  args: any[];\n  /**\n   * Name of the function to call or expression.\n   */\n  name: string | ts.Expression;\n  /**\n   * List of function types.\n   */\n  types?: ReadonlyArray<string | ts.StringLiteral>;\n}) => {\n  const typeArguments = types.map((type) =>\n    // this works with string literals too despite throwing a type error.\n    // should be probably fixed at some point...\n    // @ts-expect-error\n    createTypeReferenceNode({ typeName: type }),\n  );\n  const argumentsArray = args\n    .map((arg) =>\n      ts.isExpression(arg) ? arg : createIdentifier({ text: arg }),\n    )\n    .filter(isType<ts.Identifier | ts.Expression>);\n  const expression = createCallExpression({\n    functionName: name,\n    parameters: argumentsArray,\n    types: typeArguments,\n  });\n  const statement = createReturnStatement({ expression });\n  return statement;\n};\n\nexport const createReturnVariable = ({\n  expression,\n}: {\n  expression: string | ts.Expression;\n}) => {\n  const statement = createReturnStatement({\n    expression:\n      typeof expression === 'string'\n        ? createIdentifier({ text: expression })\n        : expression,\n  });\n  return statement;\n};\n","import ts from 'typescript';\n\nimport { validTypescriptIdentifierRegExp } from '../utils/regexp';\nimport { expressionToStatement } from './convert';\nimport { createCallExpression } from './module';\nimport {\n  createArrowFunction,\n  createBlock,\n  createNewExpression,\n  createPropertyAccessChain,\n  createPropertyAccessExpression,\n} from './types';\nimport { createIdentifier } from './utils';\n\nexport const createSafeAccessExpression = (path: string[]) =>\n  path.slice(1).reduce<ts.Expression>(\n    (expression, element) => {\n      validTypescriptIdentifierRegExp.lastIndex = 0;\n      if (validTypescriptIdentifierRegExp.test(element)) {\n        return createPropertyAccessChain({\n          expression,\n          name: element,\n        });\n      }\n\n      return ts.factory.createElementAccessChain(\n        expression,\n        ts.factory.createToken(ts.SyntaxKind.QuestionDotToken),\n        createIdentifier({ text: element }),\n      );\n    },\n    createIdentifier({ text: path[0]! }),\n  );\n\nexport const createAccessExpression = (path: string[]) =>\n  path.slice(1).reduce<ts.Expression>(\n    (expression, element) =>\n      createPropertyAccessExpression({\n        expression,\n        name: element,\n      }),\n    createIdentifier({ text: path[0]! }),\n  );\n\n/**\n * Handles an array of access expressions instead of nesting them (default TypeScript syntax)\n */\nexport const createPropertyAccessExpressions = ({\n  expressions,\n}: {\n  expressions: Array<string | ts.Expression | ts.MemberName>;\n}): ts.PropertyAccessExpression => {\n  const expression = expressions.reduce((expression, name) => {\n    const node = createPropertyAccessExpression({\n      expression,\n      // @ts-expect-error\n      name,\n    });\n    return node;\n  });\n  return expression as ts.PropertyAccessExpression;\n};\n\nexport const createBinaryExpression = ({\n  left,\n  operator = '=',\n  right,\n}: {\n  left: ts.Expression;\n  operator?: '=' | '===' | 'in' | '??';\n  right: ts.Expression | string;\n}) => {\n  const expression = ts.factory.createBinaryExpression(\n    left,\n    // TODO: add support for other tokens\n    operator === '='\n      ? ts.SyntaxKind.EqualsToken\n      : operator === '==='\n        ? ts.SyntaxKind.EqualsEqualsEqualsToken\n        : operator === '??'\n          ? ts.SyntaxKind.QuestionQuestionToken\n          : ts.SyntaxKind.InKeyword,\n    typeof right === 'string' ? createIdentifier({ text: right }) : right,\n  );\n  return expression;\n};\n\nexport const createIfStatement = ({\n  elseStatement,\n  expression,\n  thenStatement,\n}: {\n  elseStatement?: ts.Statement;\n  expression: ts.Expression;\n  thenStatement: ts.Statement;\n}) => ts.factory.createIfStatement(expression, thenStatement, elseStatement);\n\nexport const createDateTransformMutation = ({\n  path,\n}: {\n  path: string[];\n}): ts.Statement => {\n  const safeAccessExpression = createSafeAccessExpression(path);\n  const accessExpression = createAccessExpression(path);\n\n  const thenStatement = createBlock({\n    statements: [\n      expressionToStatement({\n        expression: createBinaryExpression({\n          left: accessExpression,\n          right: createNewExpression({\n            argumentsArray: [accessExpression],\n            expression: createIdentifier({ text: 'Date' }),\n          }),\n        }),\n      }),\n    ],\n  });\n\n  const statement = createIfStatement({\n    expression: safeAccessExpression,\n    thenStatement,\n  });\n\n  return statement;\n};\n\nexport const createFunctionTransformMutation = ({\n  path,\n  transformerName,\n}: {\n  path: string[];\n  transformerName: string;\n}) => {\n  const safeAccessExpression = createSafeAccessExpression(path);\n  const accessExpression = createAccessExpression(path);\n\n  const thenStatement = createBlock({\n    statements: [\n      expressionToStatement({\n        expression: createCallExpression({\n          functionName: transformerName,\n          parameters: [accessExpression],\n        }),\n      }),\n    ],\n  });\n\n  const statement = [\n    createIfStatement({\n      expression: safeAccessExpression,\n      thenStatement,\n    }),\n  ];\n\n  return statement;\n};\n\nexport const createArrayTransformMutation = ({\n  path,\n  transformerName,\n}: {\n  path: string[];\n  transformerName: string;\n}): ts.Statement => {\n  const safeAccessExpression = createSafeAccessExpression(path);\n  const accessExpression = createAccessExpression(path);\n\n  const statement = createIfStatement({\n    expression: createCallExpression({\n      functionName: createPropertyAccessExpression({\n        expression: 'Array',\n        name: 'isArray',\n      }),\n      parameters: [safeAccessExpression],\n    }),\n    thenStatement: createBlock({\n      statements: [\n        expressionToStatement({\n          expression: ts.factory.createCallChain(\n            createPropertyAccessExpression({\n              expression: accessExpression,\n              name: 'forEach',\n            }),\n            undefined,\n            undefined,\n            [createIdentifier({ text: transformerName })],\n          ),\n        }),\n      ],\n    }),\n  });\n\n  return statement;\n};\n\nexport const createDateTransformerExpression = ({\n  parameterName,\n}: {\n  parameterName: string;\n}) => {\n  const expression = createIdentifier({ text: 'Date' });\n  const newExpression = createNewExpression({\n    argumentsArray: [createIdentifier({ text: parameterName })],\n    expression,\n  });\n  return newExpression;\n};\n\nexport const createArrayMapTransform = ({\n  path,\n  transformExpression,\n}: {\n  path: string[];\n  transformExpression: ts.Expression;\n}) => {\n  const safeAccessExpression = createSafeAccessExpression(path);\n  const accessExpression = createAccessExpression(path);\n\n  const statement = createIfStatement({\n    expression: createCallExpression({\n      functionName: createPropertyAccessExpression({\n        expression: 'Array',\n        name: 'isArray',\n      }),\n      parameters: [safeAccessExpression],\n    }),\n    thenStatement: createBlock({\n      statements: [\n        expressionToStatement({\n          expression: createBinaryExpression({\n            left: accessExpression,\n            right: ts.factory.createCallChain(\n              createPropertyAccessExpression({\n                expression: accessExpression,\n                name: 'map',\n              }),\n              undefined,\n              undefined,\n              [\n                createArrowFunction({\n                  parameters: [\n                    {\n                      name: 'item',\n                    },\n                  ],\n                  statements: transformExpression,\n                }),\n              ],\n            ),\n          }),\n        }),\n      ],\n    }),\n  });\n\n  return statement;\n};\n","import ts from 'typescript';\n\nimport { validTypescriptIdentifierRegExp } from '../utils/regexp';\nimport {\n  createKeywordTypeNode,\n  createMappedTypeNode,\n  createParameterDeclaration,\n  createStringLiteral,\n  createTypeNode,\n  createTypeParameterDeclaration,\n  createTypeReferenceNode,\n} from './types';\nimport {\n  addLeadingComments,\n  type Comments,\n  createIdentifier,\n  createModifier,\n  tsNodeToString,\n} from './utils';\n\nconst nullNode = createTypeReferenceNode({ typeName: 'null' });\n\n// Property of a interface type node.\nexport type Property = {\n  comment?: Comments;\n  isReadOnly?: boolean;\n  isRequired?: boolean;\n  name: string | ts.PropertyName;\n  type: any | ts.TypeNode;\n};\n\n/**\n * Returns a union of provided node with null if marked as nullable,\n * otherwise returns the provided node unmodified.\n */\nconst maybeNullable = ({\n  isNullable,\n  node,\n}: {\n  isNullable?: boolean;\n  node: ts.TypeNode;\n}) => {\n  if (!isNullable) {\n    return node;\n  }\n  return ts.factory.createUnionTypeNode([node, nullNode]);\n};\n\n/**\n * Create a interface type node. Example `{ readonly x: string, y?: number }`\n * @param properties - the properties of the interface.\n * @param isNullable - if the whole interface can be nullable\n * @returns ts.TypeLiteralNode | ts.TypeUnionNode\n */\nexport const createTypeInterfaceNode = ({\n  indexKey,\n  indexProperty,\n  isNullable,\n  properties,\n  useLegacyResolution,\n}: {\n  /**\n   * Adds an index key type.\n   *\n   * @example\n   * ```ts\n   * type IndexKey = {\n   *   [key in Foo]: string\n   * }\n   * ```\n   */\n  indexKey?: string;\n  /**\n   * Adds an index signature if defined.\n   *\n   * @example\n   * ```ts\n   * type IndexProperty = {\n   *   [key: string]: string\n   * }\n   * ```\n   */\n  indexProperty?: Property;\n  isNullable?: boolean;\n  properties: Property[];\n  useLegacyResolution: boolean;\n}) => {\n  const propertyTypes: Array<ts.TypeNode> = [];\n\n  const members: Array<ts.TypeElement | ts.MappedTypeNode> = properties.map(\n    (property) => {\n      const modifiers: readonly ts.Modifier[] | undefined = property.isReadOnly\n        ? [createModifier({ keyword: 'readonly' })]\n        : undefined;\n\n      const questionToken: ts.QuestionToken | undefined =\n        property.isRequired !== false\n          ? undefined\n          : ts.factory.createToken(ts.SyntaxKind.QuestionToken);\n\n      const type: ts.TypeNode | undefined = createTypeNode(property.type);\n      propertyTypes.push(type);\n\n      const signature = ts.factory.createPropertySignature(\n        modifiers,\n        useLegacyResolution ||\n          (typeof property.name === 'string' &&\n            property.name.match(validTypescriptIdentifierRegExp)) ||\n          (typeof property.name !== 'string' &&\n            ts.isPropertyName(property.name))\n          ? property.name\n          : createStringLiteral({ text: property.name }),\n        questionToken,\n        type,\n      );\n\n      addLeadingComments({\n        comments: property.comment,\n        node: signature,\n      });\n\n      return signature;\n    },\n  );\n\n  let isIndexMapped = false;\n\n  if (indexProperty) {\n    if (!properties.length && indexKey) {\n      const indexSignature = createMappedTypeNode({\n        questionToken: ts.factory.createToken(ts.SyntaxKind.QuestionToken),\n        type: createKeywordTypeNode({ keyword: 'string' }),\n        typeParameter: createTypeParameterDeclaration({\n          constraint: createTypeReferenceNode({ typeName: indexKey }),\n          name: createIdentifier({ text: String(indexProperty.name) }),\n        }),\n      });\n      members.push(indexSignature);\n      isIndexMapped = true;\n    } else {\n      const modifiers: ReadonlyArray<ts.Modifier> | undefined =\n        indexProperty.isReadOnly\n          ? [createModifier({ keyword: 'readonly' })]\n          : undefined;\n      const indexSignature = ts.factory.createIndexSignature(\n        modifiers,\n        [\n          createParameterDeclaration({\n            name: createIdentifier({ text: String(indexProperty.name) }),\n            type: createKeywordTypeNode({ keyword: 'string' }),\n          }),\n        ],\n        createTypeNode(indexProperty.type),\n      );\n      members.push(indexSignature);\n    }\n  }\n\n  const node = isIndexMapped\n    ? members[0]!\n    : // @ts-expect-error\n      ts.factory.createTypeLiteralNode(members);\n  return maybeNullable({\n    isNullable,\n    // @ts-expect-error\n    node,\n  });\n};\n\n/**\n * Create type union node. Example `string | number | boolean`\n * @param types - the types in the union\n * @param isNullable - if the whole type can be null\n * @returns ts.UnionTypeNode\n */\nexport const createTypeUnionNode = ({\n  isNullable,\n  types,\n}: {\n  isNullable?: boolean;\n  types: (any | ts.TypeNode)[];\n}) => {\n  const nodes = types.map((type) => createTypeNode(type));\n  const node = ts.factory.createUnionTypeNode(nodes);\n  return maybeNullable({ isNullable, node });\n};\n\n/**\n * Create type intersection node. Example `string & number & boolean`\n * @param types - the types in the union\n * @param isNullable - if the whole type can be null\n * @returns ts.IntersectionTypeNode | ts.UnionTypeNode\n */\nexport const createTypeIntersectionNode = ({\n  isNullable,\n  types,\n}: {\n  isNullable?: boolean;\n  types: (any | ts.TypeNode)[];\n}) => {\n  const nodes = types.map((type) => createTypeNode(type));\n  const node = ts.factory.createIntersectionTypeNode(nodes);\n  return maybeNullable({ isNullable, node });\n};\n\n/**\n * Create type tuple node. Example `string, number, boolean`\n * @param isNullable if the whole type can be null\n * @param types the types in the union\n * @returns ts.UnionTypeNode\n */\nexport const createTypeTupleNode = ({\n  isNullable = false,\n  types,\n}: {\n  isNullable?: boolean;\n  types: Array<any | ts.TypeNode>;\n}) => {\n  const nodes = types.map((type) => createTypeNode(type));\n  const node = ts.factory.createTupleTypeNode(nodes);\n  return maybeNullable({ isNullable, node });\n};\n\n/**\n * Create type record node. Example `{ [key: string]: string }`\n * @param keys - key types.\n * @param values - value types.\n * @param isNullable - if the whole type can be null\n * @returns ts.TypeReferenceNode | ts.UnionTypeNode\n */\nexport const createTypeRecordNode = (\n  keys: (any | ts.TypeNode)[],\n  values: (any | ts.TypeNode)[],\n  isNullable: boolean = false,\n  useLegacyResolution: boolean = true,\n) => {\n  const keyNode = createTypeUnionNode({\n    types: keys,\n  });\n  const valueNode = createTypeUnionNode({\n    types: values,\n  });\n  // NOTE: We use the syntax `{ [key: string]: string }` because using a Record causes\n  //       invalid types with circular dependencies. This is functionally the same.\n  // Ref: https://github.com/hey-api/openapi-ts/issues/370\n  const node = createTypeInterfaceNode({\n    properties: [\n      {\n        name: `[key: ${tsNodeToString({ node: keyNode, unescape: true })}]`,\n        type: valueNode,\n      },\n    ],\n    useLegacyResolution,\n  });\n  return maybeNullable({ isNullable, node });\n};\n\n/**\n * Create type array node. Example `Array<string | number>`\n * @param types - the types\n * @param isNullable - if the whole type can be null\n * @returns ts.TypeReferenceNode | ts.UnionTypeNode\n */\nexport const createTypeArrayNode = (\n  types: (any | ts.TypeNode)[] | ts.TypeNode | string,\n  isNullable: boolean = false,\n) => {\n  const node = createTypeReferenceNode({\n    typeArguments: [\n      // @ts-expect-error\n      Array.isArray(types) ? createTypeUnionNode({ types }) : types,\n    ],\n    typeName: 'Array',\n  });\n  return maybeNullable({ isNullable, node });\n};\n","import * as classes from './classes';\nimport * as convert from './convert';\nimport * as module from './module';\nimport * as _return from './return';\nimport * as transform from './transform';\nimport * as typedef from './typedef';\nimport * as types from './types';\nimport * as utils from './utils';\n\nexport type { Property } from './typedef';\nexport type { FunctionParameter } from './types';\nexport type { Comments } from './utils';\n\nexport const compiler = {\n  anonymousFunction: types.createAnonymousFunction,\n  arrayLiteralExpression: types.createArrayLiteralExpression,\n  arrowFunction: types.createArrowFunction,\n  asExpression: types.createAsExpression,\n  assignment: types.createAssignment,\n  awaitExpression: types.createAwaitExpression,\n  binaryExpression: transform.createBinaryExpression,\n  block: types.createBlock,\n  callExpression: module.createCallExpression,\n  classDeclaration: classes.createClassDeclaration,\n  conditionalExpression: types.createConditionalExpression,\n  constVariable: module.createConstVariable,\n  constructorDeclaration: classes.createConstructorDeclaration,\n  enumDeclaration: types.createEnumDeclaration,\n  exportAllDeclaration: module.createExportAllDeclaration,\n  exportNamedDeclaration: module.createNamedExportDeclarations,\n  expressionToStatement: convert.expressionToStatement,\n  forOfStatement: types.createForOfStatement,\n  functionTypeNode: types.createFunctionTypeNode,\n  identifier: utils.createIdentifier,\n  ifStatement: transform.createIfStatement,\n  indexedAccessTypeNode: types.createIndexedAccessTypeNode,\n  isTsNode: utils.isTsNode,\n  keywordTypeNode: types.createKeywordTypeNode,\n  literalTypeNode: types.createLiteralTypeNode,\n  mappedTypeNode: types.createMappedTypeNode,\n  methodDeclaration: classes.createMethodDeclaration,\n  namedImportDeclarations: module.createNamedImportDeclarations,\n  namespaceDeclaration: types.createNamespaceDeclaration,\n  newExpression: types.createNewExpression,\n  nodeToString: utils.tsNodeToString,\n  null: types.createNull,\n  objectExpression: types.createObjectType,\n  ots: utils.ots,\n  parameterDeclaration: types.createParameterDeclaration,\n  propertyAccessExpression: types.createPropertyAccessExpression,\n  propertyAccessExpressions: transform.createPropertyAccessExpressions,\n  propertyAssignment: types.createPropertyAssignment,\n  propertyDeclaration: utils.createPropertyDeclaration,\n  regularExpressionLiteral: types.createRegularExpressionLiteral,\n  returnFunctionCall: _return.createReturnFunctionCall,\n  returnStatement: _return.createReturnStatement,\n  returnVariable: _return.createReturnVariable,\n  safeAccessExpression: transform.createSafeAccessExpression,\n  stringLiteral: types.createStringLiteral,\n  stringToTsNodes: utils.stringToTsNodes,\n  templateLiteralType: types.createTemplateLiteralType,\n  this: utils.createThis,\n  transformArrayMap: transform.createArrayMapTransform,\n  transformArrayMutation: transform.createArrayTransformMutation,\n  transformDateMutation: transform.createDateTransformMutation,\n  transformFunctionMutation: transform.createFunctionTransformMutation,\n  transformNewDate: transform.createDateTransformerExpression,\n  typeAliasDeclaration: types.createTypeAliasDeclaration,\n  typeArrayNode: typedef.createTypeArrayNode,\n  typeInterfaceNode: typedef.createTypeInterfaceNode,\n  typeIntersectionNode: typedef.createTypeIntersectionNode,\n  typeNode: types.createTypeNode,\n  typeOfExpression: types.createTypeOfExpression,\n  typeOperatorNode: types.createTypeOperatorNode,\n  typeParameterDeclaration: types.createTypeParameterDeclaration,\n  typeParenthesizedNode: types.createTypeParenthesizedNode,\n  typeRecordNode: typedef.createTypeRecordNode,\n  typeReferenceNode: types.createTypeReferenceNode,\n  typeTupleNode: typedef.createTypeTupleNode,\n  typeUnionNode: typedef.createTypeUnionNode,\n  valueToExpression: types.toExpression,\n};\n","import fs from 'node:fs';\nimport path from 'node:path';\n\nimport type { ImportExportItemObject } from '../compiler/utils';\nimport type { Client } from '../plugins/@hey-api/client-core/types';\nimport { getClientPlugin } from '../plugins/@hey-api/client-core/utils';\nimport type { Plugin } from '../plugins/types';\nimport type { Config } from '../types/config';\nimport { ensureDirSync, relativeModulePath } from './utils';\n\nconst getClientSrcPath = (name: string) => {\n  const pluginFilePathComponents = name.split(path.sep);\n  const clientSrcPath = pluginFilePathComponents\n    .slice(0, pluginFilePathComponents.length - 1)\n    .join(path.sep);\n  return clientSrcPath;\n};\n\n/**\n * Returns path to the client module. When using client packages, this will be\n * simply the name of the package. When bundling a client, this will be a\n * relative path to the bundled client folder.\n */\nexport const clientModulePath = ({\n  config,\n  sourceOutput,\n}: {\n  config: Config;\n  sourceOutput: string;\n}): string => {\n  const client = getClientPlugin(config);\n\n  if ('bundle' in client && client.bundle) {\n    return relativeModulePath({\n      moduleOutput: 'client',\n      sourceOutput,\n    });\n  }\n\n  if (path.isAbsolute(client.name)) {\n    const clientSrcPath = getClientSrcPath(client.name);\n    const outputPath = path.resolve(config.output.path);\n    return path.relative(outputPath, clientSrcPath).replace(/\\\\/g, '/');\n  }\n\n  return client.name;\n};\n\nexport const clientApi = {\n  Options: {\n    asType: true,\n    name: 'Options',\n  },\n  OptionsLegacyParser: {\n    asType: true,\n    name: 'OptionsLegacyParser',\n  },\n} satisfies Record<string, ImportExportItemObject>;\n\n/**\n * Creates a `client` folder containing the same modules as the client package.\n */\nexport const generateClientBundle = ({\n  outputPath,\n  plugin,\n}: {\n  outputPath: string;\n  plugin: Plugin.Config<Client.Config & { name: any }>;\n}): void => {\n  // create folder for client modules\n  const dirPath = path.resolve(outputPath, 'client');\n  ensureDirSync(dirPath);\n\n  let clientSrcPath = '';\n  if (path.isAbsolute(plugin.name)) {\n    clientSrcPath = getClientSrcPath(plugin.name);\n  }\n\n  if (plugin.bundleSource_EXPERIMENTAL && !clientSrcPath) {\n    const clientModulePath = path.normalize(require.resolve(plugin.name));\n    const clientModulePathComponents = clientModulePath.split(path.sep);\n    clientSrcPath = [\n      ...clientModulePathComponents.slice(\n        0,\n        clientModulePathComponents.indexOf('dist'),\n      ),\n      'src',\n    ].join(path.sep);\n  }\n\n  if (clientSrcPath) {\n    fs.cpSync(clientSrcPath, dirPath, {\n      recursive: true,\n    });\n    return;\n  }\n\n  const clientModulePath = path.normalize(require.resolve(plugin.name));\n  const clientModulePathComponents = clientModulePath.split(path.sep);\n  const clientDistPath = clientModulePathComponents\n    .slice(0, clientModulePathComponents.indexOf('dist') + 1)\n    .join(path.sep);\n\n  const indexJsFile =\n    clientModulePathComponents[clientModulePathComponents.length - 1];\n  const distFiles = [indexJsFile!, 'index.d.ts'];\n  if (plugin.name !== '@hey-api/client-nuxt') {\n    distFiles.push('index.d.cts');\n  }\n  for (const file of distFiles) {\n    fs.copyFileSync(\n      path.resolve(clientDistPath, file),\n      path.resolve(dirPath, file),\n    );\n  }\n};\n","import type { PathLike } from 'node:fs';\nimport fs from 'node:fs';\n\nexport const ensureDirSync = (path: PathLike) => {\n  if (!fs.existsSync(path)) {\n    fs.mkdirSync(path, { recursive: true });\n  }\n};\n\nexport const removeDirSync = (path: PathLike) => {\n  if (fs.existsSync(path)) {\n    fs.rmSync(path, { force: true, recursive: true });\n  }\n};\n\n/**\n * Construct a relative import path to modules. This is used for example\n * in plugins to import types or SDK module.\n */\nexport const relativeModulePath = ({\n  moduleOutput,\n  sourceOutput,\n}: {\n  /**\n   * Output path to the imported module.\n   * @example\n   * 'types'\n   */\n  moduleOutput: string;\n  /**\n   * Output path to the source module.\n   * @example\n   * '@tanstack/react-query'\n   */\n  sourceOutput: string;\n}): string => {\n  const outputParts = sourceOutput.split('/');\n  const relativePath =\n    Array.from({ length: outputParts.length }).fill('').join('../') || './';\n  return `${relativePath}${moduleOutput}`;\n};\n","const parseUrlRegExp =\n  /^(([^:/?#]+):)?((\\/\\/)?([^:/?#]*)(:?([^/?#]*)))?([^?#]*)(\\?([^#]*))?(#(.*))?/;\n\ninterface Url {\n  host: string;\n  path: string;\n  port: string;\n  protocol: string;\n}\n\nexport const parseUrl = (value: string): Url => {\n  const errorResponse: Url = {\n    host: '',\n    path: '',\n    port: '',\n    protocol: '',\n  };\n\n  parseUrlRegExp.lastIndex = 0;\n  const match = value.match(parseUrlRegExp);\n\n  if (!match) {\n    return errorResponse;\n  }\n\n  const host = match[5] || '';\n\n  // value is a relative file system path\n  if (host === '.' || host === '..') {\n    return errorResponse;\n  }\n\n  const path = match[8] || '';\n  const protocol = match[2] || '';\n\n  // value is probably a Windows file system path\n  if (protocol.length === 1) {\n    return errorResponse;\n  }\n\n  return {\n    host,\n    path: path === '/' ? '' : path,\n    port: match[7] || '',\n    protocol,\n  };\n};\n","export const irRef = '#/ir/';\n\nexport const isRefOpenApiComponent = ($ref: string): boolean => {\n  const parts = refToParts($ref);\n  // reusable components are nested within components/<namespace>/<name>\n  return parts.length === 3 && parts[0] === 'components';\n};\n\n/**\n * Returns the reusable component name from `$ref`.\n */\nexport const refToName = ($ref: string): string => {\n  const parts = refToParts($ref);\n  const name = parts[parts.length - 1]!;\n  // refs using unicode characters become encoded, didn't investigate why\n  // but the suspicion is this comes from `@hey-api/json-schema-ref-parser`\n  return decodeURI(name);\n};\n\nconst refToParts = ($ref: string): string[] => {\n  // Remove the leading `#` and split by `/` to traverse the object\n  const parts = $ref.replace(/^#\\//, '').split('/');\n  return parts;\n};\n\nexport const resolveRef = <T>({\n  $ref,\n  spec,\n}: {\n  $ref: string;\n  spec: Record<string, any>;\n}): T => {\n  // refs using unicode characters become encoded, didn't investigate why\n  // but the suspicion is this comes from `@hey-api/json-schema-ref-parser`\n  const parts = refToParts(decodeURI($ref));\n\n  let current = spec;\n\n  for (const part of parts) {\n    const p = part as keyof typeof current;\n    if (current[p] === undefined) {\n      throw new Error(`Reference not found: ${$ref}`);\n    }\n    current = current[p];\n  }\n\n  return current as T;\n};\n","import type { StringCase } from '../types/config';\n\nconst uppercaseRegExp = /[\\p{Lu}]/u;\nconst lowercaseRegExp = /[\\p{Ll}]/u;\nconst identifierRegExp = /([\\p{Alpha}\\p{N}_]|$)/u;\nconst separatorsRegExp = /[_.\\- `\\\\[\\]{}\\\\/]+/;\n\nconst leadingSeparatorsRegExp = new RegExp(`^${separatorsRegExp.source}`);\nconst separatorsAndIdentifierRegExp = new RegExp(\n  `${separatorsRegExp.source}${identifierRegExp.source}`,\n  'gu',\n);\nconst numbersAndIdentifierRegExp = new RegExp(\n  `\\\\d+${identifierRegExp.source}`,\n  'gu',\n);\n\nconst preserveCase = ({\n  case: _case,\n  string,\n}: {\n  readonly case: StringCase;\n  string: string;\n}) => {\n  let isLastCharLower = false;\n  let isLastCharUpper = false;\n  let isLastLastCharUpper = false;\n  let isLastLastCharPreserved = false;\n\n  const separator =\n    _case === 'snake_case' || _case === 'SCREAMING_SNAKE_CASE' ? '_' : '-';\n\n  for (let index = 0; index < string.length; index++) {\n    const character = string[index]!;\n    isLastLastCharPreserved =\n      index > 2 ? string[index - 3] === separator : true;\n\n    let nextIndex = index + 1;\n    let nextCharacter = string[nextIndex];\n    separatorsRegExp.lastIndex = 0;\n    while (nextCharacter && separatorsRegExp.test(nextCharacter)) {\n      nextIndex += 1;\n      nextCharacter = string[nextIndex];\n    }\n    const isSeparatorBeforeNextCharacter = nextIndex !== index + 1;\n\n    lowercaseRegExp.lastIndex = 0;\n    uppercaseRegExp.lastIndex = 0;\n    if (\n      uppercaseRegExp.test(character) &&\n      (isLastCharLower ||\n        (nextCharacter &&\n          !isSeparatorBeforeNextCharacter &&\n          nextCharacter !== 's' &&\n          lowercaseRegExp.test(nextCharacter)))\n    ) {\n      // insert separator behind character\n      string = `${string.slice(0, index)}${separator}${string.slice(index)}`;\n      index++;\n      isLastLastCharUpper = isLastCharUpper;\n      isLastCharLower = false;\n      isLastCharUpper = true;\n    } else if (\n      isLastCharUpper &&\n      isLastLastCharUpper &&\n      lowercaseRegExp.test(character) &&\n      !isLastLastCharPreserved &&\n      // naive detection of plurals\n      !(\n        character === 's' &&\n        (!nextCharacter || nextCharacter.toLocaleLowerCase() !== nextCharacter)\n      )\n    ) {\n      // insert separator 2 characters behind\n      string = `${string.slice(0, index - 1)}${separator}${string.slice(index - 1)}`;\n      isLastLastCharUpper = isLastCharUpper;\n      isLastCharLower = true;\n      isLastCharUpper = false;\n    } else {\n      const characterLower = character.toLocaleLowerCase();\n      const characterUpper = character.toLocaleUpperCase();\n      isLastLastCharUpper = isLastCharUpper;\n      isLastCharLower =\n        characterLower === character && characterUpper !== character;\n      isLastCharUpper =\n        characterUpper === character && characterLower !== character;\n    }\n  }\n\n  return string;\n};\n\nexport const stringCase = ({\n  case: _case,\n  stripLeadingSeparators = true,\n  value,\n}: {\n  readonly case: StringCase | undefined;\n  /**\n   * If leading separators have a semantic meaning, we might not want to\n   * remove them.\n   */\n  stripLeadingSeparators?: boolean;\n  value: string;\n}): string => {\n  let result = value.trim();\n\n  if (!result.length) {\n    return '';\n  }\n\n  if (!_case || _case === 'preserve') {\n    return result;\n  }\n\n  if (result.length === 1) {\n    separatorsRegExp.lastIndex = 0;\n    if (separatorsRegExp.test(result)) {\n      return '';\n    }\n\n    return _case === 'PascalCase' || _case === 'SCREAMING_SNAKE_CASE'\n      ? result.toLocaleUpperCase()\n      : result.toLocaleLowerCase();\n  }\n\n  const hasUpperCase = result !== result.toLocaleLowerCase();\n\n  if (hasUpperCase) {\n    result = preserveCase({ case: _case, string: result });\n  }\n\n  if (stripLeadingSeparators || result[0] !== value[0]) {\n    result = result.replace(leadingSeparatorsRegExp, '');\n  }\n\n  result =\n    _case === 'SCREAMING_SNAKE_CASE'\n      ? result.toLocaleUpperCase()\n      : result.toLocaleLowerCase();\n\n  if (_case === 'PascalCase') {\n    result = `${result.charAt(0).toLocaleUpperCase()}${result.slice(1)}`;\n  }\n\n  if (_case === 'snake_case' || _case === 'SCREAMING_SNAKE_CASE') {\n    result = result.replaceAll(\n      separatorsAndIdentifierRegExp,\n      (match, identifier, offset) => {\n        if (offset === 0 && !stripLeadingSeparators) {\n          return match;\n        }\n        return `_${identifier}`;\n      },\n    );\n\n    if (result[result.length - 1] === '_') {\n      // strip trailing underscore\n      result = result.slice(0, result.length - 1);\n    }\n  } else {\n    separatorsAndIdentifierRegExp.lastIndex = 0;\n    numbersAndIdentifierRegExp.lastIndex = 0;\n\n    result = result.replaceAll(\n      numbersAndIdentifierRegExp,\n      (match, _, offset) => {\n        if (['_', '-', '.'].includes(result.charAt(offset + match.length))) {\n          return match;\n        }\n\n        return match.toLocaleUpperCase();\n      },\n    );\n\n    result = result.replaceAll(\n      separatorsAndIdentifierRegExp,\n      (match, identifier, offset) => {\n        if (\n          offset === 0 &&\n          !stripLeadingSeparators &&\n          match[0] &&\n          value.startsWith(match[0])\n        ) {\n          return match;\n        }\n        return identifier.toLocaleUpperCase();\n      },\n    );\n  }\n\n  return result;\n};\n","import type { Config, StringCase } from '../../../types/config';\nimport { irRef } from '../../../utils/ref';\nimport { stringCase } from '../../../utils/stringCase';\n\ninterface OperationIRRef {\n  /**\n   * Operation ID\n   */\n  id: string;\n}\n\n// TODO: this needs refactor\nexport const operationIrRef = ({\n  case: _case = 'PascalCase',\n  config,\n  id,\n  parameterId,\n  type,\n}: OperationIRRef & {\n  readonly case?: StringCase;\n  config: Pick<Config, 'plugins'>;\n  parameterId?: string;\n  type: 'data' | 'error' | 'errors' | 'parameter' | 'response' | 'responses';\n}): string => {\n  let affix = '';\n  switch (type) {\n    case 'data':\n    case 'error': // error union\n    case 'errors': // errors map\n    case 'parameter':\n    case 'response': // response union\n    case 'responses': // responses map\n      affix = `${(type[0] ?? '').toLocaleUpperCase()}${type.slice(1)}`;\n      break;\n  }\n  let separate = true;\n  if (config.plugins['@hey-api/typescript']?.identifierCase === 'preserve') {\n    separate = false;\n  }\n  const separator = separate ? '-' : '';\n  const parts: Array<string> = [\n    irRef,\n    stringCase({\n      case: _case,\n      value: id,\n    }),\n    separator,\n    affix,\n  ];\n  if (parameterId) {\n    parts.push(separator);\n    parts.push(\n      stringCase({\n        case: _case,\n        value: parameterId,\n      }),\n    );\n  }\n  return parts.join('');\n};\n","import type { Identifier, TypeScriptFile } from '../../../generate/files';\nimport type { IR } from '../../../ir/types';\nimport { operationIrRef } from '../../shared/utils/ref';\n\nexport const typesId = 'types';\n\nfunction refIdentifier<T extends Identifier>(\n  identifier: T,\n  onGet?: (identifier: T) => void,\n): T {\n  return {\n    ...identifier,\n    get name() {\n      onGet?.(identifier);\n      return identifier.name;\n    },\n  };\n}\n\nexport const importIdentifier = ({\n  context,\n  file,\n  operation,\n  type,\n}: {\n  context: IR.Context;\n  file: TypeScriptFile;\n  operation: IR.OperationObject;\n  type: Parameters<typeof operationIrRef>[0]['type'];\n}): Identifier => {\n  const identifier = context.file({ id: typesId })!.identifier({\n    $ref: operationIrRef({\n      config: context.config,\n      id: operation.id,\n      type,\n    }),\n    namespace: 'type',\n  });\n  return refIdentifier(identifier, (ref) => {\n    if (ref.name) {\n      file.import({\n        asType: true,\n        module: file.relativePathToFile({ context, id: typesId }),\n        name: ref.name,\n      });\n    }\n  });\n};\n","import { compiler } from '../../../compiler';\nimport { clientModulePath } from '../../../generate/client';\nimport { parseUrl } from '../../../utils/url';\nimport { typesId } from '../typescript/ref';\nimport type { PluginHandler } from './types';\nimport { clientId, getClientBaseUrlKey } from './utils';\n\nconst resolveBaseUrlString: PluginHandler<string | undefined> = ({\n  context,\n  plugin,\n}) => {\n  const { baseUrl } = plugin;\n\n  if (baseUrl === false) {\n    return;\n  }\n\n  if (typeof baseUrl === 'string') {\n    return baseUrl;\n  }\n\n  const { servers } = context.ir;\n\n  if (!servers) {\n    return;\n  }\n\n  return servers[typeof baseUrl === 'number' ? baseUrl : 0]?.url;\n};\n\nexport const createClient: PluginHandler = ({ context, plugin }) => {\n  const file = context.file({ id: clientId })!;\n\n  const clientModule = clientModulePath({\n    config: context.config,\n    sourceOutput: file.nameWithoutExtension(),\n  });\n  const createClient = file.import({\n    module: clientModule,\n    name: 'createClient',\n  });\n  const createConfig = file.import({\n    module: clientModule,\n    name: 'createConfig',\n  });\n  const clientOptions = file.import({\n    asType: true,\n    module: file.relativePathToFile({ context, id: typesId }),\n    name: 'ClientOptions',\n  });\n\n  const createClientConfig = plugin.runtimeConfigPath\n    ? file.import({\n        module: file.relativePathToFile({\n          context,\n          id: plugin.runtimeConfigPath,\n        }),\n        name: 'createClientConfig',\n      })\n    : undefined;\n\n  const defaultValues: Array<unknown> = [];\n\n  const resolvedBaseUrl = resolveBaseUrlString({ context, plugin });\n  if (resolvedBaseUrl) {\n    const url = parseUrl(resolvedBaseUrl);\n    if (url.protocol && url.host && !resolvedBaseUrl.includes('{')) {\n      defaultValues.push({\n        key: getClientBaseUrlKey(context.config),\n        value: resolvedBaseUrl,\n      });\n    } else if (resolvedBaseUrl !== '/' && resolvedBaseUrl.startsWith('/')) {\n      const baseUrl = resolvedBaseUrl.endsWith('/')\n        ? resolvedBaseUrl.slice(0, -1)\n        : resolvedBaseUrl;\n      defaultValues.push({\n        key: getClientBaseUrlKey(context.config),\n        value: baseUrl,\n      });\n    }\n  }\n\n  if ('throwOnError' in plugin && plugin.throwOnError) {\n    defaultValues.push({\n      key: 'throwOnError',\n      value: true,\n    });\n  }\n\n  const createConfigParameters = [\n    compiler.callExpression({\n      functionName: createConfig.name,\n      parameters: defaultValues.length\n        ? [compiler.objectExpression({ obj: defaultValues })]\n        : undefined,\n      types: [compiler.typeReferenceNode({ typeName: clientOptions.name })],\n    }),\n  ];\n\n  const statement = compiler.constVariable({\n    exportConst: true,\n    expression: compiler.callExpression({\n      functionName: createClient.name,\n      parameters: createClientConfig\n        ? [\n            compiler.callExpression({\n              functionName: createClientConfig.name,\n              parameters: createConfigParameters,\n            }),\n          ]\n        : createConfigParameters,\n    }),\n    name: 'client',\n  });\n  file.add(statement);\n};\n","import { compiler } from '../../../compiler';\nimport { clientModulePath } from '../../../generate/client';\nimport { clientId } from '../client-core/utils';\nimport { typesId } from '../typescript/ref';\nimport type { PluginHandler } from './types';\n\nexport const createClientConfigType: PluginHandler = ({ context }) => {\n  const file = context.file({ id: clientId })!;\n\n  const clientModule = clientModulePath({\n    config: context.config,\n    sourceOutput: file.nameWithoutExtension(),\n  });\n  const clientOptions = file.import({\n    asType: true,\n    module: file.relativePathToFile({ context, id: typesId }),\n    name: 'ClientOptions',\n  });\n  const configType = file.import({\n    asType: true,\n    module: clientModule,\n    name: 'Config',\n  });\n  const defaultClientOptions = file.import({\n    alias: 'DefaultClientOptions',\n    asType: true,\n    module: clientModule,\n    name: 'ClientOptions',\n  });\n\n  const defaultClientOptionsType = compiler.typeReferenceNode({\n    typeName: defaultClientOptions.name,\n  });\n  const tType = compiler.typeReferenceNode({ typeName: 'T' });\n\n  const typeCreateClientConfig = compiler.typeAliasDeclaration({\n    comment: [\n      'The `createClientConfig()` function will be called on client initialization',\n      \"and the returned object will become the client's initial configuration.\",\n      '',\n      'You may want to initialize your client this way instead of calling',\n      \"`setConfig()`. This is useful for example if you're using Next.js\",\n      'to ensure your client always has the correct values.',\n    ],\n    exportType: true,\n    name: 'CreateClientConfig',\n    type: compiler.functionTypeNode({\n      parameters: [\n        compiler.parameterDeclaration({\n          name: 'override',\n          required: false,\n          type: compiler.typeReferenceNode({\n            typeArguments: [\n              compiler.typeIntersectionNode({\n                types: [defaultClientOptionsType, tType],\n              }),\n            ],\n            typeName: configType.name,\n          }),\n        }),\n      ],\n      returnType: compiler.typeReferenceNode({\n        typeArguments: [\n          compiler.typeIntersectionNode({\n            types: [\n              compiler.typeReferenceNode({\n                typeArguments: [defaultClientOptionsType],\n                typeName: 'Required',\n              }),\n              tType,\n            ],\n          }),\n        ],\n        typeName: configType.name,\n      }),\n    }),\n    typeParameters: [\n      {\n        default: compiler.typeReferenceNode({ typeName: clientOptions.name }),\n        extends: defaultClientOptionsType,\n        name: 'T',\n      },\n    ],\n  });\n\n  file.add(typeCreateClientConfig);\n};\n","import { clientId } from '../client-core/utils';\nimport { createClient } from './client';\nimport { createClientConfigType } from './createClientConfig';\nimport type { PluginHandler } from './types';\n\nexport const clientPluginHandler: PluginHandler = ({ context, plugin }) => {\n  context.createFile({\n    exportFromIndex: plugin.exportFromIndex,\n    id: clientId,\n    path: plugin.output,\n  });\n\n  createClientConfigType({ context, plugin });\n  createClient({ context, plugin });\n};\n","import type { Plugin } from '../../types';\nimport { clientDefaultConfig } from '../client-core/config';\nimport { clientPluginHandler } from '../client-core/plugin';\nimport type { Config } from './types';\n\nexport const defaultConfig: Plugin.Config<Config> = {\n  ...clientDefaultConfig,\n  _handler: clientPluginHandler,\n  _handlerLegacy: () => {},\n  name: '@hey-api/client-axios',\n  throwOnError: false,\n};\n\n/**\n * Type helper for `@hey-api/client-axios` plugin, returns {@link Plugin.Config} object\n */\nexport const defineConfig: Plugin.DefineConfig<Config> = (config) => ({\n  ...defaultConfig,\n  ...config,\n});\n","import type { Plugin } from '../../types';\nimport { clientDefaultConfig } from '../client-core/config';\nimport { clientPluginHandler } from '../client-core/plugin';\nimport type { Config } from './types';\n\nexport const defaultConfig: Plugin.Config<Config> = {\n  ...clientDefaultConfig,\n  _handler: clientPluginHandler,\n  _handlerLegacy: () => {},\n  name: '@hey-api/client-fetch',\n  throwOnError: false,\n};\n\n/**\n * Type helper for `@hey-api/client-fetch` plugin, returns {@link Plugin.Config} object\n */\nexport const defineConfig: Plugin.DefineConfig<Config> = (config) => ({\n  ...defaultConfig,\n  ...config,\n});\n","import type { Plugin } from '../../types';\nimport { clientDefaultConfig } from '../client-core/config';\nimport { clientPluginHandler } from '../client-core/plugin';\nimport type { Config } from './types';\n\nexport const defaultConfig: Plugin.Config<Config> = {\n  ...clientDefaultConfig,\n  _handler: clientPluginHandler,\n  _handlerLegacy: () => {},\n  name: '@hey-api/client-next',\n  throwOnError: false,\n};\n\n/**\n * Type helper for `@hey-api/client-next` plugin, returns {@link Plugin.Config} object\n */\nexport const defineConfig: Plugin.DefineConfig<Config> = (config) => ({\n  ...defaultConfig,\n  ...config,\n});\n","import type { Plugin } from '../../types';\nimport { clientDefaultConfig } from '../client-core/config';\nimport { clientPluginHandler } from '../client-core/plugin';\nimport type { Config } from './types';\n\nexport const defaultConfig: Plugin.Config<Config> = {\n  ...clientDefaultConfig,\n  _handler: clientPluginHandler,\n  _handlerLegacy: () => {},\n  name: '@hey-api/client-nuxt',\n};\n\n/**\n * Type helper for `@hey-api/client-nuxt` plugin, returns {@link Plugin.Config} object\n */\nexport const defineConfig: Plugin.DefineConfig<Config> = (config) => ({\n  ...defaultConfig,\n  ...config,\n});\n","import type { Plugin } from '../../types';\nimport type { Config } from './types';\n\nexport const defaultConfig: Plugin.Config<Config> = {\n  _handler: () => {},\n  _handlerLegacy: () => {},\n  _tags: ['client'],\n  name: 'legacy/angular',\n  output: 'client',\n};\n\n/**\n * Type helper for `legacy/angular` plugin, returns {@link Plugin.Config} object\n */\nexport const defineConfig: Plugin.DefineConfig<Config> = (config) => ({\n  ...defaultConfig,\n  ...config,\n});\n","import type { Plugin } from '../../types';\nimport type { Config } from './types';\n\nexport const defaultConfig: Plugin.Config<Config> = {\n  _handler: () => {},\n  _handlerLegacy: () => {},\n  _tags: ['client'],\n  name: 'legacy/axios',\n  output: 'client',\n};\n\n/**\n * Type helper for `legacy/axios` plugin, returns {@link Plugin.Config} object\n */\nexport const defineConfig: Plugin.DefineConfig<Config> = (config) => ({\n  ...defaultConfig,\n  ...config,\n});\n","import type { Plugin } from '../../types';\nimport type { Config } from './types';\n\nexport const defaultConfig: Plugin.Config<Config> = {\n  _handler: () => {},\n  _handlerLegacy: () => {},\n  _tags: ['client'],\n  name: 'legacy/fetch',\n  output: 'client',\n};\n\n/**\n * Type helper for `legacy/fetch` plugin, returns {@link Plugin.Config} object\n */\nexport const defineConfig: Plugin.DefineConfig<Config> = (config) => ({\n  ...defaultConfig,\n  ...config,\n});\n","import type { Plugin } from '../../types';\nimport type { Config } from './types';\n\nexport const defaultConfig: Plugin.Config<Config> = {\n  _handler: () => {},\n  _handlerLegacy: () => {},\n  _tags: ['client'],\n  name: 'legacy/node',\n  output: 'client',\n};\n\n/**\n * Type helper for `legacy/node` plugin, returns {@link Plugin.Config} object\n */\nexport const defineConfig: Plugin.DefineConfig<Config> = (config) => ({\n  ...defaultConfig,\n  ...config,\n});\n","import type { Plugin } from '../../types';\nimport type { Config } from './types';\n\nexport const defaultConfig: Plugin.Config<Config> = {\n  _handler: () => {},\n  _handlerLegacy: () => {},\n  _tags: ['client'],\n  name: 'legacy/xhr',\n  output: 'client',\n};\n\n/**\n * Type helper for `legacy/xhr` plugin, returns {@link Plugin.Config} object\n */\nexport const defineConfig: Plugin.DefineConfig<Config> = (config) => ({\n  ...defaultConfig,\n  ...config,\n});\n","import {\n  illegalStartCharactersRegExp,\n  reservedBrowserGlobalsRegExp,\n  reservedJavaScriptGlobalsRegExp,\n  reservedJavaScriptKeywordsRegExp,\n  reservedNodeGlobalsRegExp,\n  reservedTypeScriptKeywordsRegExp,\n} from '../../../utils/regexp';\n\nconst regexps = [\n  reservedJavaScriptKeywordsRegExp,\n  reservedTypeScriptKeywordsRegExp,\n  reservedJavaScriptGlobalsRegExp,\n  reservedNodeGlobalsRegExp,\n  reservedBrowserGlobalsRegExp,\n];\n\nexport const ensureValidIdentifier = (name: string): string => {\n  let identifier = name.replace(/[^$\\u200c\\u200d\\p{ID_Continue}]/gu, '_');\n\n  illegalStartCharactersRegExp.lastIndex = 0;\n  if (illegalStartCharactersRegExp.test(identifier)) {\n    return `_${identifier}`;\n  }\n\n  for (const regexp of regexps) {\n    if (identifier.startsWith('_')) {\n      return identifier;\n    }\n\n    identifier = identifier.replace(regexp, '_$1');\n  }\n\n  return identifier;\n};\n","import { compiler } from '../../../compiler';\nimport type { IR } from '../../../ir/types';\nimport type { OpenApiV2_0_XTypes } from '../../../openApi/2.0.x';\nimport type { OpenApiV3_0_XTypes } from '../../../openApi/3.0.x';\nimport type { OpenApiV3_1_XTypes } from '../../../openApi/3.1.x';\nimport { ensureValidIdentifier } from '../../../openApi/shared/utils/identifier';\nimport type { OpenApi } from '../../../openApi/types';\nimport type { Plugin } from '../../types';\nimport type { Config } from './types';\n\nconst schemasId = 'schemas';\n\nconst stripSchema = ({\n  plugin,\n  schema,\n}: {\n  plugin: Plugin.Instance<Config>;\n  schema:\n    | OpenApiV2_0_XTypes['SchemaObject']\n    | OpenApiV3_0_XTypes['SchemaObject']\n    | OpenApiV3_1_XTypes['SchemaObject'];\n}) => {\n  if (plugin.type === 'form') {\n    if (schema.description) {\n      delete schema.description;\n    }\n\n    if (schema['x-enum-descriptions']) {\n      delete schema['x-enum-descriptions'];\n    }\n\n    if (schema['x-enum-varnames']) {\n      delete schema['x-enum-varnames'];\n    }\n\n    if (schema['x-enumNames']) {\n      delete schema['x-enumNames'];\n    }\n\n    if (schema.title) {\n      delete schema.title;\n    }\n  }\n};\n\nconst schemaToJsonSchemaDraft_04 = ({\n  context,\n  plugin,\n  schema: _schema,\n}: {\n  context: IR.Context;\n  plugin: Plugin.Instance<Config>;\n  schema: OpenApiV2_0_XTypes['SchemaObject'];\n}): OpenApiV2_0_XTypes['SchemaObject'] => {\n  if (Array.isArray(_schema)) {\n    return _schema.map((item) =>\n      schemaToJsonSchemaDraft_04({\n        context,\n        plugin,\n        schema: item,\n      }),\n    ) as unknown as OpenApiV2_0_XTypes['SchemaObject'];\n  }\n\n  const schema = structuredClone(_schema);\n\n  if (schema.$ref) {\n    // refs using unicode characters become encoded, didn't investigate why\n    // but the suspicion is this comes from `@hey-api/json-schema-ref-parser`\n    schema.$ref = decodeURI(schema.$ref);\n    return schema;\n  }\n\n  stripSchema({ plugin, schema });\n\n  if (\n    schema.additionalProperties &&\n    typeof schema.additionalProperties !== 'boolean'\n  ) {\n    schema.additionalProperties = schemaToJsonSchemaDraft_04({\n      context,\n      plugin,\n      schema: schema.additionalProperties,\n    });\n  }\n\n  if (schema.allOf) {\n    schema.allOf = schema.allOf.map((item) =>\n      schemaToJsonSchemaDraft_04({\n        context,\n        plugin,\n        schema: item,\n      }),\n    );\n  }\n\n  if (schema.items) {\n    schema.items = schemaToJsonSchemaDraft_04({\n      context,\n      plugin,\n      schema: schema.items as OpenApiV2_0_XTypes['SchemaObject'],\n    });\n  }\n\n  if (schema.properties) {\n    for (const name in schema.properties) {\n      const property = schema.properties[name]!;\n\n      if (typeof property !== 'boolean') {\n        schema.properties[name] = schemaToJsonSchemaDraft_04({\n          context,\n          plugin,\n          schema: property,\n        });\n      }\n    }\n  }\n\n  return schema;\n};\n\nconst schemaToJsonSchemaDraft_05 = ({\n  context,\n  plugin,\n  schema: _schema,\n}: {\n  context: IR.Context;\n  plugin: Plugin.Instance<Config>;\n  schema:\n    | OpenApiV3_0_XTypes['SchemaObject']\n    | OpenApiV3_0_XTypes['ReferenceObject'];\n}):\n  | OpenApiV3_0_XTypes['SchemaObject']\n  | OpenApiV3_0_XTypes['ReferenceObject'] => {\n  if (Array.isArray(_schema)) {\n    return _schema.map((item) =>\n      schemaToJsonSchemaDraft_05({\n        context,\n        plugin,\n        schema: item,\n      }),\n    ) as\n      | OpenApiV3_0_XTypes['SchemaObject']\n      | OpenApiV3_0_XTypes['ReferenceObject'];\n  }\n\n  const schema = structuredClone(_schema);\n\n  if ('$ref' in schema) {\n    // refs using unicode characters become encoded, didn't investigate why\n    // but the suspicion is this comes from `@hey-api/json-schema-ref-parser`\n    schema.$ref = decodeURI(schema.$ref);\n    return schema;\n  }\n\n  stripSchema({ plugin, schema });\n\n  if (\n    schema.additionalProperties &&\n    typeof schema.additionalProperties !== 'boolean'\n  ) {\n    schema.additionalProperties = schemaToJsonSchemaDraft_05({\n      context,\n      plugin,\n      schema: schema.additionalProperties,\n    });\n  }\n\n  if (schema.allOf) {\n    schema.allOf = schema.allOf.map((item) =>\n      schemaToJsonSchemaDraft_05({\n        context,\n        plugin,\n        schema: item,\n      }),\n    );\n  }\n\n  if (schema.anyOf) {\n    schema.anyOf = schema.anyOf.map((item) =>\n      schemaToJsonSchemaDraft_05({\n        context,\n        plugin,\n        schema: item,\n      }),\n    );\n  }\n\n  if (schema.items) {\n    schema.items = schemaToJsonSchemaDraft_05({\n      context,\n      plugin,\n      schema: schema.items,\n    });\n  }\n\n  if (schema.oneOf) {\n    schema.oneOf = schema.oneOf.map((item) =>\n      schemaToJsonSchemaDraft_05({\n        context,\n        plugin,\n        schema: item,\n      }),\n    );\n  }\n\n  if (schema.properties) {\n    for (const name in schema.properties) {\n      const property = schema.properties[name]!;\n\n      if (typeof property !== 'boolean') {\n        schema.properties[name] = schemaToJsonSchemaDraft_05({\n          context,\n          plugin,\n          schema: property,\n        });\n      }\n    }\n  }\n\n  return schema;\n};\n\nconst schemaToJsonSchema2020_12 = ({\n  context,\n  plugin,\n  schema: _schema,\n}: {\n  context: IR.Context;\n  plugin: Plugin.Instance<Config>;\n  schema: OpenApiV3_1_XTypes['SchemaObject'];\n}): OpenApiV3_1_XTypes['SchemaObject'] => {\n  if (Array.isArray(_schema)) {\n    return _schema.map((item) =>\n      schemaToJsonSchema2020_12({\n        context,\n        plugin,\n        schema: item,\n      }),\n    ) as OpenApiV3_1_XTypes['SchemaObject'];\n  }\n\n  const schema = structuredClone(_schema);\n\n  stripSchema({ plugin, schema });\n\n  if (schema.$ref) {\n    // refs using unicode characters become encoded, didn't investigate why\n    // but the suspicion is this comes from `@hey-api/json-schema-ref-parser`\n    schema.$ref = decodeURI(schema.$ref);\n  }\n\n  if (\n    schema.additionalProperties &&\n    typeof schema.additionalProperties !== 'boolean'\n  ) {\n    schema.additionalProperties = schemaToJsonSchema2020_12({\n      context,\n      plugin,\n      schema: schema.additionalProperties,\n    });\n  }\n\n  if (schema.allOf) {\n    schema.allOf = schema.allOf.map((item) =>\n      schemaToJsonSchema2020_12({\n        context,\n        plugin,\n        schema: item,\n      }),\n    );\n  }\n\n  if (schema.anyOf) {\n    schema.anyOf = schema.anyOf.map((item) =>\n      schemaToJsonSchema2020_12({\n        context,\n        plugin,\n        schema: item,\n      }),\n    );\n  }\n\n  if (schema.items) {\n    schema.items = schemaToJsonSchema2020_12({\n      context,\n      plugin,\n      schema: schema.items,\n    });\n  }\n\n  if (schema.oneOf) {\n    schema.oneOf = schema.oneOf.map((item) =>\n      schemaToJsonSchema2020_12({\n        context,\n        plugin,\n        schema: item,\n      }),\n    );\n  }\n\n  if (schema.prefixItems) {\n    schema.prefixItems = schema.prefixItems.map((item) =>\n      schemaToJsonSchema2020_12({\n        context,\n        plugin,\n        schema: item,\n      }),\n    );\n  }\n\n  if (schema.properties) {\n    for (const name in schema.properties) {\n      const property = schema.properties[name]!;\n\n      if (typeof property !== 'boolean') {\n        schema.properties[name] = schemaToJsonSchema2020_12({\n          context,\n          plugin,\n          schema: property,\n        });\n      }\n    }\n  }\n\n  return schema;\n};\n\nconst schemaName = ({\n  name,\n  plugin,\n  schema,\n}: {\n  name: string;\n  plugin: Plugin.Instance<Config>;\n  schema:\n    | OpenApiV2_0_XTypes['SchemaObject']\n    | OpenApiV3_0_XTypes['ReferenceObject']\n    | OpenApiV3_0_XTypes['SchemaObject']\n    | OpenApiV3_1_XTypes['SchemaObject'];\n}): string => {\n  let customName = '';\n\n  if (plugin.nameBuilder) {\n    if (typeof plugin.nameBuilder === 'function') {\n      customName = plugin.nameBuilder(name, schema);\n    } else {\n      customName = plugin.nameBuilder.replace('{{name}}', name);\n    }\n  }\n\n  if (!customName) {\n    customName = `${name}Schema`;\n  }\n\n  return ensureValidIdentifier(customName);\n};\n\nconst schemasV2_0_X = ({\n  context,\n  plugin,\n}: {\n  context: IR.Context<OpenApi.V2_0_X>;\n  plugin: Plugin.Instance<Config>;\n}) => {\n  if (!context.spec.definitions) {\n    return;\n  }\n\n  for (const name in context.spec.definitions) {\n    const schema = context.spec.definitions[name]!;\n    const obj = schemaToJsonSchemaDraft_04({\n      context,\n      plugin,\n      schema,\n    });\n    const statement = compiler.constVariable({\n      assertion: 'const',\n      exportConst: true,\n      expression: compiler.objectExpression({ obj }),\n      name: schemaName({ name, plugin, schema }),\n    });\n    context.file({ id: schemasId })!.add(statement);\n  }\n};\n\nconst schemasV3_0_X = ({\n  context,\n  plugin,\n}: {\n  context: IR.Context<OpenApi.V3_0_X>;\n  plugin: Plugin.Instance<Config>;\n}) => {\n  if (!context.spec.components) {\n    return;\n  }\n\n  for (const name in context.spec.components.schemas) {\n    const schema = context.spec.components.schemas[name]!;\n    const obj = schemaToJsonSchemaDraft_05({\n      context,\n      plugin,\n      schema,\n    });\n    const statement = compiler.constVariable({\n      assertion: 'const',\n      exportConst: true,\n      expression: compiler.objectExpression({ obj }),\n      name: schemaName({ name, plugin, schema }),\n    });\n    context.file({ id: schemasId })!.add(statement);\n  }\n};\n\nconst schemasV3_1_X = ({\n  context,\n  plugin,\n}: {\n  context: IR.Context<OpenApi.V3_1_X>;\n  plugin: Plugin.Instance<Config>;\n}) => {\n  if (!context.spec.components) {\n    return;\n  }\n\n  for (const name in context.spec.components.schemas) {\n    const schema = context.spec.components.schemas[name]!;\n    const obj = schemaToJsonSchema2020_12({\n      context,\n      plugin,\n      schema,\n    });\n    const statement = compiler.constVariable({\n      assertion: 'const',\n      exportConst: true,\n      expression: compiler.objectExpression({ obj }),\n      name: schemaName({ name, plugin, schema }),\n    });\n    context.file({ id: schemasId })!.add(statement);\n  }\n};\n\nexport const handler: Plugin.Handler<Config> = ({ context, plugin }) => {\n  context.createFile({\n    exportFromIndex: plugin.exportFromIndex,\n    id: schemasId,\n    path: plugin.output,\n  });\n\n  if ('swagger' in context.spec) {\n    schemasV2_0_X({\n      context: context as IR.Context<OpenApi.V2_0_X>,\n      plugin,\n    });\n    return;\n  }\n\n  switch (context.spec.openapi) {\n    case '3.0.0':\n    case '3.0.1':\n    case '3.0.2':\n    case '3.0.3':\n    case '3.0.4':\n      schemasV3_0_X({\n        context: context as IR.Context<OpenApi.V3_0_X>,\n        plugin,\n      });\n      break;\n    case '3.1.0':\n    case '3.1.1':\n      schemasV3_1_X({\n        context: context as IR.Context<OpenApi.V3_1_X>,\n        plugin,\n      });\n      break;\n    default:\n      throw new Error('Unsupported OpenAPI specification');\n  }\n};\n","import fs from 'node:fs';\nimport path from 'node:path';\n\nimport ts from 'typescript';\n\nimport { compiler } from '../compiler';\nimport { type ImportExportItemObject, tsNodeToString } from '../compiler/utils';\nimport type { IR } from '../ir/types';\nimport { ensureValidIdentifier } from '../openApi/shared/utils/identifier';\nimport type { StringCase } from '../types/config';\nimport { stringCase } from '../utils/stringCase';\nimport { ensureDirSync } from './utils';\n\nexport interface Identifier {\n  /**\n   * Did this function add a new property to the file's `identifiers` map?\n   */\n  created: boolean;\n  /**\n   * The resolved identifier name. False means the identifier has been blacklisted.\n   */\n  name: string | false;\n}\n\ntype NamespaceEntry = Pick<Identifier, 'name'> & {\n  /**\n   * Ref to the type in OpenAPI specification.\n   */\n  $ref: string;\n};\n\nexport type Identifiers = Record<\n  string,\n  {\n    /**\n     * TypeScript enum only namespace.\n     *\n     * @example\n     * ```ts\n     * export enum Foo = {\n     *   FOO = 'foo'\n     * }\n     * ```\n     */\n    enum?: Record<string, NamespaceEntry>;\n    /**\n     * Type namespace. Types, interfaces, and type aliases exist here.\n     *\n     * @example\n     * ```ts\n     * export type Foo = string;\n     * ```\n     */\n    type?: Record<string, NamespaceEntry>;\n    /**\n     * Value namespace. Variables, functions, classes, and constants exist here.\n     *\n     * @example\n     * ```js\n     * export const foo = '';\n     * ```\n     */\n    value?: Record<string, NamespaceEntry>;\n  }\n>;\n\ntype Namespace = keyof Identifiers[keyof Identifiers];\n\nexport type FileImportResult = Pick<ImportExportItemObject, 'asType' | 'name'>;\n\nexport class TypeScriptFile {\n  /**\n   * Should the exports from this file be re-exported in the index barrel file?\n   */\n  private _exportFromIndex: boolean;\n  private _headers: Array<string> = [];\n  private _id: string;\n  private _identifierCase: StringCase | undefined;\n  private _imports = new Map<string, Map<string, ImportExportItemObject>>();\n  private _items: Array<ts.Node | string> = [];\n  private _name: string;\n  private _path: string;\n\n  public identifiers: Identifiers = {};\n\n  /**\n   * Path relative to the client output root.\n   */\n  // TODO: parser - add relative path property for quick access, currently\n  // everything is resolved into an absolute path with cwd\n  // public relativePath: string;\n\n  public constructor({\n    dir,\n    exportFromIndex = false,\n    header = true,\n    id,\n    identifierCase,\n    name,\n  }: {\n    dir: string;\n    /**\n     * Should the exports from this file be re-exported in the index barrel file?\n     */\n    exportFromIndex?: boolean;\n    header?: boolean;\n    /**\n     * Unique file ID. Used to generate correct relative paths to the file.\n     * This should be refactored later as it's basically the file name unless\n     * nested inside another folder.\n     */\n    id: string;\n    identifierCase?: StringCase;\n    name: string;\n  }) {\n    this._exportFromIndex = exportFromIndex;\n    this._id = id;\n    this._identifierCase = identifierCase;\n    this._name = this._setName(name);\n    this._path = path.resolve(dir, this._name);\n\n    if (header) {\n      this._headers.push(\n        '// This file is auto-generated by @hey-api/openapi-ts',\n      );\n    }\n  }\n\n  public add(...nodes: Array<ts.Node | string>) {\n    this._items = this._items.concat(nodes);\n  }\n\n  /**\n   * Prevents a specific identifier from being created. This is useful for\n   * transformers where we know a certain transformer won't be needed, and\n   * we want to avoid attempting to create since we know it won't happen.\n   */\n  public blockIdentifier({\n    $ref,\n    namespace,\n  }: Pick<EnsureUniqueIdentifierData, '$ref'> & {\n    namespace: Namespace;\n  }): Identifier {\n    const { name, ref } = parseRef($ref);\n    const refValue =\n      this.identifiers[name.toLocaleLowerCase()]?.[namespace]?.[ref];\n    if (!refValue) {\n      throw new Error(\n        `Identifier for $ref ${$ref} in namespace ${namespace} not found`,\n      );\n    }\n\n    refValue.name = false;\n\n    return {\n      created: false,\n      name: refValue.name,\n    };\n  }\n\n  public get exportFromIndex(): boolean {\n    return this._exportFromIndex;\n  }\n\n  public get id(): string {\n    return this._id;\n  }\n\n  public identifier(\n    args: Pick<\n      EnsureUniqueIdentifierData,\n      '$ref' | 'count' | 'create' | 'nameTransformer'\n    > & {\n      namespace: Namespace;\n    },\n  ): Identifier {\n    return ensureUniqueIdentifier({\n      case: this._identifierCase,\n      identifiers: this.identifiers,\n      ...args,\n    });\n  }\n\n  /**\n   * Adds an import to the provided module. Handles duplication, returns added\n   * import. Returns the imported name. If we import an aliased export, `name`\n   * will be equal to the specified `alias`.\n   */\n  public import({\n    module,\n    ...importedItem\n  }: ImportExportItemObject & {\n    module: string;\n  }): FileImportResult {\n    let moduleMap = this._imports.get(module);\n\n    if (!moduleMap) {\n      moduleMap = new Map<string, ImportExportItemObject>();\n      this._imports.set(module, moduleMap);\n    }\n\n    const match = moduleMap.get(importedItem.name);\n    if (match) {\n      return {\n        ...match,\n        name: match.alias || match.name,\n      };\n    }\n\n    moduleMap.set(importedItem.name, importedItem);\n    return {\n      ...importedItem,\n      name: importedItem.alias || importedItem.name,\n    };\n  }\n\n  public isEmpty() {\n    return !this._items.length;\n  }\n\n  public nameWithoutExtension() {\n    const { name } = splitNameAndExtension(this._name);\n    return name;\n  }\n\n  public relativePathToFile({\n    context,\n    id,\n  }: {\n    context: IR.Context;\n    id: string;\n  }): string {\n    let filePath = '';\n\n    // relative file path\n    if (id.startsWith('.')) {\n      let configFileParts: Array<string> = [];\n      // if providing a custom configuration file, relative paths must resolve\n      // relative to the configuration file.\n      if (context.config.configFile) {\n        const cfgParts = context.config.configFile.split('/');\n        configFileParts = cfgParts.slice(0, cfgParts.length - 1);\n      }\n      filePath = path.resolve(process.cwd(), ...configFileParts, id);\n    } else {\n      const file = context.file({ id });\n      if (!file) {\n        throw new Error(`File with id ${id} does not exist`);\n      }\n      filePath = file._path;\n    }\n\n    const thisPathParts = this._path.split(path.sep);\n    const filePathParts = filePath.split(path.sep);\n\n    let index = -1;\n    let relativePath = '';\n    for (const part of thisPathParts) {\n      index += 1;\n      if (filePathParts[index] !== part) {\n        const pathArray = Array.from({\n          length: thisPathParts.length - index,\n        }).fill('');\n        const relativePathToFile = filePathParts.slice(index);\n        const relativeFolder = relativePathToFile.slice(\n          0,\n          relativePathToFile.length - 1,\n        );\n        if (relativeFolder.length) {\n          relativeFolder.push('');\n        }\n        relativePath =\n          (pathArray.join('../') || './') + relativeFolder.join('/');\n        break;\n      }\n    }\n\n    const fileName = filePathParts[filePathParts.length - 1]!;\n    // TODO: parser - cache responses\n    return `${relativePath}${splitNameAndExtension(fileName).name}`;\n  }\n\n  public remove(options?: Parameters<typeof fs.rmSync>[1]) {\n    fs.rmSync(this._path, options);\n  }\n\n  /**\n   * Removes last node form the stack. Works as undo.\n   */\n  public removeNode() {\n    this._items = this._items.slice(0, this._items.length - 1);\n  }\n\n  private _setName(fileName: string) {\n    if (fileName.includes('index')) {\n      return fileName;\n    }\n\n    const { extension, name } = splitNameAndExtension(fileName);\n    return [name, 'gen', extension].filter(Boolean).join('.');\n  }\n\n  private _toString(separator: string, tsConfig: ts.ParsedCommandLine | null) {\n    let output: Array<string> = [];\n    if (this._headers.length) {\n      output.push(this._headers.join('\\n'));\n    }\n\n    const shouldAppendJs =\n      tsConfig?.options.moduleResolution === ts.ModuleResolutionKind.NodeNext;\n\n    const importsStringArray: Array<string> = [];\n\n    for (const [_module, moduleMap] of this._imports.entries()) {\n      const imports = Array.from(moduleMap.values());\n\n      let resolvedModule = _module;\n      if (\n        shouldAppendJs &&\n        (resolvedModule.startsWith('./') || resolvedModule.startsWith('../'))\n      ) {\n        resolvedModule = `${resolvedModule}.js`;\n      }\n\n      const node = compiler.namedImportDeclarations({\n        imports,\n        module: resolvedModule,\n      });\n      importsStringArray.push(tsNodeToString({ node }));\n    }\n    if (importsStringArray.length) {\n      output.push(importsStringArray.join('\\n'));\n    }\n    output = output.concat(\n      this._items.map((node) =>\n        typeof node === 'string'\n          ? node\n          : tsNodeToString({ node, unescape: true }),\n      ),\n    );\n    return output.join(separator);\n  }\n\n  public write(separator = '\\n', tsConfig: ts.ParsedCommandLine | null = null) {\n    if (this.isEmpty()) {\n      this.remove({ force: true });\n      return;\n    }\n\n    let dir = this._path;\n    if (typeof this._path === 'string') {\n      const parts = this._path.split(path.sep);\n      dir = parts.slice(0, parts.length - 1).join(path.sep);\n    }\n    ensureDirSync(dir);\n    fs.writeFileSync(this._path, this._toString(separator, tsConfig));\n  }\n}\n\nconst parseRef = (\n  $ref: string,\n): {\n  /**\n   * Extracted name from `$ref`, equal to the last part or property name.\n   */\n  name: string;\n  /**\n   * List of properties extracted from `$ref`, if any.\n   */\n  properties: ReadonlyArray<string>;\n  /**\n   * `$ref` without properties if they're included in `$ref`, otherwise\n   * `ref` is equal to `$ref`.\n   */\n  ref: string;\n} => {\n  let ref = $ref;\n  const properties: string[] = [];\n\n  const parts = ref.split('/');\n  let name = parts[parts.length - 1] || '';\n\n  let propIndex = parts.indexOf('properties');\n\n  if (propIndex !== -1) {\n    ref = parts.slice(0, propIndex).join('/');\n    name = parts[propIndex - 1] || '';\n\n    while (propIndex + 1 < parts.length) {\n      const prop = parts[propIndex + 1];\n      if (!prop) {\n        throw new Error(`Invalid $ref: ${$ref}`);\n      }\n      properties.push(prop);\n      propIndex += 2;\n    }\n  }\n\n  return {\n    name,\n    properties,\n    ref,\n  };\n};\n\ninterface EnsureUniqueIdentifierData {\n  $ref: string;\n  case: StringCase | undefined;\n  count?: number;\n  create?: boolean;\n  identifiers: Identifiers;\n  /**\n   * Transforms name obtained from `$ref` before it's passed to `stringCase()`.\n   */\n  nameTransformer?: (name: string) => string;\n  namespace: Namespace;\n}\n\nconst ensureUniqueIdentifier = ({\n  $ref,\n  case: identifierCase,\n  count = 1,\n  create = false,\n  identifiers,\n  nameTransformer,\n  namespace,\n}: EnsureUniqueIdentifierData): Identifier => {\n  const { name, properties, ref } = parseRef($ref);\n\n  if (!name) {\n    return {\n      created: false,\n      name: '',\n    };\n  }\n\n  let nameWithCasing = stringCase({\n    case: identifierCase,\n    value: name,\n  });\n  if (count > 1) {\n    nameWithCasing = `${nameWithCasing}${count}`;\n  }\n  const lowercaseName = nameWithCasing.toLocaleLowerCase();\n  if (!identifiers[lowercaseName]) {\n    identifiers[lowercaseName] = {};\n  }\n  const identifier = identifiers[lowercaseName];\n\n  // Enum declarations can only merge with namespace or other enum\n  // declarations, so we need to ensure we don't mix them up.\n  if (\n    (namespace === 'enum' && (identifier.type || identifier.value)) ||\n    (namespace !== 'enum' && identifier.enum)\n  ) {\n    return ensureUniqueIdentifier({\n      $ref: ref,\n      case: identifierCase,\n      count: count + 1,\n      create,\n      identifiers,\n      nameTransformer,\n      namespace,\n    });\n  }\n\n  if (!identifier[namespace]) {\n    identifier[namespace] = {};\n  }\n  const id = identifier[namespace];\n\n  const refValue = id[ref];\n  if (refValue) {\n    let name = refValue.name;\n    if (properties.length) {\n      name += properties.map((property) => `['${property}']`).join('');\n    }\n    return {\n      created: false,\n      name: name as string,\n    };\n  }\n\n  let nameWithCasingAndTransformer = stringCase({\n    case: identifierCase,\n    value: nameTransformer?.(name) ?? name,\n  });\n  if (count > 1) {\n    nameWithCasingAndTransformer = `${nameWithCasingAndTransformer}${count}`;\n  }\n\n  let nameValue = id[nameWithCasingAndTransformer];\n  if (nameValue) {\n    if (nameValue.$ref === ref) {\n      return {\n        created: false,\n        name: nameValue.name,\n      };\n    }\n\n    return ensureUniqueIdentifier({\n      $ref: ref,\n      case: identifierCase,\n      count: count + 1,\n      create,\n      identifiers,\n      nameTransformer,\n      namespace,\n    });\n  }\n\n  if (!create) {\n    delete identifier[namespace];\n    return {\n      created: false,\n      name: '',\n    };\n  }\n\n  nameValue = {\n    $ref: ref,\n    name: ensureValidIdentifier(nameWithCasingAndTransformer),\n  };\n  id[nameWithCasingAndTransformer] = nameValue;\n  id[nameValue.$ref] = nameValue;\n\n  return {\n    created: true,\n    name: nameValue.name,\n  };\n};\n\nconst splitNameAndExtension = (fileName: string) => {\n  const match = fileName.match(/\\.[0-9a-z]+$/i);\n  const extension = match ? match[0].slice(1) : '';\n  const name = fileName.slice(\n    0,\n    fileName.length - (extension ? extension.length + 1 : 0),\n  );\n  return { extension, name };\n};\n\nexport const _test = {\n  ensureUniqueIdentifier,\n  parseRef,\n  splitNameAndExtension,\n};\n","import path from 'node:path';\n\nimport { HeyApiError } from '../error';\nimport { TypeScriptFile } from '../generate/files';\nimport type { Config, StringCase } from '../types/config';\nimport type { Files } from '../types/utils';\nimport { resolveRef } from '../utils/ref';\nimport type { IR } from './types';\n\ninterface ContextFile {\n  /**\n   * Should the exports from this file be re-exported in the index barrel file?\n   */\n  exportFromIndex?: boolean;\n  /**\n   * Unique file identifier.\n   */\n  id: string;\n  /**\n   * Define casing for identifiers in this file.\n   */\n  identifierCase?: StringCase;\n  /**\n   * Relative file path to the output path.\n   * @example\n   * 'bar/foo.ts'\n   */\n  path: string;\n}\n\nexport interface Events {\n  /**\n   * Called after parsing.\n   */\n  after: () => void;\n  /**\n   * Called before parsing.\n   */\n  before: () => void;\n  operation: (args: {\n    method: keyof IR.PathItemObject;\n    operation: IR.OperationObject;\n    path: string;\n  }) => void;\n  parameter: (args: {\n    $ref: string;\n    name: string;\n    parameter: IR.ParameterObject;\n  }) => void;\n  requestBody: (args: {\n    $ref: string;\n    name: string;\n    requestBody: IR.RequestBodyObject;\n  }) => void;\n  schema: (args: {\n    $ref: string;\n    name: string;\n    schema: IR.SchemaObject;\n  }) => void;\n  server: (args: { server: IR.ServerObject }) => void;\n}\n\ntype ListenerWithMeta<T extends keyof Events> = {\n  callbackFn: Events[T];\n  pluginName: string;\n};\n\ntype Listeners = {\n  [T in keyof Events]?: Array<ListenerWithMeta<T>>;\n};\n\nexport class IRContext<Spec extends Record<string, any> = any> {\n  /**\n   * Configuration for parsing and generating the output. This\n   * is a mix of user-provided and default values.\n   */\n  public config: Config;\n  /**\n   * A map of files that will be generated from `spec`.\n   */\n  public files: Files;\n  /**\n   * Intermediate representation model obtained from `spec`.\n   */\n  public ir: IR.Model;\n  /**\n   * Resolved specification from `input`.\n   */\n  public spec: Spec;\n\n  /**\n   * A map of event listeners.\n   */\n  private listeners: Listeners;\n\n  constructor({ config, spec }: { config: Config; spec: Spec }) {\n    this.config = config;\n    this.files = {};\n    this.ir = {};\n    this.listeners = {};\n    this.spec = spec;\n  }\n\n  /**\n   * Notify all event listeners about `event`.\n   */\n  public async broadcast<T extends keyof Events>(\n    event: T,\n    ...args: Parameters<Events[T]>\n  ): Promise<void> {\n    const eventListeners = this.listeners[event];\n\n    if (eventListeners) {\n      for (const listener of eventListeners) {\n        try {\n          await listener.callbackFn(\n            // @ts-expect-error\n            ...args,\n          );\n        } catch (error) {\n          const originalError =\n            error instanceof Error ? error : new Error(String(error));\n          throw new HeyApiError({\n            args,\n            error: originalError,\n            event,\n            name: 'BroadcastError',\n            pluginName: listener.pluginName,\n          });\n        }\n      }\n    }\n  }\n\n  /**\n   * Create and return a new TypeScript file. Also set the current file context\n   * to the newly created file.\n   */\n  public createFile(file: ContextFile): TypeScriptFile {\n    // TODO: parser - handle attempt to create duplicate\n    const outputParts = file.path.split('/');\n    const outputDir = path.resolve(\n      this.config.output.path,\n      ...outputParts.slice(0, outputParts.length - 1),\n    );\n    const createdFile = new TypeScriptFile({\n      dir: outputDir,\n      exportFromIndex: file.exportFromIndex,\n      id: file.id,\n      identifierCase: file.identifierCase,\n      name: `${outputParts[outputParts.length - 1]}.ts`,\n    });\n    this.files[file.id] = createdFile;\n    return createdFile;\n  }\n\n  /**\n   * Returns a resolved and dereferenced schema from `spec`.\n   */\n  public dereference<T>(schema: { $ref: string }) {\n    const resolved = this.resolveRef<T>(schema.$ref);\n    const dereferenced = {\n      ...schema,\n      ...resolved,\n    } as T;\n    // @ts-expect-error\n    delete dereferenced.$ref;\n    return dereferenced;\n  }\n\n  /**\n   * Returns a specific file by ID from `files`.\n   */\n  public file({ id }: Pick<ContextFile, 'id'>): TypeScriptFile | undefined {\n    return this.files[id];\n  }\n\n  // TODO: parser - works the same as resolveRef, but for IR schemas.\n  // for now, they map 1:1, but if they diverge (like with OpenAPI 2.0),\n  // we will want to rewrite $refs at parse time, so they continue pointing\n  // to the correct IR location\n  public resolveIrRef<T>($ref: string) {\n    return resolveRef<T>({\n      $ref,\n      spec: this.ir,\n    });\n  }\n\n  /**\n   * Returns a resolved reference from `spec`.\n   */\n  public resolveRef<T>($ref: string) {\n    return resolveRef<T>({\n      $ref,\n      spec: this.spec,\n    });\n  }\n\n  /**\n   * Register a new `event` listener.\n   */\n  public subscribe<T extends keyof Events>(\n    event: T,\n    callbackFn: Events[T],\n    pluginName?: string,\n  ): void {\n    if (!this.listeners[event]) {\n      this.listeners[event] = [];\n    }\n    this.listeners[event].push({\n      callbackFn,\n      pluginName: pluginName ?? '',\n    });\n  }\n}\n","import fs from 'node:fs';\nimport path from 'node:path';\nimport { fileURLToPath } from 'node:url';\n\nimport ts from 'typescript';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\nexport const findPackageJson = (): unknown | undefined => {\n  let dir = __dirname;\n  while (dir !== path.dirname(dir)) {\n    const files = fs.readdirSync(dir);\n    const candidates = files.filter((file) => file === 'package.json');\n\n    if (candidates[0]) {\n      const packageJsonPath = path.join(dir, candidates[0]);\n      return JSON.parse(\n        fs.readFileSync(packageJsonPath, {\n          encoding: 'utf8',\n        }),\n      );\n    }\n\n    dir = path.dirname(dir);\n  }\n};\n\nexport const findTsConfigPath = (\n  tsConfigPath?: 'off' | (string & {}),\n): string | null => {\n  if (tsConfigPath === 'off') {\n    return null;\n  }\n\n  if (tsConfigPath) {\n    const resolved = path.isAbsolute(tsConfigPath)\n      ? tsConfigPath\n      : path.resolve(__dirname, tsConfigPath);\n    return fs.existsSync(resolved) ? resolved : null;\n  }\n\n  let dir = __dirname;\n  while (dir !== path.dirname(dir)) {\n    const files = fs.readdirSync(dir);\n    const candidates = files\n      .filter((file) => file.startsWith('tsconfig') && file.endsWith('.json'))\n      .sort((file) => (file === 'tsconfig.json' ? -1 : 1));\n\n    if (candidates[0]) {\n      return path.join(dir, candidates[0]);\n    }\n\n    dir = path.dirname(dir);\n  }\n\n  return null;\n};\n\nexport const loadTsConfig = (\n  configPath: string | null,\n): ts.ParsedCommandLine | null => {\n  if (!configPath) {\n    return null;\n  }\n\n  const raw = ts.readConfigFile(configPath, ts.sys.readFile);\n\n  if (raw.error) {\n    throw new Error(`Couldn't read tsconfig from path: ${configPath}`);\n  }\n\n  return ts.parseJsonConfigFileContent(\n    raw.config,\n    ts.sys,\n    path.dirname(configPath),\n  );\n};\n","import fs from 'node:fs';\nimport path from 'node:path';\n\nimport colors from 'ansi-colors';\n\nimport { findPackageJson } from './generate/tsConfig';\nimport { ensureDirSync } from './generate/utils';\n\nexport const isInteractive = process.stdin.isTTY && process.stdout.isTTY;\n\nexport class HeyApiError extends Error {\n  args: ReadonlyArray<unknown>;\n  event: string;\n  pluginName: string;\n\n  constructor({\n    args,\n    error,\n    event,\n    name,\n    pluginName,\n  }: {\n    args: unknown[];\n    error: Error;\n    event: string;\n    name: string;\n    pluginName: string;\n  }) {\n    const message = error instanceof Error ? error.message : 'Unknown error';\n    super(message);\n\n    this.args = args;\n    this.cause = error.cause;\n    this.event = event;\n    this.name = name || error.name;\n    this.pluginName = pluginName;\n    this.stack = error.stack;\n  }\n}\n\nexport const logCrashReport = (error: unknown, logsDir: string): string => {\n  const logName = `openapi-ts-error-${Date.now()}.log`;\n  const fullDir = path.resolve(process.cwd(), logsDir);\n  ensureDirSync(fullDir);\n  const logPath = path.resolve(fullDir, logName);\n\n  let logContent = `[${new Date().toISOString()}] `;\n\n  if (error instanceof HeyApiError) {\n    logContent += `${error.name} during event \"${error.event}\"\\n`;\n    if (error.pluginName) {\n      logContent += `Plugin: ${error.pluginName}\\n`;\n    }\n    logContent += `Arguments: ${JSON.stringify(error.args, null, 2)}\\n\\n`;\n  }\n\n  const message = error instanceof Error ? error.message : String(error);\n  const stack = error instanceof Error ? error.stack : undefined;\n\n  logContent += `Error: ${message}\\n`;\n  if (stack) {\n    logContent += `Stack:\\n${stack}\\n`;\n  }\n\n  fs.writeFileSync(logPath, logContent);\n\n  return logPath;\n};\n\nexport const openGitHubIssueWithCrashReport = async (error: unknown) => {\n  let body = '';\n\n  if (error instanceof HeyApiError) {\n    if (error.pluginName) {\n      body += `**Plugin**: \\`${error.pluginName}\\`\\n`;\n    }\n    body += `**Event**: \\`${error.event}\\`\\n`;\n    body += `**Arguments**:\\n\\`\\`\\`ts\\n${JSON.stringify(error.args, null, 2)}\\n\\`\\`\\`\\n\\n`;\n  }\n\n  const message = error instanceof Error ? error.message : String(error);\n  const stack = error instanceof Error ? error.stack : undefined;\n\n  body += `**Error**: \\`${message}\\`\\n`;\n  if (stack) {\n    body += `\\n**Stack Trace**:\\n\\`\\`\\`\\n${stack}\\n\\`\\`\\``;\n  }\n\n  const search = new URLSearchParams({\n    body,\n    labels: 'bug 🔥',\n    title: 'Crash Report',\n  });\n\n  const packageJson = findPackageJson();\n  let bugsUrl: string | undefined;\n  if (\n    packageJson &&\n    typeof packageJson === 'object' &&\n    'bugs' in packageJson &&\n    packageJson.bugs &&\n    typeof packageJson.bugs === 'object' &&\n    'url' in packageJson.bugs &&\n    typeof packageJson.bugs.url === 'string'\n  ) {\n    bugsUrl = packageJson.bugs.url;\n    if (bugsUrl && !bugsUrl.endsWith('/')) {\n      bugsUrl += '/';\n    }\n  }\n\n  if (bugsUrl) {\n    const url = `${bugsUrl}new?${search.toString()}`;\n    const open = (await import('open')).default;\n    await open(url);\n  }\n};\n\nexport const printCrashReport = ({\n  error,\n  logPath,\n}: {\n  error: unknown;\n  logPath: string | undefined;\n}) => {\n  const packageJson = findPackageJson();\n  let name: string | undefined;\n  if (\n    packageJson &&\n    typeof packageJson === 'object' &&\n    'name' in packageJson &&\n    typeof packageJson.name === 'string'\n  ) {\n    name = packageJson.name;\n  }\n  process.stderr.write(\n    `\\n🛑 ${colors.cyan(name || '')} ${colors.red('encountered an error.')}` +\n      `\\n\\n${colors.red('❗️ Error:')} ${colors.white(typeof error === 'string' ? error : error instanceof Error ? error.message : 'Unknown error')}` +\n      (logPath\n        ? `\\n\\n${colors.cyan('📄 Crash log saved to:')} ${colors.gray(logPath)}`\n        : ''),\n  );\n};\n\nexport const shouldReportCrash = async (): Promise<boolean> => {\n  if (!isInteractive) {\n    return false;\n  }\n\n  return new Promise((resolve) => {\n    process.stdout.write(\n      `${colors.yellow('\\n\\n📢 Open a GitHub issue with crash details?')} ${colors.yellow('(y/N):')}`,\n    );\n    process.stdin.setEncoding('utf8');\n    process.stdin.once('data', (data: string) => {\n      resolve(data.trim().toLowerCase() === 'y');\n    });\n  });\n};\n","import type { Pagination } from './pagination';\nimport type { IR } from './types';\n\nconst getPaginationSchema = ({\n  context,\n  parameter,\n}: {\n  context: IR.Context;\n  parameter: IR.ParameterObject;\n}): IR.SchemaObject | undefined => {\n  if (!parameter.pagination) {\n    return;\n  }\n\n  if (parameter.pagination === true) {\n    return parameter.schema;\n  }\n\n  let schema = parameter.schema;\n  if (schema.$ref) {\n    schema = context.resolveIrRef<IR.SchemaObject>(schema.$ref);\n  }\n\n  return schema.properties![parameter.pagination]!;\n};\n\nexport const hasParameterGroupObjectRequired = (\n  parameterGroup?: Record<string, IR.ParameterObject>,\n): boolean => {\n  for (const name in parameterGroup) {\n    if (parameterGroup[name]!.required) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nexport const hasParametersObjectRequired = (\n  parameters: IR.ParametersObject | undefined,\n): boolean => {\n  if (!parameters) {\n    return false;\n  }\n\n  if (hasParameterGroupObjectRequired(parameters.cookie)) {\n    return true;\n  }\n\n  if (hasParameterGroupObjectRequired(parameters.header)) {\n    return true;\n  }\n\n  if (hasParameterGroupObjectRequired(parameters.path)) {\n    return true;\n  }\n\n  if (hasParameterGroupObjectRequired(parameters.query)) {\n    return true;\n  }\n\n  return false;\n};\n\nexport const parameterWithPagination = ({\n  context,\n  parameters,\n}: {\n  context: IR.Context;\n  parameters: IR.ParametersObject | undefined;\n}): Pagination | undefined => {\n  if (!parameters) {\n    return;\n  }\n\n  for (const name in parameters.cookie) {\n    const parameter = parameters.cookie[name]!;\n    if (parameter.pagination) {\n      return {\n        in: parameter.location,\n        name:\n          parameter.pagination === true\n            ? name\n            : `${name}.${parameter.pagination}`,\n        schema: getPaginationSchema({ context, parameter })!,\n      };\n    }\n  }\n\n  for (const name in parameters.header) {\n    const parameter = parameters.header[name]!;\n    if (parameter.pagination) {\n      return {\n        in: parameter.location,\n        name:\n          parameter.pagination === true\n            ? name\n            : `${name}.${parameter.pagination}`,\n        schema: getPaginationSchema({ context, parameter })!,\n      };\n    }\n  }\n\n  for (const name in parameters.path) {\n    const parameter = parameters.path[name]!;\n    if (parameter.pagination) {\n      return {\n        in: parameter.location,\n        name:\n          parameter.pagination === true\n            ? name\n            : `${name}.${parameter.pagination}`,\n        schema: getPaginationSchema({ context, parameter })!,\n      };\n    }\n  }\n\n  for (const name in parameters.query) {\n    const parameter = parameters.query[name]!;\n    if (parameter.pagination) {\n      return {\n        in: parameter.location,\n        name:\n          parameter.pagination === true\n            ? name\n            : `${name}.${parameter.pagination}`,\n        schema: getPaginationSchema({ context, parameter })!,\n      };\n    }\n  }\n};\n","import type { IR } from './types';\n\n/**\n * Ensure we don't produce redundant types, e.g. string | string.\n */\nexport const deduplicateSchema = <T extends IR.SchemaObject>({\n  schema,\n}: {\n  schema: T;\n}): T => {\n  if (!schema.items) {\n    return schema;\n  }\n\n  const uniqueItems: Array<IR.SchemaObject> = [];\n  const typeIds: Array<string> = [];\n\n  for (const item of schema.items) {\n    // skip nested schemas for now, handle if necessary\n    if ((!item.type && item.items) || schema.type === 'tuple') {\n      uniqueItems.push(item);\n      continue;\n    }\n\n    if (\n      // no `type` might still include `$ref` or `const`\n      !item.type ||\n      item.type === 'boolean' ||\n      item.type === 'integer' ||\n      item.type === 'null' ||\n      item.type === 'number' ||\n      item.type === 'string' ||\n      item.type === 'unknown' ||\n      item.type === 'void'\n    ) {\n      // const needs namespace to handle empty string values, otherwise\n      // fallback would equal an actual value and we would skip an item\n      const typeId = `${item.$ref ?? ''}${item.type ?? ''}${item.const !== undefined ? `const-${item.const}` : ''}`;\n      if (!typeIds.includes(typeId)) {\n        typeIds.push(typeId);\n        uniqueItems.push(item);\n      }\n      continue;\n    }\n\n    uniqueItems.push(item);\n  }\n\n  schema.items = uniqueItems;\n\n  if (\n    schema.items.length <= 1 &&\n    schema.type !== 'array' &&\n    schema.type !== 'enum' &&\n    schema.type !== 'tuple'\n  ) {\n    // bring the only item up to clean up the schema\n    const liftedSchema = schema.items[0];\n    delete schema.logicalOperator;\n    delete schema.items;\n    schema = {\n      ...schema,\n      ...liftedSchema,\n    };\n  }\n\n  // exclude unknown if it's the only type left\n  if (schema.type === 'unknown') {\n    return {} as T;\n  }\n\n  return schema;\n};\n","/**\n * Accepts `accessScopes` from two schemas and returns a merged and\n * deduplicated value.\n */\nexport const mergeSchemaAccessScopes = (\n  a: ReadonlyArray<'both' | 'read' | 'write'> | undefined,\n  b: ReadonlyArray<'both' | 'read' | 'write'> | undefined,\n): ReadonlyArray<'both' | 'read' | 'write'> | undefined => {\n  if (!a?.length) {\n    return b?.length ? b : undefined;\n  }\n\n  if (!b?.length) {\n    return a;\n  }\n\n  const mergedScopes = new Set(a);\n\n  for (const scope of b) {\n    mergedScopes.add(scope);\n  }\n\n  return mergedScopes.size > a.length ? Array.from(mergedScopes) : a;\n};\n","import { mergeSchemaAccessScopes } from '../openApi/shared/utils/schema';\nimport type { IR } from './types';\n\nconst assignItems = ({\n  items,\n  schema,\n}: {\n  items: Array<IR.SchemaObject>;\n  schema: IR.SchemaObject;\n}) => {\n  for (const item of items) {\n    schema.accessScopes = mergeSchemaAccessScopes(\n      schema.accessScopes,\n      item.accessScopes,\n    );\n  }\n  schema.items = items;\n};\n\n/**\n * Simply adds `items` to the schema. Also handles setting the logical operator\n * and avoids setting it for a single item or tuples.\n */\nexport const addItemsToSchema = ({\n  items,\n  logicalOperator = 'or',\n  mutateSchemaOneItem = false,\n  schema,\n}: {\n  items: Array<IR.SchemaObject>;\n  logicalOperator?: IR.SchemaObject['logicalOperator'];\n  mutateSchemaOneItem?: boolean;\n  schema: IR.SchemaObject;\n}) => {\n  if (!items.length) {\n    return schema;\n  }\n\n  if (schema.type === 'tuple') {\n    assignItems({ items, schema });\n    return schema;\n  }\n\n  if (items.length !== 1) {\n    assignItems({ items, schema });\n    schema.logicalOperator = logicalOperator;\n    return schema;\n  }\n\n  if (mutateSchemaOneItem) {\n    // bring composition up to avoid extraneous brackets\n    schema = {\n      ...schema,\n      ...items[0],\n    };\n    return schema;\n  }\n\n  assignItems({ items, schema });\n  return schema;\n};\n","import type { Pagination } from './pagination';\nimport {\n  hasParametersObjectRequired,\n  parameterWithPagination,\n} from './parameter';\nimport { deduplicateSchema } from './schema';\nimport type { IR } from './types';\nimport { addItemsToSchema } from './utils';\n\nexport const hasOperationDataRequired = (\n  operation: IR.OperationObject,\n): boolean => {\n  if (hasParametersObjectRequired(operation.parameters)) {\n    return true;\n  }\n\n  if (operation.body?.required) {\n    return true;\n  }\n\n  return false;\n};\n\nexport const createOperationKey = ({\n  method,\n  path,\n}: {\n  method: string;\n  path: string;\n}) => `${method.toUpperCase()} ${path}`;\n\nexport const operationPagination = ({\n  context,\n  operation,\n}: {\n  context: IR.Context;\n  operation: IR.OperationObject;\n}): Pagination | undefined => {\n  const body = operation.body;\n\n  if (!body || !body.pagination) {\n    return parameterWithPagination({\n      context,\n      parameters: operation.parameters,\n    });\n  }\n\n  if (body.pagination === true) {\n    return {\n      in: 'body',\n      name: 'body',\n      schema: body.schema,\n    };\n  }\n\n  const schema = body.schema;\n  const resolvedSchema = schema.$ref\n    ? context.resolveIrRef<IR.RequestBodyObject | IR.SchemaObject>(schema.$ref)\n    : schema;\n\n  const finalSchema =\n    'schema' in resolvedSchema ? resolvedSchema.schema : resolvedSchema;\n  const paginationProp = finalSchema?.properties?.[body.pagination];\n\n  if (!paginationProp) {\n    return parameterWithPagination({\n      context,\n      parameters: operation.parameters,\n    });\n  }\n\n  return {\n    in: 'body',\n    name: body.pagination,\n    schema: paginationProp,\n  };\n};\n\ntype StatusGroup = '1XX' | '2XX' | '3XX' | '4XX' | '5XX' | 'default';\n\nexport const statusCodeToGroup = ({\n  statusCode,\n}: {\n  statusCode: string;\n}): StatusGroup => {\n  switch (statusCode) {\n    case '1XX':\n      return '1XX';\n    case '2XX':\n      return '2XX';\n    case '3XX':\n      return '3XX';\n    case '4XX':\n      return '4XX';\n    case '5XX':\n      return '5XX';\n    case 'default':\n      return 'default';\n    default:\n      return `${statusCode[0]}XX` as StatusGroup;\n  }\n};\n\ninterface OperationResponsesMap {\n  /**\n   * A deduplicated union of all error types. Unknown types are omitted.\n   */\n  error?: IR.SchemaObject;\n  /**\n   * An object containing a map of status codes for each error type.\n   */\n  errors?: IR.SchemaObject;\n  /**\n   * A deduplicated union of all response types. Unknown types are omitted.\n   */\n  response?: IR.SchemaObject;\n  /**\n   * An object containing a map of status codes for each response type.\n   */\n  responses?: IR.SchemaObject;\n}\n\nexport const operationResponsesMap = (\n  operation: IR.OperationObject,\n): OperationResponsesMap => {\n  const result: OperationResponsesMap = {};\n\n  if (!operation.responses) {\n    return result;\n  }\n\n  const errors: Omit<IR.SchemaObject, 'properties'> &\n    Pick<Required<IR.SchemaObject>, 'properties'> = {\n    properties: {},\n    type: 'object',\n  };\n\n  const responses: Omit<IR.SchemaObject, 'properties'> &\n    Pick<Required<IR.SchemaObject>, 'properties'> = {\n    properties: {},\n    type: 'object',\n  };\n\n  // store default response to be evaluated last\n  let defaultResponse: IR.ResponseObject | undefined;\n\n  for (const name in operation.responses) {\n    const response = operation.responses[name]!;\n\n    switch (statusCodeToGroup({ statusCode: name })) {\n      case '1XX':\n      case '3XX':\n        // TODO: parser - handle informational and redirection status codes\n        break;\n      case '2XX':\n        responses.properties[name] = response.schema;\n        break;\n      case '4XX':\n      case '5XX':\n        errors.properties[name] = response.schema;\n        break;\n      case 'default':\n        defaultResponse = response;\n        break;\n    }\n  }\n\n  // infer default response type\n  if (defaultResponse) {\n    let inferred = false;\n\n    // assume default is intended for success if none exists yet\n    if (!Object.keys(responses.properties).length) {\n      responses.properties.default = defaultResponse.schema;\n      inferred = true;\n    }\n\n    const description = (\n      defaultResponse.schema.description ?? ''\n    ).toLocaleLowerCase();\n    const $ref = (defaultResponse.schema.$ref ?? '').toLocaleLowerCase();\n\n    // TODO: parser - this could be rewritten using regular expressions\n    const successKeywords = ['success'];\n    if (\n      successKeywords.some(\n        (keyword) => description.includes(keyword) || $ref.includes(keyword),\n      )\n    ) {\n      responses.properties.default = defaultResponse.schema;\n      inferred = true;\n    }\n\n    // TODO: parser - this could be rewritten using regular expressions\n    const errorKeywords = ['error', 'problem'];\n    if (\n      errorKeywords.some(\n        (keyword) => description.includes(keyword) || $ref.includes(keyword),\n      )\n    ) {\n      errors.properties.default = defaultResponse.schema;\n      inferred = true;\n    }\n\n    // if no keyword match, assume default schema is intended for error\n    if (!inferred) {\n      errors.properties.default = defaultResponse.schema;\n    }\n  }\n\n  const errorKeys = Object.keys(errors.properties);\n  if (errorKeys.length) {\n    errors.required = errorKeys;\n    result.errors = errors;\n\n    let errorUnion = addItemsToSchema({\n      items: Object.values(errors.properties),\n      mutateSchemaOneItem: true,\n      schema: {},\n    });\n    errorUnion = deduplicateSchema({ schema: errorUnion });\n    if (Object.keys(errorUnion).length && errorUnion.type !== 'unknown') {\n      result.error = errorUnion;\n    }\n  }\n\n  const responseKeys = Object.keys(responses.properties);\n  if (responseKeys.length) {\n    responses.required = responseKeys;\n    result.responses = responses;\n\n    let responseUnion = addItemsToSchema({\n      items: Object.values(responses.properties),\n      mutateSchemaOneItem: true,\n      schema: {},\n    });\n    responseUnion = deduplicateSchema({ schema: responseUnion });\n    if (Object.keys(responseUnion).length && responseUnion.type !== 'unknown') {\n      result.response = responseUnion;\n    }\n  }\n\n  return result;\n};\n","export type Graph = {\n  operations: Map<\n    string,\n    {\n      dependencies: Set<string>;\n      deprecated: boolean;\n      tags: Set<string>;\n    }\n  >;\n  parameters: Map<\n    string,\n    {\n      dependencies: Set<string>;\n      deprecated: boolean;\n    }\n  >;\n  requestBodies: Map<\n    string,\n    {\n      dependencies: Set<string>;\n      deprecated: boolean;\n    }\n  >;\n  responses: Map<\n    string,\n    {\n      dependencies: Set<string>;\n      deprecated: boolean;\n    }\n  >;\n  schemas: Map<\n    string,\n    {\n      dependencies: Set<string>;\n      deprecated: boolean;\n    }\n  >;\n};\n\nexport type GraphType =\n  | 'body'\n  | 'operation'\n  | 'parameter'\n  | 'response'\n  | 'schema'\n  | 'unknown';\n\n/**\n * Converts reference strings from OpenAPI $ref keywords into namespaces.\n *\n * @example '#/components/schemas/Foo' -> 'schema'\n */\nexport const stringToNamespace = (value: string): GraphType => {\n  switch (value) {\n    case 'parameters':\n      return 'parameter';\n    case 'requestBodies':\n      return 'body';\n    case 'responses':\n      return 'response';\n    case 'definitions':\n    case 'schemas':\n      return 'schema';\n    default:\n      return 'unknown';\n  }\n};\n\nconst namespaceNeedle = '/';\n\nexport const addNamespace = (\n  namespace: GraphType,\n  value: string = '',\n): string => `${namespace}${namespaceNeedle}${value}`;\n\nexport const removeNamespace = (\n  key: string,\n): {\n  name: string;\n  namespace: GraphType;\n} => {\n  const index = key.indexOf(namespaceNeedle);\n  const name = key.slice(index + 1);\n  return {\n    name,\n    namespace: key.slice(0, index)! as GraphType,\n  };\n};\n","import { illegalStartCharactersRegExp } from '../../../utils/regexp';\n\nexport const ensureValidTypeScriptJavaScriptIdentifier = (name: string) => {\n  const replaced = name.replace(/[^$\\u200c\\u200d\\p{ID_Continue}]/gu, '_');\n  illegalStartCharactersRegExp.lastIndex = 0;\n  const startsWithIllegalCharacter =\n    illegalStartCharactersRegExp.test(replaced);\n  const valid = startsWithIllegalCharacter ? `_${replaced}` : replaced;\n  return valid;\n};\n\n/**\n * Sanitizes namespace identifiers so they are valid TypeScript identifiers of a certain form.\n *\n * 1: Remove any leading characters that are illegal as starting character of a typescript identifier.\n * 2: Replace illegal characters in remaining part of type name with hyphen (-).\n *\n * Step 1 should perhaps instead also replace illegal characters with underscore, or prefix with it, like sanitizeEnumName\n * does. The way this is now one could perhaps end up removing all characters, if all are illegal start characters. It\n * would be sort of a breaking change to do so, though, previously generated code might change then.\n *\n * JavaScript identifier regexp pattern retrieved from https://developer.mozilla.org/docs/Web/JavaScript/Reference/Lexical_grammar#identifiers\n *\n * The output of this is expected to be converted to PascalCase\n */\nexport const sanitizeNamespaceIdentifier = (name: string) =>\n  name\n    .replace(/^[^\\p{ID_Start}]+/u, '')\n    .replace(/[^$\\u200c\\u200d\\p{ID_Continue}]/gu, '-')\n    .replace(/[$+]/g, '-');\n\nexport const sanitizeOperationParameterName = (name: string) => {\n  const withoutBrackets = name.replace('[]', 'Array');\n  return sanitizeNamespaceIdentifier(withoutBrackets);\n};\n","import { createOperationKey } from '../../../ir/operation';\nimport type { IR } from '../../../ir/types';\nimport { stringCase } from '../../../utils/stringCase';\nimport { sanitizeNamespaceIdentifier } from '../../common/parser/sanitize';\nimport type { State } from '../types/state';\n\nexport const httpMethods = [\n  'delete',\n  'get',\n  'head',\n  'options',\n  'patch',\n  'post',\n  'put',\n  'trace',\n] as const;\n\n/**\n * Returns an operation ID to use across the application. By default, we try\n * to use the provided ID. If it's not provided or the SDK is configured\n * to exclude it, we generate operation ID from its location.\n */\nexport const operationToId = ({\n  context,\n  count = 1,\n  id,\n  method,\n  path,\n  state,\n}: {\n  context: IR.Context;\n  count?: number;\n  id: string | undefined;\n  method: string;\n  path: string;\n  state: Pick<State, 'ids'>;\n}): string => {\n  let result: string;\n\n  if (\n    id &&\n    (!context.config.plugins['@hey-api/sdk'] ||\n      context.config.plugins['@hey-api/sdk'].operationId)\n  ) {\n    result = stringCase({\n      case: 'camelCase',\n      value: sanitizeNamespaceIdentifier(id),\n    });\n  } else {\n    const urlWithoutPlaceholders = path\n      .replace(/{(.*?)}/g, 'by-$1')\n      // replace slashes with hyphens for camelcase method at the end\n      .replace(/[/:+]/g, '-');\n\n    result = stringCase({\n      case: 'camelCase',\n      value: `${method}-${urlWithoutPlaceholders}`,\n    });\n  }\n\n  if (count > 1) {\n    result = `${result}${count}`;\n  }\n\n  if (state.ids.has(result)) {\n    return operationToId({\n      context,\n      count: count + 1,\n      id,\n      method,\n      path,\n      state,\n    });\n  }\n\n  state.ids.set(result, createOperationKey({ method, path }));\n\n  return result;\n};\n","import { createOperationKey } from '../../../ir/operation';\nimport type { Config } from '../../../types/config';\nimport type { PathItemObject, PathsObject } from '../../3.1.x/types/spec';\nimport type { OpenApi } from '../../types';\nimport type { Graph, GraphType } from './graph';\nimport { addNamespace, removeNamespace } from './graph';\nimport { httpMethods } from './operation';\n\ntype FiltersConfigToState<T> = {\n  [K in keyof T]-?: NonNullable<T[K]> extends ReadonlyArray<infer U>\n    ? Set<U>\n    : NonNullable<T[K]> extends object\n      ? FiltersConfigToState<NonNullable<T[K]>>\n      : T[K];\n};\n\nexport type Filters = FiltersConfigToState<\n  NonNullable<Config['input']['filters']>\n>;\n\ninterface SetAndRegExps {\n  regexps: Array<RegExp>;\n  set: Set<string>;\n}\n\nconst createFiltersSetAndRegExps = (\n  type: GraphType,\n  filters: ReadonlyArray<string> | undefined,\n): SetAndRegExps => {\n  const keys: Array<string> = [];\n  const regexps: Array<RegExp> = [];\n  if (filters) {\n    for (const value of filters) {\n      if (value.startsWith('/') && value.endsWith('/')) {\n        regexps.push(new RegExp(value.slice(1, value.length - 1)));\n      } else {\n        keys.push(addNamespace(type, value));\n      }\n    }\n  }\n  return {\n    regexps,\n    set: new Set(keys),\n  };\n};\n\ninterface CollectFiltersSetFromRegExps {\n  excludeOperations: SetAndRegExps;\n  excludeParameters: SetAndRegExps;\n  excludeRequestBodies: SetAndRegExps;\n  excludeResponses: SetAndRegExps;\n  excludeSchemas: SetAndRegExps;\n  includeOperations: SetAndRegExps;\n  includeParameters: SetAndRegExps;\n  includeRequestBodies: SetAndRegExps;\n  includeResponses: SetAndRegExps;\n  includeSchemas: SetAndRegExps;\n}\n\nconst collectFiltersSetFromRegExpsOpenApiV2 = ({\n  excludeOperations,\n  excludeSchemas,\n  includeOperations,\n  includeSchemas,\n  spec,\n}: CollectFiltersSetFromRegExps & {\n  spec: OpenApi.V2_0_X;\n}) => {\n  if (\n    (excludeOperations.regexps.length || includeOperations.regexps.length) &&\n    spec.paths\n  ) {\n    for (const entry of Object.entries(spec.paths)) {\n      const path = entry[0] as keyof PathsObject;\n      const pathItem = entry[1] as PathItemObject;\n      for (const method of httpMethods) {\n        const operation = pathItem[method];\n        if (!operation) {\n          continue;\n        }\n\n        const key = createOperationKey({ method, path });\n        if (excludeOperations.regexps.some((regexp) => regexp.test(key))) {\n          excludeOperations.set.add(addNamespace('operation', key));\n        }\n        if (includeOperations.regexps.some((regexp) => regexp.test(key))) {\n          includeOperations.set.add(addNamespace('operation', key));\n        }\n      }\n    }\n  }\n\n  if (spec.definitions) {\n    // TODO: add parameters\n\n    if (excludeSchemas.regexps.length || includeSchemas.regexps.length) {\n      for (const key of Object.keys(spec.definitions)) {\n        if (excludeSchemas.regexps.some((regexp) => regexp.test(key))) {\n          excludeSchemas.set.add(addNamespace('schema', key));\n        }\n        if (includeSchemas.regexps.some((regexp) => regexp.test(key))) {\n          includeSchemas.set.add(addNamespace('schema', key));\n        }\n      }\n    }\n  }\n};\n\nconst collectFiltersSetFromRegExpsOpenApiV3 = ({\n  excludeOperations,\n  excludeParameters,\n  excludeRequestBodies,\n  excludeResponses,\n  excludeSchemas,\n  includeOperations,\n  includeParameters,\n  includeRequestBodies,\n  includeResponses,\n  includeSchemas,\n  spec,\n}: CollectFiltersSetFromRegExps & {\n  spec: OpenApi.V3_0_X | OpenApi.V3_1_X;\n}) => {\n  if (\n    (excludeOperations.regexps.length || includeOperations.regexps.length) &&\n    spec.paths\n  ) {\n    for (const entry of Object.entries(spec.paths)) {\n      const path = entry[0] as keyof PathsObject;\n      const pathItem = entry[1] as PathItemObject;\n      for (const method of httpMethods) {\n        const operation = pathItem[method];\n        if (!operation) {\n          continue;\n        }\n\n        const key = createOperationKey({ method, path });\n        if (excludeOperations.regexps.some((regexp) => regexp.test(key))) {\n          excludeOperations.set.add(addNamespace('operation', key));\n        }\n        if (includeOperations.regexps.some((regexp) => regexp.test(key))) {\n          includeOperations.set.add(addNamespace('operation', key));\n        }\n      }\n    }\n  }\n\n  if (spec.components) {\n    if (\n      (excludeParameters.regexps.length || includeParameters.regexps.length) &&\n      spec.components.parameters\n    ) {\n      for (const key of Object.keys(spec.components.parameters)) {\n        if (excludeParameters.regexps.some((regexp) => regexp.test(key))) {\n          excludeParameters.set.add(addNamespace('parameter', key));\n        }\n        if (includeParameters.regexps.some((regexp) => regexp.test(key))) {\n          includeParameters.set.add(addNamespace('parameter', key));\n        }\n      }\n    }\n\n    if (\n      (excludeRequestBodies.regexps.length ||\n        includeRequestBodies.regexps.length) &&\n      spec.components.requestBodies\n    ) {\n      for (const key of Object.keys(spec.components.requestBodies)) {\n        if (excludeRequestBodies.regexps.some((regexp) => regexp.test(key))) {\n          excludeRequestBodies.set.add(addNamespace('body', key));\n        }\n        if (includeRequestBodies.regexps.some((regexp) => regexp.test(key))) {\n          includeRequestBodies.set.add(addNamespace('body', key));\n        }\n      }\n    }\n\n    if (\n      (excludeResponses.regexps.length || includeResponses.regexps.length) &&\n      spec.components.responses\n    ) {\n      for (const key of Object.keys(spec.components.responses)) {\n        if (excludeResponses.regexps.some((regexp) => regexp.test(key))) {\n          excludeResponses.set.add(addNamespace('response', key));\n        }\n        if (includeResponses.regexps.some((regexp) => regexp.test(key))) {\n          includeResponses.set.add(addNamespace('response', key));\n        }\n      }\n    }\n\n    if (\n      (excludeSchemas.regexps.length || includeSchemas.regexps.length) &&\n      spec.components.schemas\n    ) {\n      for (const key of Object.keys(spec.components.schemas)) {\n        if (excludeSchemas.regexps.some((regexp) => regexp.test(key))) {\n          excludeSchemas.set.add(addNamespace('schema', key));\n        }\n        if (includeSchemas.regexps.some((regexp) => regexp.test(key))) {\n          includeSchemas.set.add(addNamespace('schema', key));\n        }\n      }\n    }\n  }\n};\n\nconst collectFiltersSetFromRegExps = ({\n  spec,\n  ...filters\n}: CollectFiltersSetFromRegExps & {\n  spec: OpenApi.V2_0_X | OpenApi.V3_0_X | OpenApi.V3_1_X;\n}): void => {\n  if ('swagger' in spec) {\n    collectFiltersSetFromRegExpsOpenApiV2({ ...filters, spec });\n  } else {\n    collectFiltersSetFromRegExpsOpenApiV3({ ...filters, spec });\n  }\n};\n\nexport const createFilters = (\n  config: Config['input']['filters'],\n  spec: OpenApi.V2_0_X | OpenApi.V3_0_X | OpenApi.V3_1_X,\n): Filters => {\n  const excludeOperations = createFiltersSetAndRegExps(\n    'operation',\n    config?.operations?.exclude,\n  );\n  const includeOperations = createFiltersSetAndRegExps(\n    'operation',\n    config?.operations?.include,\n  );\n  const excludeParameters = createFiltersSetAndRegExps(\n    'parameter',\n    config?.parameters?.exclude,\n  );\n  const includeParameters = createFiltersSetAndRegExps(\n    'parameter',\n    config?.parameters?.include,\n  );\n  const excludeRequestBodies = createFiltersSetAndRegExps(\n    'body',\n    config?.requestBodies?.exclude,\n  );\n  const includeRequestBodies = createFiltersSetAndRegExps(\n    'body',\n    config?.requestBodies?.include,\n  );\n  const excludeResponses = createFiltersSetAndRegExps(\n    'response',\n    config?.responses?.exclude,\n  );\n  const includeResponses = createFiltersSetAndRegExps(\n    'response',\n    config?.responses?.include,\n  );\n  const excludeSchemas = createFiltersSetAndRegExps(\n    'schema',\n    config?.schemas?.exclude,\n  );\n  const includeSchemas = createFiltersSetAndRegExps(\n    'schema',\n    config?.schemas?.include,\n  );\n\n  collectFiltersSetFromRegExps({\n    excludeOperations,\n    excludeParameters,\n    excludeRequestBodies,\n    excludeResponses,\n    excludeSchemas,\n    includeOperations,\n    includeParameters,\n    includeRequestBodies,\n    includeResponses,\n    includeSchemas,\n    spec,\n  });\n\n  const filters: Filters = {\n    deprecated: config?.deprecated ?? true,\n    operations: {\n      exclude: excludeOperations.set,\n      include: includeOperations.set,\n    },\n    orphans: config?.orphans ?? false,\n    parameters: {\n      exclude: excludeParameters.set,\n      include: includeParameters.set,\n    },\n    preserveOrder: config?.preserveOrder ?? false,\n    requestBodies: {\n      exclude: excludeRequestBodies.set,\n      include: includeRequestBodies.set,\n    },\n    responses: {\n      exclude: excludeResponses.set,\n      include: includeResponses.set,\n    },\n    schemas: {\n      exclude: excludeSchemas.set,\n      include: includeSchemas.set,\n    },\n    tags: {\n      exclude: new Set(config?.tags?.exclude),\n      include: new Set(config?.tags?.include),\n    },\n  };\n  return filters;\n};\n\nexport const hasFilters = (config: Config['input']['filters']): boolean => {\n  if (!config) {\n    return false;\n  }\n\n  // we explicitly want to strip orphans or deprecated\n  if (config.orphans === false || config.deprecated === false) {\n    return true;\n  }\n\n  return Boolean(\n    config.operations?.exclude?.length ||\n      config.operations?.include?.length ||\n      config.parameters?.exclude?.length ||\n      config.parameters?.include?.length ||\n      config.requestBodies?.exclude?.length ||\n      config.requestBodies?.include?.length ||\n      config.responses?.exclude?.length ||\n      config.responses?.include?.length ||\n      config.schemas?.exclude?.length ||\n      config.schemas?.include?.length ||\n      config.tags?.exclude?.length ||\n      config.tags?.include?.length,\n  );\n};\n\n/**\n * Collect operations that satisfy the include/exclude filters and schema dependencies.\n */\nconst collectOperations = ({\n  filters,\n  graph,\n  parameters,\n  requestBodies,\n  responses,\n  schemas,\n}: {\n  filters: Filters;\n  graph: Graph;\n  parameters: Set<string>;\n  requestBodies: Set<string>;\n  responses: Set<string>;\n  schemas: Set<string>;\n}): {\n  operations: Set<string>;\n} => {\n  const finalSet = new Set<string>();\n  const initialSet = filters.operations.include.size\n    ? filters.operations.include\n    : new Set(graph.operations.keys());\n  const stack = [...initialSet];\n  while (stack.length) {\n    const key = stack.pop()!;\n\n    if (filters.operations.exclude.has(key) || finalSet.has(key)) {\n      continue;\n    }\n\n    const node = graph.operations.get(key);\n\n    if (!node) {\n      continue;\n    }\n\n    if (!filters.deprecated && node.deprecated) {\n      continue;\n    }\n\n    if (\n      filters.tags.exclude.size &&\n      node.tags.size &&\n      [...filters.tags.exclude].some((tag) => node.tags.has(tag))\n    ) {\n      continue;\n    }\n\n    if (\n      filters.tags.include.size &&\n      !new Set([...filters.tags.include].filter((tag) => node.tags.has(tag)))\n        .size\n    ) {\n      continue;\n    }\n\n    // skip operation if it references any component not included\n    if (\n      [...node.dependencies].some((dependency) => {\n        const { namespace } = removeNamespace(dependency);\n        switch (namespace) {\n          case 'body':\n            return !requestBodies.has(dependency);\n          case 'parameter':\n            return !parameters.has(dependency);\n          case 'response':\n            return !responses.has(dependency);\n          case 'schema':\n            return !schemas.has(dependency);\n          default:\n            return false;\n        }\n      })\n    ) {\n      continue;\n    }\n\n    finalSet.add(key);\n  }\n  return { operations: finalSet };\n};\n\n/**\n * Collect parameters that satisfy the include/exclude filters and schema dependencies.\n */\nconst collectParameters = ({\n  filters,\n  graph,\n  schemas,\n}: {\n  filters: Filters;\n  graph: Graph;\n  schemas: Set<string>;\n}): {\n  parameters: Set<string>;\n} => {\n  const finalSet = new Set<string>();\n  const initialSet = filters.parameters.include.size\n    ? filters.parameters.include\n    : new Set(graph.parameters.keys());\n  const stack = [...initialSet];\n  while (stack.length) {\n    const key = stack.pop()!;\n\n    if (filters.parameters.exclude.has(key) || finalSet.has(key)) {\n      continue;\n    }\n\n    const node = graph.parameters.get(key);\n\n    if (!node) {\n      continue;\n    }\n\n    if (!filters.deprecated && node.deprecated) {\n      continue;\n    }\n\n    finalSet.add(key);\n\n    if (!node.dependencies.size) {\n      continue;\n    }\n\n    for (const dependency of node.dependencies) {\n      const { namespace } = removeNamespace(dependency);\n      switch (namespace) {\n        case 'body': {\n          if (filters.requestBodies.exclude.has(dependency)) {\n            finalSet.delete(key);\n          } else if (!finalSet.has(dependency)) {\n            stack.push(dependency);\n          }\n          break;\n        }\n        case 'schema': {\n          if (filters.schemas.exclude.has(dependency)) {\n            finalSet.delete(key);\n          } else if (!schemas.has(dependency)) {\n            schemas.add(dependency);\n          }\n          break;\n        }\n      }\n    }\n  }\n  return { parameters: finalSet };\n};\n\n/**\n * Collect request bodies that satisfy the include/exclude filters and schema dependencies.\n */\nconst collectRequestBodies = ({\n  filters,\n  graph,\n  schemas,\n}: {\n  filters: Filters;\n  graph: Graph;\n  schemas: Set<string>;\n}): {\n  requestBodies: Set<string>;\n} => {\n  const finalSet = new Set<string>();\n  const initialSet = filters.requestBodies.include.size\n    ? filters.requestBodies.include\n    : new Set(graph.requestBodies.keys());\n  const stack = [...initialSet];\n  while (stack.length) {\n    const key = stack.pop()!;\n\n    if (filters.requestBodies.exclude.has(key) || finalSet.has(key)) {\n      continue;\n    }\n\n    const node = graph.requestBodies.get(key);\n\n    if (!node) {\n      continue;\n    }\n\n    if (!filters.deprecated && node.deprecated) {\n      continue;\n    }\n\n    finalSet.add(key);\n\n    if (!node.dependencies.size) {\n      continue;\n    }\n\n    for (const dependency of node.dependencies) {\n      const { namespace } = removeNamespace(dependency);\n      switch (namespace) {\n        case 'body': {\n          if (filters.requestBodies.exclude.has(dependency)) {\n            finalSet.delete(key);\n          } else if (!finalSet.has(dependency)) {\n            stack.push(dependency);\n          }\n          break;\n        }\n        case 'schema': {\n          if (filters.schemas.exclude.has(dependency)) {\n            finalSet.delete(key);\n          } else if (!schemas.has(dependency)) {\n            schemas.add(dependency);\n          }\n          break;\n        }\n      }\n    }\n  }\n  return { requestBodies: finalSet };\n};\n\n/**\n * Collect responses that satisfy the include/exclude filters and schema dependencies.\n */\nconst collectResponses = ({\n  filters,\n  graph,\n  schemas,\n}: {\n  filters: Filters;\n  graph: Graph;\n  schemas: Set<string>;\n}): {\n  responses: Set<string>;\n} => {\n  const finalSet = new Set<string>();\n  const initialSet = filters.responses.include.size\n    ? filters.responses.include\n    : new Set(graph.responses.keys());\n  const stack = [...initialSet];\n  while (stack.length) {\n    const key = stack.pop()!;\n\n    if (filters.responses.exclude.has(key) || finalSet.has(key)) {\n      continue;\n    }\n\n    const node = graph.responses.get(key);\n\n    if (!node) {\n      continue;\n    }\n\n    if (!filters.deprecated && node.deprecated) {\n      continue;\n    }\n\n    finalSet.add(key);\n\n    if (!node.dependencies.size) {\n      continue;\n    }\n\n    for (const dependency of node.dependencies) {\n      const { namespace } = removeNamespace(dependency);\n      switch (namespace) {\n        case 'body': {\n          if (filters.requestBodies.exclude.has(dependency)) {\n            finalSet.delete(key);\n          } else if (!finalSet.has(dependency)) {\n            stack.push(dependency);\n          }\n          break;\n        }\n        case 'schema': {\n          if (filters.schemas.exclude.has(dependency)) {\n            finalSet.delete(key);\n          } else if (!schemas.has(dependency)) {\n            schemas.add(dependency);\n          }\n          break;\n        }\n      }\n    }\n  }\n  return { responses: finalSet };\n};\n\n/**\n * Collect schemas that satisfy the include/exclude filters.\n */\nconst collectSchemas = ({\n  filters,\n  graph,\n}: {\n  filters: Filters;\n  graph: Graph;\n}): {\n  schemas: Set<string>;\n} => {\n  const finalSet = new Set<string>();\n  const initialSet = filters.schemas.include.size\n    ? filters.schemas.include\n    : new Set(graph.schemas.keys());\n  const stack = [...initialSet];\n  while (stack.length) {\n    const key = stack.pop()!;\n\n    if (filters.schemas.exclude.has(key) || finalSet.has(key)) {\n      continue;\n    }\n\n    const node = graph.schemas.get(key);\n\n    if (!node) {\n      continue;\n    }\n\n    if (!filters.deprecated && node.deprecated) {\n      continue;\n    }\n\n    finalSet.add(key);\n\n    if (!node.dependencies.size) {\n      continue;\n    }\n\n    for (const dependency of node.dependencies) {\n      const { namespace } = removeNamespace(dependency);\n      switch (namespace) {\n        case 'schema': {\n          if (\n            !finalSet.has(dependency) &&\n            !filters.schemas.exclude.has(dependency)\n          ) {\n            stack.push(dependency);\n          }\n          break;\n        }\n      }\n    }\n  }\n  return { schemas: finalSet };\n};\n\n/**\n * Drop parameters that depend on already excluded parameters.\n */\nconst dropExcludedParameters = ({\n  filters,\n  graph,\n  parameters,\n}: {\n  filters: Filters;\n  graph: Graph;\n  parameters: Set<string>;\n}): void => {\n  if (!filters.parameters.exclude.size) {\n    return;\n  }\n\n  for (const key of parameters) {\n    const node = graph.parameters.get(key);\n\n    if (!node?.dependencies.size) {\n      continue;\n    }\n\n    for (const excludedKey of filters.parameters.exclude) {\n      if (node.dependencies.has(excludedKey)) {\n        parameters.delete(key);\n        break;\n      }\n    }\n  }\n};\n\n/**\n * Drop request bodies that depend on already excluded request bodies.\n */\nconst dropExcludedRequestBodies = ({\n  filters,\n  graph,\n  requestBodies,\n}: {\n  filters: Filters;\n  graph: Graph;\n  requestBodies: Set<string>;\n}): void => {\n  if (!filters.requestBodies.exclude.size) {\n    return;\n  }\n\n  for (const key of requestBodies) {\n    const node = graph.requestBodies.get(key);\n\n    if (!node?.dependencies.size) {\n      continue;\n    }\n\n    for (const excludedKey of filters.requestBodies.exclude) {\n      if (node.dependencies.has(excludedKey)) {\n        requestBodies.delete(key);\n        break;\n      }\n    }\n  }\n};\n\n/**\n * Drop responses that depend on already excluded responses.\n */\nconst dropExcludedResponses = ({\n  filters,\n  graph,\n  responses,\n}: {\n  filters: Filters;\n  graph: Graph;\n  responses: Set<string>;\n}): void => {\n  if (!filters.responses.exclude.size) {\n    return;\n  }\n\n  for (const key of responses) {\n    const node = graph.responses.get(key);\n\n    if (!node?.dependencies.size) {\n      continue;\n    }\n\n    for (const excludedKey of filters.responses.exclude) {\n      if (node.dependencies.has(excludedKey)) {\n        responses.delete(key);\n        break;\n      }\n    }\n  }\n};\n\n/**\n * Drop schemas that depend on already excluded schemas.\n */\nconst dropExcludedSchemas = ({\n  filters,\n  graph,\n  schemas,\n}: {\n  filters: Filters;\n  graph: Graph;\n  schemas: Set<string>;\n}): void => {\n  if (!filters.schemas.exclude.size) {\n    return;\n  }\n\n  for (const key of schemas) {\n    const node = graph.schemas.get(key);\n\n    if (!node?.dependencies.size) {\n      continue;\n    }\n\n    for (const excludedKey of filters.schemas.exclude) {\n      if (node.dependencies.has(excludedKey)) {\n        schemas.delete(key);\n        break;\n      }\n    }\n  }\n};\n\nconst dropOrphans = ({\n  operationDependencies,\n  parameters,\n  requestBodies,\n  responses,\n  schemas,\n}: {\n  operationDependencies: Set<string>;\n  parameters: Set<string>;\n  requestBodies: Set<string>;\n  responses: Set<string>;\n  schemas: Set<string>;\n}) => {\n  for (const key of schemas) {\n    if (!operationDependencies.has(key)) {\n      schemas.delete(key);\n    }\n  }\n  for (const key of parameters) {\n    if (!operationDependencies.has(key)) {\n      parameters.delete(key);\n    }\n  }\n  for (const key of requestBodies) {\n    if (!operationDependencies.has(key)) {\n      requestBodies.delete(key);\n    }\n  }\n  for (const key of responses) {\n    if (!operationDependencies.has(key)) {\n      responses.delete(key);\n    }\n  }\n};\n\nconst collectOperationDependencies = ({\n  graph,\n  operations,\n}: {\n  graph: Graph;\n  operations: Set<string>;\n}): {\n  operationDependencies: Set<string>;\n} => {\n  const finalSet = new Set<string>();\n  const initialSet = new Set(\n    [...operations].flatMap((key) => [\n      ...(graph.operations.get(key)?.dependencies ?? []),\n    ]),\n  );\n  const stack = [...initialSet];\n  while (stack.length) {\n    const key = stack.pop()!;\n\n    if (finalSet.has(key)) {\n      continue;\n    }\n\n    finalSet.add(key);\n\n    const { namespace } = removeNamespace(key);\n    let dependencies: Set<string> | undefined;\n    if (namespace === 'body') {\n      dependencies = graph.requestBodies.get(key)?.dependencies;\n    } else if (namespace === 'operation') {\n      dependencies = graph.operations.get(key)?.dependencies;\n    } else if (namespace === 'parameter') {\n      dependencies = graph.parameters.get(key)?.dependencies;\n    } else if (namespace === 'response') {\n      dependencies = graph.responses.get(key)?.dependencies;\n    } else if (namespace === 'schema') {\n      dependencies = graph.schemas.get(key)?.dependencies;\n    }\n\n    if (!dependencies?.size) {\n      continue;\n    }\n\n    for (const dependency of dependencies) {\n      if (!finalSet.has(dependency)) {\n        stack.push(dependency);\n      }\n    }\n  }\n  return { operationDependencies: finalSet };\n};\n\nexport const createFilteredDependencies = ({\n  filters,\n  graph,\n}: {\n  filters: Filters;\n  graph: Graph;\n}): {\n  operations: Set<string>;\n  parameters: Set<string>;\n  requestBodies: Set<string>;\n  responses: Set<string>;\n  schemas: Set<string>;\n} => {\n  const { schemas } = collectSchemas({ filters, graph });\n  const { parameters } = collectParameters({\n    filters,\n    graph,\n    schemas,\n  });\n  const { requestBodies } = collectRequestBodies({\n    filters,\n    graph,\n    schemas,\n  });\n  const { responses } = collectResponses({\n    filters,\n    graph,\n    schemas,\n  });\n\n  dropExcludedSchemas({ filters, graph, schemas });\n  dropExcludedParameters({ filters, graph, parameters });\n  dropExcludedRequestBodies({ filters, graph, requestBodies });\n  dropExcludedResponses({ filters, graph, responses });\n\n  // collect operations after dropping components\n  const { operations } = collectOperations({\n    filters,\n    graph,\n    parameters,\n    requestBodies,\n    responses,\n    schemas,\n  });\n\n  if (!filters.orphans) {\n    const { operationDependencies } = collectOperationDependencies({\n      graph,\n      operations,\n    });\n    dropOrphans({\n      operationDependencies,\n      parameters,\n      requestBodies,\n      responses,\n      schemas,\n    });\n  }\n\n  return {\n    operations,\n    parameters,\n    requestBodies,\n    responses,\n    schemas,\n  };\n};\n","import type { IR } from '../../../ir/types';\n\nexport const mergeParametersObjects = ({\n  source,\n  target,\n}: {\n  source: IR.ParametersObject | undefined;\n  target: IR.ParametersObject | undefined;\n}): IR.ParametersObject | undefined => {\n  const result = { ...target };\n\n  if (source) {\n    if (source.cookie) {\n      if (result.cookie) {\n        result.cookie = {\n          ...result.cookie,\n          ...source.cookie,\n        };\n      } else {\n        result.cookie = source.cookie;\n      }\n    }\n\n    if (source.header) {\n      if (result.header) {\n        result.header = {\n          ...result.header,\n          ...source.header,\n        };\n      } else {\n        result.header = source.header;\n      }\n    }\n\n    if (source.path) {\n      if (result.path) {\n        result.path = {\n          ...result.path,\n          ...source.path,\n        };\n      } else {\n        result.path = source.path;\n      }\n    }\n\n    if (source.query) {\n      if (result.query) {\n        result.query = {\n          ...result.query,\n          ...source.query,\n        };\n      } else {\n        result.query = source.query;\n      }\n    }\n  }\n\n  if (!Object.keys(result).length) {\n    return;\n  }\n\n  return result;\n};\n","import colors from 'ansi-colors';\n\nimport type { IR } from '../../../ir/types';\n\nexport interface ValidatorIssue {\n  /**\n   * Machine-readable issue code\n   *\n   * @example\n   * 'invalid_type'\n   */\n  code: 'duplicate_key' | 'invalid_type' | 'missing_required_field';\n  /**\n   * Optional additional data.\n   *\n   * @example\n   * 'expectedType'\n   */\n  context?: Record<string, any>;\n  /**\n   * Human-readable issue summary.\n   */\n  message: string;\n  /**\n   * JSONPath-like array to issue location.\n   */\n  path: ReadonlyArray<string | number>;\n  /**\n   * Error severity.\n   */\n  severity: 'error' | 'warning';\n}\n\nexport interface ValidatorResult {\n  issues: ReadonlyArray<ValidatorIssue>;\n  valid: boolean;\n}\n\nconst isSimpleKey = (key: string) => /^[A-Za-z_$][A-Za-z0-9_$]*$/.test(key);\n\nconst formatPath = (path: ReadonlyArray<string | number>): string =>\n  path\n    .map((segment, i) => {\n      if (typeof segment === 'number') {\n        return `[${segment}]`;\n      }\n\n      if (i === 0) {\n        // first segment no dot or brackets\n        return segment;\n      }\n\n      return isSimpleKey(segment)\n        ? `.${segment}`\n        : `['${segment.replace(/\"/g, \"\\\\'\")}']`;\n    })\n    .join('');\n\nconst formatValidatorIssue = (issue: ValidatorIssue): string => {\n  const pathStr = formatPath(issue.path);\n  const level =\n    issue.severity === 'error' ? colors.bold.red : colors.bold.yellow;\n\n  const highlightedMessage = issue.message.replace(/`([^`]+)`/g, (_, code) =>\n    colors.yellow(`\\`${code}\\``),\n  );\n\n  return `${level(`[${issue.severity.toUpperCase()}]`)} ${colors.cyan(pathStr)}: ${highlightedMessage}`;\n};\n\nconst shouldPrint = ({\n  context,\n  issue,\n}: {\n  context: IR.Context;\n  issue: ValidatorIssue;\n}) => {\n  if (context.config.logs.level === 'silent') {\n    return false;\n  }\n\n  if (issue.severity === 'error') {\n    return context.config.logs.level !== 'warn';\n  }\n\n  return true;\n};\n\nexport const handleValidatorResult = ({\n  context,\n  result,\n}: {\n  context: IR.Context;\n  result: ValidatorResult;\n}) => {\n  if (!context.config.input.validate_EXPERIMENTAL) {\n    return;\n  }\n\n  for (const issue of result.issues) {\n    if (shouldPrint({ context, issue })) {\n      console.log(formatValidatorIssue(issue));\n    }\n  }\n\n  if (!result.valid) {\n    process.exit(1);\n  }\n};\n","import { createOperationKey } from '../../../ir/operation';\nimport { addNamespace, removeNamespace } from '../../shared/utils/graph';\nimport { httpMethods } from '../../shared/utils/operation';\nimport type {\n  OpenApiV2_0_X,\n  OperationObject,\n  PathItemObject,\n  PathsObject,\n} from '../types/spec';\n\n/**\n * Replace source spec with filtered version.\n */\nexport const filterSpec = ({\n  operations,\n  preserveOrder,\n  schemas,\n  spec,\n}: {\n  operations: Set<string>;\n  parameters: Set<string>;\n  preserveOrder: boolean;\n  requestBodies: Set<string>;\n  responses: Set<string>;\n  schemas: Set<string>;\n  spec: OpenApiV2_0_X;\n}) => {\n  if (spec.definitions) {\n    const filtered: typeof spec.definitions = {};\n\n    if (preserveOrder) {\n      for (const [name, source] of Object.entries(spec.definitions)) {\n        if (schemas.has(addNamespace('schema', name))) {\n          filtered[name] = source;\n        }\n      }\n    } else {\n      for (const key of schemas) {\n        const { name } = removeNamespace(key);\n        const source = spec.definitions[name];\n        if (source) {\n          filtered[name] = source;\n        }\n      }\n    }\n\n    spec.definitions = filtered;\n  }\n\n  if (spec.paths) {\n    for (const entry of Object.entries(spec.paths)) {\n      const path = entry[0] as keyof PathsObject;\n      const pathItem = entry[1] as PathItemObject;\n\n      for (const method of httpMethods) {\n        // @ts-expect-error\n        const operation = pathItem[method] as OperationObject;\n        if (!operation) {\n          continue;\n        }\n\n        const key = addNamespace(\n          'operation',\n          createOperationKey({ method, path }),\n        );\n        if (!operations.has(key)) {\n          // @ts-expect-error\n          delete pathItem[method];\n        }\n      }\n\n      // remove paths that have no operations left\n      if (!Object.keys(pathItem).length) {\n        delete spec.paths[path];\n      }\n    }\n  }\n};\n","import { createOperationKey } from '../../../ir/operation';\nimport {\n  addNamespace,\n  type Graph,\n  stringToNamespace,\n} from '../../shared/utils/graph';\nimport { httpMethods } from '../../shared/utils/operation';\nimport type {\n  ValidatorIssue,\n  ValidatorResult,\n} from '../../shared/utils/validator';\nimport type {\n  OpenApiV2_0_X,\n  ParameterObject,\n  PathItemObject,\n  PathsObject,\n  ReferenceObject,\n  SchemaObject,\n} from '../types/spec';\n\nconst collectSchemaDependencies = (\n  schema: SchemaObject | ReferenceObject | ParameterObject,\n  dependencies: Set<string>,\n) => {\n  if ('$ref' in schema) {\n    if (schema.$ref) {\n      const parts = schema.$ref.split('/');\n      const type = parts[parts.length - 2];\n      const name = parts[parts.length - 1];\n      if (type && name) {\n        const namespace = stringToNamespace(type);\n        if (namespace === 'unknown') {\n          console.warn(`unsupported type: ${type}`);\n        }\n        dependencies.add(addNamespace(namespace, name));\n      }\n    }\n\n    return;\n  }\n\n  if ('in' in schema) {\n    if (schema.in === 'body') {\n      collectSchemaDependencies(schema.schema, dependencies);\n    }\n    return;\n  }\n\n  if (schema.items && typeof schema.items === 'object') {\n    collectSchemaDependencies(schema.items, dependencies);\n  }\n\n  if (schema.properties) {\n    for (const property of Object.values(schema.properties)) {\n      if (typeof property === 'object') {\n        collectSchemaDependencies(property, dependencies);\n      }\n    }\n  }\n\n  if (schema.allOf) {\n    for (const item of schema.allOf) {\n      collectSchemaDependencies(item, dependencies);\n    }\n  }\n};\n\nexport const createGraph = ({\n  spec,\n  validate,\n}: {\n  spec: OpenApiV2_0_X;\n  validate: boolean;\n}): ValidatorResult & {\n  graph: Graph;\n} => {\n  const graph: Graph = {\n    operations: new Map(),\n    parameters: new Map(),\n    requestBodies: new Map(),\n    responses: new Map(),\n    schemas: new Map(),\n  };\n  const issues: Array<ValidatorIssue> = [];\n  const operationIds = new Map();\n\n  if (spec.definitions) {\n    for (const [key, schema] of Object.entries(spec.definitions)) {\n      const dependencies = new Set<string>();\n      collectSchemaDependencies(schema, dependencies);\n      graph.schemas.set(addNamespace('schema', key), {\n        dependencies,\n        deprecated: false,\n      });\n    }\n  }\n\n  if (spec.parameters) {\n    // TODO: add parameters\n  }\n\n  if (spec.paths) {\n    for (const entry of Object.entries(spec.paths)) {\n      const path = entry[0] as keyof PathsObject;\n      const pathItem = entry[1] as PathItemObject;\n      for (const method of httpMethods) {\n        if (method === 'trace') {\n          continue;\n        }\n\n        const operation = pathItem[method];\n        if (!operation) {\n          continue;\n        }\n\n        const operationKey = createOperationKey({ method, path });\n\n        if (validate && operation.operationId) {\n          if (!operationIds.has(operation.operationId)) {\n            operationIds.set(operation.operationId, operationKey);\n          } else {\n            issues.push({\n              code: 'duplicate_key',\n              context: {\n                key: 'operationId',\n                value: operation.operationId,\n              },\n              message:\n                'Duplicate `operationId` found. Each `operationId` must be unique.',\n              path: ['paths', path, method, 'operationId'],\n              severity: 'error',\n            });\n          }\n        }\n\n        const dependencies = new Set<string>();\n\n        if (operation.responses) {\n          for (const response of Object.values(operation.responses)) {\n            if (!response) {\n              continue;\n            }\n\n            if ('$ref' in response) {\n              collectSchemaDependencies(response, dependencies);\n            } else if (response.schema) {\n              collectSchemaDependencies(response.schema, dependencies);\n            }\n          }\n        }\n\n        if (operation.parameters) {\n          for (const parameter of operation.parameters) {\n            collectSchemaDependencies(parameter, dependencies);\n          }\n        }\n\n        graph.operations.set(addNamespace('operation', operationKey), {\n          dependencies,\n          deprecated: Boolean(operation.deprecated),\n          tags: new Set(operation.tags),\n        });\n      }\n    }\n  }\n\n  return {\n    graph,\n    issues,\n    valid: !issues.some((issue) => issue.severity === 'error'),\n  };\n};\n","const fileLikeRegExp =\n  /^(application\\/(pdf|rtf|msword|vnd\\.(ms-|openxmlformats-officedocument\\.)|zip|x-(7z|tar|rar|zip|iso)|octet-stream|gzip|x-msdownload|json\\+download|xml|x-yaml|x-7z-compressed|x-tar)|text\\/(yaml|css|javascript)|audio\\/(mpeg|wav)|video\\/(mp4|x-matroska)|image\\/(vnd\\.adobe\\.photoshop|svg\\+xml))(; ?charset=[^;]+)?$/i;\nconst jsonMimeRegExp = /^application\\/(.*\\+)?json(;.*)?$/i;\nconst multipartFormDataMimeRegExp = /^multipart\\/form-data(;.*)?$/i;\nconst textMimeRegExp = /^text\\/[a-z0-9.+-]+(;.*)?$/i;\nconst xWwwFormUrlEncodedMimeRegExp =\n  /^application\\/x-www-form-urlencoded(;.*)?$/i;\nconst octetStreamMimeRegExp = /^application\\/octet-stream(;.*)?$/i;\n\nexport type IRMediaType =\n  | 'form-data'\n  | 'json'\n  | 'text'\n  | 'url-search-params'\n  | 'octet-stream';\n\nexport const isMediaTypeFileLike = ({\n  mediaType,\n}: {\n  mediaType: string;\n}): boolean => {\n  fileLikeRegExp.lastIndex = 0;\n  return fileLikeRegExp.test(mediaType);\n};\n\nexport const mediaTypeToIrMediaType = ({\n  mediaType,\n}: {\n  mediaType: string;\n}): IRMediaType | undefined => {\n  jsonMimeRegExp.lastIndex = 0;\n  if (jsonMimeRegExp.test(mediaType)) {\n    return 'json';\n  }\n\n  multipartFormDataMimeRegExp.lastIndex = 0;\n  if (multipartFormDataMimeRegExp.test(mediaType)) {\n    return 'form-data';\n  }\n\n  textMimeRegExp.lastIndex = 0;\n  if (textMimeRegExp.test(mediaType)) {\n    return 'text';\n  }\n\n  xWwwFormUrlEncodedMimeRegExp.lastIndex = 0;\n  if (xWwwFormUrlEncodedMimeRegExp.test(mediaType)) {\n    return 'url-search-params';\n  }\n\n  octetStreamMimeRegExp.lastIndex = 0;\n  if (octetStreamMimeRegExp.test(mediaType)) {\n    return 'octet-stream';\n  }\n};\n","import type { IRMediaType } from '../../../ir/mediaType';\nimport {\n  isMediaTypeFileLike,\n  mediaTypeToIrMediaType,\n} from '../../../ir/mediaType';\nimport type {\n  ReferenceObject,\n  ResponseObject,\n  SchemaObject,\n} from '../types/spec';\n\ninterface Content {\n  mediaType: string;\n  schema: SchemaObject | ReferenceObject | undefined;\n  type: IRMediaType | undefined;\n}\n\nexport const contentToSchema = ({\n  content,\n}: {\n  content: Content;\n}): SchemaObject | undefined => {\n  const { mediaType, schema } = content;\n\n  if (schema && '$ref' in schema) {\n    return {\n      allOf: [{ ...schema }],\n    };\n  }\n\n  if (!schema) {\n    if (isMediaTypeFileLike({ mediaType })) {\n      return {\n        format: 'binary',\n        type: 'string',\n      };\n    }\n    return;\n  }\n\n  if (\n    schema.type === 'string' &&\n    !schema.format &&\n    isMediaTypeFileLike({ mediaType })\n  ) {\n    return {\n      ...schema,\n      format: 'binary',\n    };\n  }\n\n  return schema;\n};\n\nexport const mediaTypeObject = ({\n  mimeTypes,\n  response,\n}: {\n  mimeTypes: ReadonlyArray<string> | undefined;\n  response: Pick<ResponseObject, 'schema'>;\n}): Content | undefined => {\n  // return the first supported MIME type\n  for (const mediaType of mimeTypes ?? []) {\n    return {\n      mediaType,\n      schema: response.schema,\n      type: mediaTypeToIrMediaType({ mediaType }),\n    };\n  }\n};\n","import type { Config } from '../types/config';\nimport type { IR } from './types';\n\nexport const DEFAULT_PAGINATION_KEYWORDS = [\n  'after',\n  'before',\n  'cursor',\n  'offset',\n  'page',\n  'start',\n] as const;\n\nexport function getPaginationKeywordsRegExp({\n  keywords = DEFAULT_PAGINATION_KEYWORDS,\n}: Config['input']['pagination'] = {}): RegExp {\n  if (keywords.length === 0) {\n    keywords = DEFAULT_PAGINATION_KEYWORDS;\n  }\n  const pattern = `^(${keywords.join('|')})$`;\n  return new RegExp(pattern);\n}\n\nexport interface Pagination {\n  in: string;\n  name: string;\n  schema: IR.SchemaObject;\n}\n","import { refToName } from '../../../utils/ref';\n\nexport const discriminatorValues = (\n  $ref: string,\n  mapping?: Record<string, string>,\n): ReadonlyArray<string> => {\n  const values: Array<string> = [];\n\n  for (const name in mapping) {\n    if (mapping[name] === $ref) {\n      values.push(name);\n    }\n  }\n\n  if (!values.length) {\n    return [refToName($ref)];\n  }\n\n  return values;\n};\n","import type { IR } from '../../../ir/types';\nimport { addItemsToSchema } from '../../../ir/utils';\nimport { refToName } from '../../../utils/ref';\nimport type {\n  SchemaState,\n  SchemaType,\n  SchemaWithRequired,\n} from '../../shared/types/schema';\nimport { discriminatorValues } from '../../shared/utils/discriminator';\nimport { mergeSchemaAccessScopes } from '../../shared/utils/schema';\nimport type { SchemaObject } from '../types/spec';\n\nexport const getSchemaType = ({\n  schema,\n}: {\n  schema: SchemaObject;\n}): SchemaType<SchemaObject> | undefined => {\n  if (schema.type) {\n    return schema.type;\n  }\n\n  // infer object based on the presence of properties\n  if (schema.properties) {\n    return 'object';\n  }\n};\n\nconst parseSchemaJsDoc = ({\n  irSchema,\n  schema,\n}: {\n  irSchema: IR.SchemaObject;\n  schema: SchemaObject;\n}) => {\n  if (schema.description) {\n    irSchema.description = schema.description;\n  }\n\n  if (schema.title) {\n    irSchema.title = schema.title;\n  }\n};\n\nconst parseSchemaMeta = ({\n  irSchema,\n  schema,\n  state,\n}: {\n  irSchema: IR.SchemaObject;\n  schema: SchemaObject;\n  state: SchemaState;\n}) => {\n  if (schema.default !== undefined) {\n    irSchema.default = schema.default;\n  }\n\n  if (schema.exclusiveMaximum) {\n    if (schema.maximum !== undefined) {\n      irSchema.exclusiveMaximum = schema.maximum;\n    }\n  } else if (schema.maximum !== undefined) {\n    irSchema.maximum = schema.maximum;\n  }\n\n  if (schema.exclusiveMinimum) {\n    if (schema.minimum !== undefined) {\n      irSchema.exclusiveMinimum = schema.minimum;\n    }\n  } else if (schema.minimum !== undefined) {\n    irSchema.minimum = schema.minimum;\n  }\n\n  if (schema.format) {\n    irSchema.format = schema.format;\n  }\n\n  if (schema.maxItems !== undefined) {\n    irSchema.maxItems = schema.maxItems;\n  }\n\n  if (schema.maxLength !== undefined) {\n    irSchema.maxLength = schema.maxLength;\n  }\n\n  if (schema.minItems !== undefined) {\n    irSchema.minItems = schema.minItems;\n  }\n\n  if (schema.minLength !== undefined) {\n    irSchema.minLength = schema.minLength;\n  }\n\n  if (schema.pattern) {\n    irSchema.pattern = schema.pattern;\n  }\n\n  if (schema.readOnly) {\n    irSchema.accessScope = 'read';\n    irSchema.accessScopes = mergeSchemaAccessScopes(irSchema.accessScopes, [\n      'read',\n    ]);\n  } else if (state.isProperty) {\n    irSchema.accessScopes = mergeSchemaAccessScopes(irSchema.accessScopes, [\n      'both',\n    ]);\n  }\n};\n\nconst parseArray = ({\n  context,\n  irSchema = {},\n  schema,\n  state,\n}: {\n  context: IR.Context;\n  irSchema?: IR.SchemaObject;\n  schema: SchemaObject;\n  state: SchemaState;\n}): IR.SchemaObject => {\n  if (schema.maxItems && schema.maxItems === schema.minItems) {\n    irSchema.type = 'tuple';\n  } else {\n    irSchema.type = 'array';\n  }\n\n  let schemaItems: Array<IR.SchemaObject> = [];\n\n  if (schema.items) {\n    const irItemsSchema = schemaToIrSchema({\n      context,\n      schema: schema.items,\n      state,\n    });\n\n    irSchema.accessScopes = mergeSchemaAccessScopes(\n      irSchema.accessScopes,\n      irItemsSchema.accessScopes,\n    );\n\n    if (\n      !schemaItems.length &&\n      schema.maxItems &&\n      schema.maxItems === schema.minItems\n    ) {\n      schemaItems = Array(schema.maxItems).fill(irItemsSchema);\n    } else {\n      if ('$ref' in schema.items) {\n        schemaItems.push(irItemsSchema);\n      } else {\n        const ofArray = schema.items.allOf;\n        if (ofArray && ofArray.length > 1 && !schema.items['x-nullable']) {\n          // bring composition up to avoid incorrectly nested arrays\n          irSchema = {\n            ...irSchema,\n            ...irItemsSchema,\n          };\n        } else {\n          schemaItems.push(irItemsSchema);\n        }\n      }\n    }\n  }\n\n  irSchema = addItemsToSchema({\n    items: schemaItems,\n    schema: irSchema,\n  });\n\n  return irSchema;\n};\n\nconst parseBoolean = ({\n  irSchema = {},\n}: {\n  context: IR.Context;\n  irSchema?: IR.SchemaObject;\n  schema: SchemaObject;\n  state: SchemaState;\n}): IR.SchemaObject => {\n  irSchema.type = 'boolean';\n\n  return irSchema;\n};\n\nconst parseNumber = ({\n  irSchema = {},\n  schema,\n}: {\n  context: IR.Context;\n  irSchema?: IR.SchemaObject;\n  schema: SchemaWithRequired<SchemaObject, 'type'>;\n  state: SchemaState;\n}): IR.SchemaObject => {\n  irSchema.type = schema.type;\n\n  return irSchema;\n};\n\nconst parseObject = ({\n  context,\n  irSchema = {},\n  schema,\n  state,\n}: {\n  context: IR.Context;\n  irSchema?: IR.SchemaObject;\n  schema: SchemaObject;\n  state: SchemaState;\n}): IR.SchemaObject => {\n  irSchema.type = 'object';\n\n  const schemaProperties: Record<string, IR.SchemaObject> = {};\n\n  for (const name in schema.properties) {\n    const property = schema.properties[name]!;\n    if (typeof property === 'boolean') {\n      // TODO: parser - handle boolean properties\n    } else {\n      const irPropertySchema = schemaToIrSchema({\n        context,\n        schema: property,\n        state: {\n          ...state,\n          isProperty: true,\n        },\n      });\n      irSchema.accessScopes = mergeSchemaAccessScopes(\n        irSchema.accessScopes,\n        irPropertySchema.accessScopes,\n      );\n      schemaProperties[name] = irPropertySchema;\n    }\n  }\n\n  if (Object.keys(schemaProperties).length) {\n    irSchema.properties = schemaProperties;\n  }\n\n  if (schema.additionalProperties === undefined) {\n    if (!irSchema.properties) {\n      irSchema.additionalProperties = {\n        type: 'unknown',\n      };\n    }\n  } else if (typeof schema.additionalProperties === 'boolean') {\n    irSchema.additionalProperties = {\n      type: schema.additionalProperties ? 'unknown' : 'never',\n    };\n  } else {\n    const irAdditionalPropertiesSchema = schemaToIrSchema({\n      context,\n      schema: schema.additionalProperties,\n      state,\n    });\n    irSchema.additionalProperties = irAdditionalPropertiesSchema;\n  }\n\n  if (schema.required) {\n    irSchema.required = schema.required;\n  }\n\n  return irSchema;\n};\n\nconst parseString = ({\n  irSchema = {},\n}: {\n  context: IR.Context;\n  irSchema?: IR.SchemaObject;\n  schema: SchemaObject;\n  state: SchemaState;\n}): IR.SchemaObject => {\n  irSchema.type = 'string';\n\n  return irSchema;\n};\n\nconst initIrSchema = ({\n  schema,\n}: {\n  schema: SchemaObject;\n}): IR.SchemaObject => {\n  const irSchema: IR.SchemaObject = {};\n\n  parseSchemaJsDoc({\n    irSchema,\n    schema,\n  });\n\n  return irSchema;\n};\n\nconst parseAllOf = ({\n  context,\n  schema,\n  state,\n}: {\n  context: IR.Context;\n  schema: SchemaWithRequired<SchemaObject, 'allOf'>;\n  state: SchemaState;\n}): IR.SchemaObject => {\n  let irSchema = initIrSchema({ schema });\n\n  const schemaItems: Array<IR.SchemaObject> = [];\n  const schemaType = getSchemaType({ schema });\n\n  const compositionSchemas = schema.allOf;\n\n  for (const compositionSchema of compositionSchemas) {\n    const irCompositionSchema = schemaToIrSchema({\n      context,\n      schema: compositionSchema,\n      state,\n    });\n\n    irSchema.accessScopes = mergeSchemaAccessScopes(\n      irSchema.accessScopes,\n      irCompositionSchema.accessScopes,\n    );\n\n    if (schema.required) {\n      if (irCompositionSchema.required) {\n        irCompositionSchema.required = [\n          ...irCompositionSchema.required,\n          ...schema.required,\n        ];\n      } else {\n        irCompositionSchema.required = schema.required;\n      }\n    }\n\n    schemaItems.push(irCompositionSchema);\n\n    if (compositionSchema.$ref) {\n      const ref = context.resolveRef<SchemaObject>(compositionSchema.$ref);\n      // `$ref` should be passed from the root `parseSchema()` call\n      if (ref.discriminator && state.$ref) {\n        const values = discriminatorValues(state.$ref);\n        const valueSchemas: ReadonlyArray<IR.SchemaObject> = values.map(\n          (value) => ({\n            const: value,\n            type: 'string',\n          }),\n        );\n        const irDiscriminatorSchema: IR.SchemaObject = {\n          properties: {\n            [ref.discriminator]:\n              valueSchemas.length > 1\n                ? {\n                    items: valueSchemas,\n                    logicalOperator: 'or',\n                  }\n                : valueSchemas[0]!,\n          },\n          type: 'object',\n        };\n        if (ref.required?.includes(ref.discriminator)) {\n          irDiscriminatorSchema.required = [ref.discriminator];\n        }\n        schemaItems.push(irDiscriminatorSchema);\n      }\n\n      if (!state.circularReferenceTracker.has(compositionSchema.$ref)) {\n        const irRefSchema = schemaToIrSchema({\n          context,\n          schema: ref,\n          state: {\n            ...state,\n            $ref: compositionSchema.$ref,\n          },\n        });\n        irSchema.accessScopes = mergeSchemaAccessScopes(\n          irSchema.accessScopes,\n          irRefSchema.accessScopes,\n        );\n      }\n    }\n  }\n\n  if (schemaType === 'object') {\n    const irObjectSchema = parseOneType({\n      context,\n      schema: {\n        ...schema,\n        type: 'object',\n      },\n      state,\n    });\n\n    irSchema.accessScopes = mergeSchemaAccessScopes(\n      irSchema.accessScopes,\n      irObjectSchema.accessScopes,\n    );\n\n    if (irObjectSchema.properties) {\n      for (const requiredProperty of irObjectSchema.required ?? []) {\n        if (!irObjectSchema.properties[requiredProperty]) {\n          for (const compositionSchema of compositionSchemas) {\n            // TODO: parser - this could be probably resolved more accurately\n            const finalCompositionSchema = compositionSchema.$ref\n              ? context.resolveRef<SchemaObject>(compositionSchema.$ref)\n              : compositionSchema;\n\n            if (\n              getSchemaType({ schema: finalCompositionSchema }) === 'object'\n            ) {\n              const irCompositionSchema = parseOneType({\n                context,\n                schema: {\n                  ...finalCompositionSchema,\n                  type: 'object',\n                },\n                state,\n              });\n\n              irSchema.accessScopes = mergeSchemaAccessScopes(\n                irSchema.accessScopes,\n                irCompositionSchema.accessScopes,\n              );\n\n              if (irCompositionSchema.properties?.[requiredProperty]) {\n                irObjectSchema.properties[requiredProperty] =\n                  irCompositionSchema.properties[requiredProperty];\n                break;\n              }\n            }\n          }\n        }\n      }\n      schemaItems.push(irObjectSchema);\n    }\n  }\n\n  irSchema = addItemsToSchema({\n    items: schemaItems,\n    logicalOperator: 'and',\n    mutateSchemaOneItem: true,\n    schema: irSchema,\n  });\n\n  if (schema['x-nullable']) {\n    // nest composition to avoid producing an intersection with null\n    const nestedItems: Array<IR.SchemaObject> = [\n      {\n        type: 'null',\n      },\n    ];\n\n    if (schemaItems.length) {\n      nestedItems.unshift(irSchema);\n    }\n\n    irSchema = {\n      items: nestedItems,\n      logicalOperator: 'or',\n    };\n\n    // TODO: parser - this is a hack to bring back up meta fields\n    // without it, some schemas were missing original deprecated\n    if (nestedItems[0]!.deprecated) {\n      irSchema.deprecated = nestedItems[0]!.deprecated;\n    }\n\n    // TODO: parser - this is a hack to bring back up meta fields\n    // without it, some schemas were missing original description\n    if (nestedItems[0]!.description) {\n      irSchema.description = nestedItems[0]!.description;\n    }\n  }\n\n  return irSchema;\n};\n\nconst parseEnum = ({\n  context,\n  schema,\n  state,\n}: {\n  context: IR.Context;\n  schema: SchemaWithRequired<SchemaObject, 'enum'>;\n  state: SchemaState;\n}): IR.SchemaObject => {\n  let irSchema = initIrSchema({ schema });\n\n  irSchema.type = 'enum';\n\n  const schemaItems: Array<IR.SchemaObject> = [];\n\n  for (const [index, enumValue] of schema.enum.entries()) {\n    const typeOfEnumValue = typeof enumValue;\n    let enumType: SchemaType<SchemaObject> | 'null' | undefined;\n\n    if (\n      typeOfEnumValue === 'string' ||\n      typeOfEnumValue === 'number' ||\n      typeOfEnumValue === 'boolean'\n    ) {\n      enumType = typeOfEnumValue;\n    } else if (typeOfEnumValue === 'object' && Array.isArray(enumValue)) {\n      enumType = 'array';\n    } else if (enumValue === null) {\n      // nullable must be true\n      if (schema['x-nullable']) {\n        enumType = 'null';\n      }\n    } else {\n      console.warn(\n        '🚨',\n        `unhandled \"${typeOfEnumValue}\" typeof value \"${enumValue}\" for enum`,\n        schema.enum,\n      );\n    }\n\n    if (!enumType) {\n      continue;\n    }\n\n    const irTypeSchema = parseOneType({\n      context,\n      schema: {\n        description: schema['x-enum-descriptions']?.[index],\n        title:\n          schema['x-enum-varnames']?.[index] ?? schema['x-enumNames']?.[index],\n        // cast enum to string temporarily\n        type: enumType === 'null' ? 'string' : enumType,\n      },\n      state,\n    });\n\n    irTypeSchema.const = enumValue;\n\n    // cast enum back\n    if (enumType === 'null') {\n      irTypeSchema.type = enumType;\n    }\n\n    if (irTypeSchema.type === 'array') {\n      irTypeSchema.type = 'tuple';\n    }\n\n    irSchema.accessScopes = mergeSchemaAccessScopes(\n      irSchema.accessScopes,\n      irTypeSchema.accessScopes,\n    );\n\n    schemaItems.push(irTypeSchema);\n  }\n\n  irSchema = addItemsToSchema({\n    items: schemaItems,\n    schema: irSchema,\n  });\n\n  return irSchema;\n};\n\nconst parseRef = ({\n  context,\n  schema,\n  state,\n}: {\n  context: IR.Context;\n  schema: SchemaWithRequired<SchemaObject, '$ref'>;\n  state: SchemaState;\n}): IR.SchemaObject => {\n  const irSchema: IR.SchemaObject = {};\n\n  // refs using unicode characters become encoded, didn't investigate why\n  // but the suspicion is this comes from `@hey-api/json-schema-ref-parser`\n  irSchema.$ref = decodeURI(schema.$ref);\n\n  // rewrite definitions refs as the internal schema follows OpenAPI 3.x syntax\n  // and stores all definitions as reusable schemas\n  irSchema.$ref = irSchema.$ref.replace(\n    /#\\/definitions\\/([^/]+)/g,\n    '#/components/schemas/$1',\n  );\n\n  if (!state.circularReferenceTracker.has(schema.$ref)) {\n    const refSchema = context.resolveRef<SchemaObject>(schema.$ref);\n    const irRefSchema = schemaToIrSchema({\n      context,\n      schema: refSchema,\n      state: {\n        ...state,\n        $ref: schema.$ref,\n        isProperty: false,\n      },\n    });\n    irSchema.accessScopes = mergeSchemaAccessScopes(\n      irSchema.accessScopes,\n      irRefSchema.accessScopes,\n    );\n  }\n\n  return irSchema;\n};\n\nconst parseNullableType = ({\n  context,\n  irSchema,\n  schema,\n  state,\n}: {\n  context: IR.Context;\n  irSchema?: IR.SchemaObject;\n  schema: SchemaWithRequired<SchemaObject, 'type'>;\n  state: SchemaState;\n}): IR.SchemaObject => {\n  if (!irSchema) {\n    irSchema = initIrSchema({ schema });\n  }\n\n  const typeIrSchema: IR.SchemaObject = {};\n\n  parseSchemaMeta({\n    irSchema: typeIrSchema,\n    schema,\n    state,\n  });\n\n  if (typeIrSchema.default === null) {\n    // clear to avoid duplicate default inside the non-null schema.\n    // this would produce incorrect validator output\n    delete typeIrSchema.default;\n  }\n\n  const schemaItems: Array<IR.SchemaObject> = [\n    parseOneType({\n      context,\n      irSchema: typeIrSchema,\n      schema,\n      state,\n    }),\n    {\n      type: 'null',\n    },\n  ];\n\n  irSchema = addItemsToSchema({\n    items: schemaItems,\n    schema: irSchema,\n  });\n\n  return irSchema;\n};\n\nconst parseType = ({\n  context,\n  schema,\n  state,\n}: {\n  context: IR.Context;\n  schema: SchemaWithRequired<SchemaObject, 'type'>;\n  state: SchemaState;\n}): IR.SchemaObject => {\n  const irSchema = initIrSchema({ schema });\n\n  parseSchemaMeta({\n    irSchema,\n    schema,\n    state,\n  });\n\n  const type = getSchemaType({ schema });\n\n  if (!type) {\n    return irSchema;\n  }\n\n  if (schema['x-nullable']) {\n    return parseNullableType({\n      context,\n      irSchema,\n      schema: {\n        ...schema,\n        type,\n      },\n      state,\n    });\n  }\n\n  return parseOneType({\n    context,\n    irSchema,\n    schema: {\n      ...schema,\n      type,\n    },\n    state,\n  });\n};\n\nconst parseOneType = ({\n  context,\n  irSchema,\n  schema,\n  state,\n}: {\n  context: IR.Context;\n  irSchema?: IR.SchemaObject;\n  schema: SchemaWithRequired<SchemaObject, 'type'>;\n  state: SchemaState;\n}): IR.SchemaObject => {\n  if (!irSchema) {\n    irSchema = initIrSchema({ schema });\n\n    parseSchemaMeta({\n      irSchema,\n      schema,\n      state,\n    });\n  }\n\n  switch (schema.type) {\n    case 'array':\n      return parseArray({\n        context,\n        irSchema,\n        schema,\n        state,\n      });\n    case 'boolean':\n      return parseBoolean({\n        context,\n        irSchema,\n        schema,\n        state,\n      });\n    case 'integer':\n    case 'number':\n      return parseNumber({\n        context,\n        irSchema,\n        schema,\n        state,\n      });\n    case 'object':\n      return parseObject({\n        context,\n        irSchema,\n        schema,\n        state,\n      });\n    case 'string':\n      return parseString({\n        context,\n        irSchema,\n        schema,\n        state,\n      });\n    default:\n      // gracefully handle invalid type\n      return parseUnknown({\n        context,\n        irSchema,\n        schema,\n        state,\n      });\n  }\n};\n\nconst parseUnknown = ({\n  irSchema,\n  schema,\n  state,\n}: {\n  context: IR.Context;\n  irSchema?: IR.SchemaObject;\n  schema: SchemaObject;\n  state: SchemaState;\n}): IR.SchemaObject => {\n  if (!irSchema) {\n    irSchema = initIrSchema({ schema });\n  }\n\n  irSchema.type = 'unknown';\n\n  parseSchemaMeta({\n    irSchema,\n    schema,\n    state,\n  });\n\n  return irSchema;\n};\n\nexport const schemaToIrSchema = ({\n  context,\n  schema,\n  state,\n}: {\n  context: IR.Context;\n  schema: SchemaObject;\n  state: SchemaState | undefined;\n}): IR.SchemaObject => {\n  if (!state) {\n    state = {\n      circularReferenceTracker: new Set(),\n    };\n  }\n\n  if (state.$ref) {\n    state.circularReferenceTracker.add(state.$ref);\n  }\n\n  if (schema.$ref) {\n    return parseRef({\n      context,\n      schema: schema as SchemaWithRequired<SchemaObject, '$ref'>,\n      state,\n    });\n  }\n\n  if (schema.enum) {\n    return parseEnum({\n      context,\n      schema: schema as SchemaWithRequired<SchemaObject, 'enum'>,\n      state,\n    });\n  }\n\n  if (schema.allOf) {\n    return parseAllOf({\n      context,\n      schema: schema as SchemaWithRequired<SchemaObject, 'allOf'>,\n      state,\n    });\n  }\n\n  // infer object based on the presence of properties\n  if (schema.type || schema.properties) {\n    return parseType({\n      context,\n      schema: schema as SchemaWithRequired<SchemaObject, 'type'>,\n      state,\n    });\n  }\n\n  return parseUnknown({\n    context,\n    schema,\n    state,\n  });\n};\n\nexport const parseSchema = ({\n  $ref,\n  context,\n  schema,\n}: {\n  $ref: string;\n  context: IR.Context;\n  schema: SchemaObject;\n}) => {\n  if (!context.ir.components) {\n    context.ir.components = {};\n  }\n\n  if (!context.ir.components.schemas) {\n    context.ir.components.schemas = {};\n  }\n\n  context.ir.components.schemas[refToName($ref)] = schemaToIrSchema({\n    context,\n    schema,\n    state: {\n      $ref,\n      circularReferenceTracker: new Set(),\n    },\n  });\n};\n","import { getPaginationKeywordsRegExp } from '../../../ir/pagination';\nimport type { IR } from '../../../ir/types';\nimport type { SchemaType } from '../../shared/types/schema';\nimport type { ParameterObject, ReferenceObject } from '../types/spec';\nimport type { SchemaObject } from '../types/spec';\nimport { getSchemaType } from './schema';\n\nconst isPaginationType = (\n  schemaType: SchemaType<SchemaObject> | undefined,\n): boolean =>\n  schemaType === 'boolean' ||\n  schemaType === 'integer' ||\n  schemaType === 'number' ||\n  schemaType === 'string';\n\n// We handle only simple values for now, up to 1 nested field\nexport const paginationField = ({\n  context,\n  name,\n  schema,\n}: {\n  context: IR.Context;\n  name: string;\n  schema:\n    | ParameterObject\n    | SchemaObject\n    | ReferenceObject\n    | {\n        in: undefined;\n      };\n}): boolean | string => {\n  const paginationRegExp = getPaginationKeywordsRegExp(\n    context.config.input.pagination,\n  );\n  if (paginationRegExp.test(name)) {\n    return true;\n  }\n\n  if ('$ref' in schema) {\n    const ref = context.resolveRef<ParameterObject | SchemaObject>(\n      schema.$ref ?? '',\n    );\n\n    if ('in' in ref && ref.in) {\n      const refSchema =\n        'schema' in ref\n          ? ref.schema\n          : {\n              ...ref,\n              in: undefined,\n            };\n\n      return paginationField({\n        context,\n        name,\n        schema: refSchema,\n      });\n    }\n\n    return paginationField({\n      context,\n      name,\n      schema: ref,\n    });\n  }\n\n  if ('in' in schema) {\n    if (!schema.in) {\n      return false;\n    }\n\n    const finalSchema =\n      'schema' in schema\n        ? schema.schema\n        : {\n            ...schema,\n            in: undefined,\n          };\n\n    return paginationField({\n      context,\n      name,\n      schema: finalSchema,\n    });\n  }\n\n  for (const name in schema.properties) {\n    const paginationRegExp = getPaginationKeywordsRegExp(\n      context.config.input.pagination,\n    );\n\n    if (paginationRegExp.test(name)) {\n      const property = schema.properties[name]!;\n\n      if (typeof property !== 'boolean' && !('$ref' in property)) {\n        const schemaType = getSchemaType({ schema: property });\n        // TODO: resolve deeper references\n\n        if (isPaginationType(schemaType)) {\n          return name;\n        }\n      }\n    }\n  }\n\n  for (const allOf of schema.allOf ?? []) {\n    const pagination = paginationField({\n      context,\n      name,\n      schema: allOf,\n    });\n    if (pagination) {\n      return pagination;\n    }\n  }\n\n  return false;\n};\n","import type { IR, IRBodyObject } from '../../../ir/types';\nimport type { State } from '../../shared/types/state';\nimport { operationToId } from '../../shared/utils/operation';\nimport type {\n  OperationObject,\n  ParameterObject,\n  PathItemObject,\n  ResponseObject,\n  SchemaObject,\n  SecuritySchemeObject,\n} from '../types/spec';\nimport { contentToSchema, mediaTypeObject } from './mediaType';\nimport { paginationField } from './pagination';\nimport { schemaToIrSchema } from './schema';\n\ninterface Operation\n  extends Omit<OperationObject, 'parameters'>,\n    Pick<IR.OperationObject, 'parameters'> {\n  requestBody?: OperationObject['parameters'];\n}\n\nconst parseOperationJsDoc = ({\n  irOperation,\n  operation,\n}: {\n  irOperation: IR.OperationObject;\n  operation: Operation;\n}) => {\n  if (operation.deprecated !== undefined) {\n    irOperation.deprecated = operation.deprecated;\n  }\n\n  if (operation.description) {\n    irOperation.description = operation.description;\n  }\n\n  if (operation.summary) {\n    irOperation.summary = operation.summary;\n  }\n\n  if (operation.tags?.length) {\n    irOperation.tags = operation.tags;\n  }\n};\n\nconst initIrOperation = ({\n  context,\n  method,\n  operation,\n  path,\n  state,\n}: Pick<IR.OperationObject, 'method' | 'path'> & {\n  context: IR.Context;\n  operation: Operation;\n  state: State;\n}): IR.OperationObject => {\n  const irOperation: IR.OperationObject = {\n    id: operationToId({\n      context,\n      id: operation.operationId,\n      method,\n      path,\n      state,\n    }),\n    method,\n    path,\n  };\n\n  if (operation.operationId) {\n    irOperation.operationId = operation.operationId;\n  }\n\n  parseOperationJsDoc({\n    irOperation,\n    operation,\n  });\n\n  return irOperation;\n};\n\nconst operationToIrOperation = ({\n  context,\n  method,\n  operation,\n  path,\n  securitySchemesMap,\n  state,\n}: Pick<IR.OperationObject, 'method' | 'path'> & {\n  context: IR.Context;\n  operation: Operation;\n  securitySchemesMap: Map<string, SecuritySchemeObject>;\n  state: State;\n}): IR.OperationObject => {\n  const irOperation = initIrOperation({\n    context,\n    method,\n    operation,\n    path,\n    state,\n  });\n\n  if (operation.parameters) {\n    irOperation.parameters = operation.parameters;\n  }\n\n  let isRequestBodyRequired = false;\n  const requestBodyObject: IRBodyObject = {\n    mediaType: '',\n    schema: {\n      properties: {},\n      required: [],\n      type: 'object',\n    },\n  };\n  const requestBodyObjectRequired: Array<string> = [];\n\n  for (const requestBodyParameter of operation.requestBody ?? []) {\n    const requestBody =\n      '$ref' in requestBodyParameter\n        ? context.resolveRef<ParameterObject>(requestBodyParameter.$ref)\n        : requestBodyParameter;\n    const schema: SchemaObject =\n      requestBody.in === 'body'\n        ? requestBody.schema\n        : {\n            ...requestBody,\n            format: requestBody.type === 'file' ? 'binary' : requestBody.format,\n            required: undefined,\n            type: requestBody.type === 'file' ? 'string' : requestBody.type,\n          };\n    const content = mediaTypeObject({\n      mimeTypes: operation.consumes,\n      response: { schema },\n    });\n\n    if (content) {\n      const pagination = paginationField({\n        context,\n        name: '',\n        schema:\n          content.schema && '$ref' in content.schema\n            ? {\n                allOf: [{ ...content.schema }],\n                description: requestBody.description,\n              }\n            : {\n                description: requestBody.description,\n                ...content.schema,\n              },\n      });\n\n      const irSchema = schemaToIrSchema({\n        context,\n        schema:\n          '$ref' in requestBody\n            ? {\n                allOf: [\n                  {\n                    ...requestBody,\n                    $ref: requestBody.$ref as string,\n                    required: [],\n                    type: 'string',\n                  },\n                ],\n                description: requestBody.description,\n              }\n            : content.schema && '$ref' in content.schema\n              ? {\n                  allOf: [{ ...content.schema }],\n                  description: requestBody.description,\n                }\n              : {\n                  description: requestBody.description,\n                  ...content.schema,\n                },\n        state: undefined,\n      });\n\n      requestBodyObject.mediaType = content.mediaType;\n\n      if (requestBody.in === 'body') {\n        requestBodyObject.schema = irSchema;\n      } else {\n        requestBodyObject.schema.properties![requestBody.name] = irSchema;\n\n        if (requestBody.required) {\n          requestBodyObjectRequired.push(requestBody.name);\n        }\n      }\n\n      if (pagination) {\n        requestBodyObject.pagination = pagination;\n      }\n\n      if (content.type) {\n        requestBodyObject.type = content.type;\n      }\n    }\n\n    if (requestBody.required) {\n      isRequestBodyRequired = true;\n    }\n  }\n\n  if (requestBodyObject.mediaType) {\n    if (requestBodyObjectRequired.length) {\n      requestBodyObject.schema.required = requestBodyObjectRequired;\n    }\n\n    irOperation.body = requestBodyObject;\n\n    if (isRequestBodyRequired) {\n      irOperation.body.required = isRequestBodyRequired;\n    }\n  }\n\n  for (const name in operation.responses) {\n    if (!irOperation.responses) {\n      irOperation.responses = {};\n    }\n\n    const response = operation.responses[name]!;\n    const responseObject =\n      '$ref' in response\n        ? context.resolveRef<ResponseObject>(response.$ref)\n        : response;\n    const content = mediaTypeObject({\n      // assume JSON by default\n      mimeTypes: operation.produces ? operation.produces : ['application/json'],\n      response: responseObject,\n    });\n\n    if (content) {\n      irOperation.responses[name] = {\n        mediaType: content.mediaType,\n        schema: schemaToIrSchema({\n          context,\n          schema: {\n            description: responseObject.description,\n            ...contentToSchema({ content }),\n          },\n          state: undefined,\n        }),\n      };\n    } else {\n      irOperation.responses[name] = {\n        schema: {\n          description: responseObject.description,\n          // TODO: parser - cover all statues with empty response bodies\n          // 1xx, 204, 205, 304\n          type: name === '204' ? 'void' : 'unknown',\n        },\n      };\n    }\n  }\n\n  if (operation.security) {\n    const securitySchemeObjects: Array<IR.SecurityObject> = [];\n\n    for (const securityRequirementObject of operation.security) {\n      for (const name in securityRequirementObject) {\n        const securitySchemeObject = securitySchemesMap.get(name);\n\n        if (!securitySchemeObject) {\n          continue;\n        }\n\n        let irSecuritySchemeObject: IR.SecurityObject | undefined;\n\n        if (securitySchemeObject.type === 'apiKey') {\n          irSecuritySchemeObject = securitySchemeObject;\n        }\n\n        if (securitySchemeObject.type === 'basic') {\n          irSecuritySchemeObject = {\n            description: securitySchemeObject.description,\n            scheme: 'basic',\n            type: 'http',\n          };\n        }\n\n        if (securitySchemeObject.type === 'oauth2') {\n          irSecuritySchemeObject = {\n            description: securitySchemeObject.description,\n            flows: {},\n            type: 'oauth2',\n          };\n\n          switch (securitySchemeObject.flow) {\n            case 'accessCode':\n              irSecuritySchemeObject.flows.authorizationCode = {\n                authorizationUrl: securitySchemeObject.authorizationUrl!,\n                scopes: securitySchemeObject.scopes,\n                tokenUrl: securitySchemeObject.tokenUrl!,\n              };\n              break;\n            case 'application':\n              irSecuritySchemeObject.flows.clientCredentials = {\n                scopes: securitySchemeObject.scopes,\n                tokenUrl: securitySchemeObject.tokenUrl!,\n              };\n              break;\n            case 'implicit':\n              irSecuritySchemeObject.flows.implicit = {\n                authorizationUrl: securitySchemeObject.authorizationUrl!,\n                scopes: securitySchemeObject.scopes,\n              };\n              break;\n            case 'password':\n              irSecuritySchemeObject.flows.password = {\n                scopes: securitySchemeObject.scopes,\n                tokenUrl: securitySchemeObject.tokenUrl!,\n              };\n              break;\n          }\n        }\n\n        if (!irSecuritySchemeObject) {\n          continue;\n        }\n\n        securitySchemeObjects.push(irSecuritySchemeObject);\n      }\n    }\n\n    if (securitySchemeObjects.length) {\n      irOperation.security = securitySchemeObjects;\n    }\n  }\n\n  // TODO: parser - handle servers\n  // qux: operation.servers\n\n  return irOperation;\n};\n\nexport const parseOperation = ({\n  context,\n  method,\n  operation,\n  path,\n  securitySchemesMap,\n  state,\n}: {\n  context: IR.Context;\n  method: Extract<\n    keyof PathItemObject,\n    'delete' | 'get' | 'head' | 'options' | 'patch' | 'post' | 'put' | 'trace'\n  >;\n  operation: Operation;\n  path: keyof IR.PathsObject;\n  securitySchemesMap: Map<string, SecuritySchemeObject>;\n  state: State;\n}) => {\n  if (!context.ir.paths) {\n    context.ir.paths = {};\n  }\n\n  if (!context.ir.paths[path]) {\n    context.ir.paths[path] = {};\n  }\n\n  context.ir.paths[path][method] = operationToIrOperation({\n    context,\n    method,\n    operation,\n    path,\n    securitySchemesMap,\n    state,\n  });\n};\n","import type { IR } from '../../../ir/types';\nimport type {\n  OperationObject,\n  ParameterObject,\n  ReferenceObject,\n  SchemaObject,\n} from '../types/spec';\nimport { paginationField } from './pagination';\nimport { schemaToIrSchema } from './schema';\n\ntype Parameter = Exclude<ParameterObject, { in: 'body' }>;\n\n/**\n * Returns default parameter `explode` based on value of `collectionFormat`.\n */\nconst defaultExplode = (\n  collectionFormat: Parameter['collectionFormat'],\n): boolean => {\n  switch (collectionFormat) {\n    case 'multi':\n      return true;\n    case 'csv':\n    case 'pipes':\n    case 'ssv':\n    case 'tsv':\n    default:\n      return false;\n  }\n};\n\n/**\n * Returns default parameter `style` based on value of `in`.\n */\nconst defaultStyle = (\n  _in: Parameter['in'],\n): Required<IR.ParameterObject>['style'] => {\n  switch (_in) {\n    case 'header':\n    case 'path':\n      return 'simple';\n    case 'query':\n    default:\n      return 'form';\n  }\n};\n\nexport const parametersArrayToObject = ({\n  context,\n  operation,\n  parameters,\n}: {\n  context: IR.Context;\n  operation: OperationObject;\n  parameters?: ReadonlyArray<ParameterObject | ReferenceObject>;\n}): IR.ParametersObject | undefined => {\n  if (!parameters || !Object.keys(parameters).length) {\n    return;\n  }\n\n  const parametersObject: IR.ParametersObject = {};\n\n  for (const parameterOrReference of parameters) {\n    const parameter =\n      '$ref' in parameterOrReference\n        ? context.dereference<ParameterObject>(parameterOrReference)\n        : parameterOrReference;\n\n    // push request body parameters into a separate field\n    if (parameter.in === 'body' || parameter.in === 'formData') {\n      // @ts-expect-error\n      if (!operation.requestBody) {\n        // @ts-expect-error\n        operation.requestBody = [];\n      }\n\n      // @ts-expect-error\n      operation.requestBody.push(parameter);\n      continue;\n    }\n\n    if (!parametersObject[parameter.in]) {\n      parametersObject[parameter.in] = {};\n    }\n\n    // lowercase keys for case insensitive access\n    parametersObject[parameter.in]![parameter.name.toLocaleLowerCase()] =\n      parameterToIrParameter({\n        context,\n        parameter,\n      });\n  }\n\n  return parametersObject;\n};\n\nconst parameterToIrParameter = ({\n  context,\n  parameter,\n}: {\n  context: IR.Context;\n  parameter: Parameter;\n}): IR.ParameterObject => {\n  const schema = parameter;\n\n  const finalSchema: SchemaObject =\n    schema && '$ref' in schema\n      ? {\n          allOf: [\n            {\n              ...schema,\n              $ref: schema.$ref as string,\n              required: Array.isArray(schema.required) ? schema.required : [],\n              type: schema.type as SchemaObject['type'],\n            },\n          ],\n          description: parameter.description,\n        }\n      : {\n          description: parameter.description,\n          ...schema,\n          required: Array.isArray(schema.required) ? schema.required : [],\n          type: schema.type as SchemaObject['type'],\n        };\n\n  const pagination = paginationField({\n    context,\n    name: parameter.name,\n    schema: finalSchema,\n  });\n\n  const style = defaultStyle(parameter.in);\n  const explode = defaultExplode(parameter.collectionFormat);\n  const allowReserved = false;\n\n  const irParameter: IR.ParameterObject = {\n    allowReserved,\n    explode,\n    location: parameter.in as IR.ParameterObject['location'],\n    name: parameter.name,\n    schema: schemaToIrSchema({\n      context,\n      schema: finalSchema,\n      state: undefined,\n    }),\n    style,\n  };\n\n  if (parameter.description) {\n    irParameter.description = parameter.description;\n  }\n\n  if (pagination) {\n    irParameter.pagination = pagination;\n  }\n\n  if (parameter.required) {\n    irParameter.required = parameter.required;\n  }\n\n  return irParameter;\n};\n","import type { IR } from '../../../ir/types';\nimport { parseUrl } from '../../../utils/url';\n\nexport const parseServers = ({ context }: { context: IR.Context }) => {\n  let schemes: ReadonlyArray<string> = context.spec.schemes ?? [];\n  let host = context.spec.host ?? '';\n  const path = context.spec.basePath ?? '';\n\n  if (typeof context.config.input.path === 'string') {\n    const url = parseUrl(context.config.input.path);\n\n    if (!schemes.length) {\n      if (url.protocol) {\n        schemes = [url.protocol] as typeof schemes;\n      }\n    }\n\n    if (!host) {\n      host = `${url.host}${url.port ? `:${url.port}` : ''}`;\n    }\n  }\n\n  if (!schemes.length) {\n    schemes = [''];\n  }\n\n  const servers = schemes\n    .map((scheme) => `${scheme ? `${scheme}://` : ''}${host}${path}`)\n    .filter(Boolean);\n\n  if (servers.length) {\n    context.ir.servers = servers.map((url) => ({\n      url,\n    }));\n  }\n};\n","import type { IR } from '../../../ir/types';\nimport type { State } from '../../shared/types/state';\nimport {\n  createFilteredDependencies,\n  createFilters,\n  hasFilters,\n} from '../../shared/utils/filter';\nimport type { Graph } from '../../shared/utils/graph';\nimport { mergeParametersObjects } from '../../shared/utils/parameter';\nimport { handleValidatorResult } from '../../shared/utils/validator';\nimport type {\n  OpenApiV2_0_X,\n  OperationObject,\n  PathItemObject,\n  PathsObject,\n  SecuritySchemeObject,\n} from '../types/spec';\nimport { filterSpec } from './filter';\nimport { createGraph } from './graph';\nimport { parseOperation } from './operation';\nimport { parametersArrayToObject } from './parameter';\nimport { parseSchema } from './schema';\nimport { parseServers } from './server';\n\ntype PathKeys<T extends keyof PathsObject = keyof PathsObject> =\n  keyof T extends infer K ? (K extends `/${string}` ? K : never) : never;\n\nexport const parseV2_0_X = (context: IR.Context<OpenApiV2_0_X>) => {\n  const shouldFilterSpec = hasFilters(context.config.input.filters);\n\n  let graph: Graph | undefined;\n\n  if (shouldFilterSpec || context.config.input.validate_EXPERIMENTAL) {\n    const result = createGraph({\n      spec: context.spec,\n      validate: Boolean(context.config.input.validate_EXPERIMENTAL),\n    });\n    graph = result.graph;\n    handleValidatorResult({ context, result });\n  }\n\n  if (shouldFilterSpec && graph) {\n    const filters = createFilters(context.config.input.filters, context.spec);\n    const sets = createFilteredDependencies({ filters, graph });\n    filterSpec({\n      ...sets,\n      preserveOrder: filters.preserveOrder,\n      spec: context.spec,\n    });\n  }\n\n  const state: State = {\n    ids: new Map(),\n  };\n  const securitySchemesMap = new Map<string, SecuritySchemeObject>();\n\n  for (const name in context.spec.securityDefinitions) {\n    const securitySchemeObject = context.spec.securityDefinitions[name]!;\n    securitySchemesMap.set(name, securitySchemeObject);\n  }\n\n  if (context.spec.definitions) {\n    for (const name in context.spec.definitions) {\n      const $ref = `#/definitions/${name}`;\n      const schema = context.spec.definitions[name]!;\n\n      parseSchema({\n        $ref,\n        context,\n        schema,\n      });\n    }\n  }\n\n  parseServers({ context });\n\n  for (const path in context.spec.paths) {\n    if (path.startsWith('x-')) {\n      continue;\n    }\n\n    const pathItem = context.spec.paths[path as PathKeys]!;\n\n    const finalPathItem = pathItem.$ref\n      ? {\n          ...context.resolveRef<PathItemObject>(pathItem.$ref),\n          ...pathItem,\n        }\n      : pathItem;\n\n    const commonOperation: OperationObject = {\n      consumes: context.spec.consumes,\n      produces: context.spec.produces,\n      responses: {},\n      security: context.spec.security,\n    };\n    const operationArgs: Omit<Parameters<typeof parseOperation>[0], 'method'> =\n      {\n        context,\n        operation: {\n          ...commonOperation,\n          parameters: parametersArrayToObject({\n            context,\n            operation: commonOperation,\n            parameters: finalPathItem.parameters,\n          }),\n        },\n        path: path as PathKeys,\n        securitySchemesMap,\n        state,\n      };\n\n    if (finalPathItem.delete) {\n      const parameters = mergeParametersObjects({\n        source: parametersArrayToObject({\n          context,\n          operation: finalPathItem.delete,\n          parameters: finalPathItem.delete.parameters,\n        }),\n        target: operationArgs.operation.parameters,\n      });\n      parseOperation({\n        ...operationArgs,\n        method: 'delete',\n        operation: {\n          ...operationArgs.operation,\n          ...finalPathItem.delete,\n          parameters,\n        },\n      });\n    }\n\n    if (finalPathItem.get) {\n      const parameters = mergeParametersObjects({\n        source: parametersArrayToObject({\n          context,\n          operation: finalPathItem.get,\n          parameters: finalPathItem.get.parameters,\n        }),\n        target: operationArgs.operation.parameters,\n      });\n      parseOperation({\n        ...operationArgs,\n        method: 'get',\n        operation: {\n          ...operationArgs.operation,\n          ...finalPathItem.get,\n          parameters,\n        },\n      });\n    }\n\n    if (finalPathItem.head) {\n      const parameters = mergeParametersObjects({\n        source: parametersArrayToObject({\n          context,\n          operation: finalPathItem.head,\n          parameters: finalPathItem.head.parameters,\n        }),\n        target: operationArgs.operation.parameters,\n      });\n      parseOperation({\n        ...operationArgs,\n        method: 'head',\n        operation: {\n          ...operationArgs.operation,\n          ...finalPathItem.head,\n          parameters,\n        },\n      });\n    }\n\n    if (finalPathItem.options) {\n      const parameters = mergeParametersObjects({\n        source: parametersArrayToObject({\n          context,\n          operation: finalPathItem.options,\n          parameters: finalPathItem.options.parameters,\n        }),\n        target: operationArgs.operation.parameters,\n      });\n      parseOperation({\n        ...operationArgs,\n        method: 'options',\n        operation: {\n          ...operationArgs.operation,\n          ...finalPathItem.options,\n          parameters,\n        },\n      });\n    }\n\n    if (finalPathItem.patch) {\n      const parameters = mergeParametersObjects({\n        source: parametersArrayToObject({\n          context,\n          operation: finalPathItem.patch,\n          parameters: finalPathItem.patch.parameters,\n        }),\n        target: operationArgs.operation.parameters,\n      });\n      parseOperation({\n        ...operationArgs,\n        method: 'patch',\n        operation: {\n          ...operationArgs.operation,\n          ...finalPathItem.patch,\n          parameters,\n        },\n      });\n    }\n\n    if (finalPathItem.post) {\n      const parameters = mergeParametersObjects({\n        source: parametersArrayToObject({\n          context,\n          operation: finalPathItem.post,\n          parameters: finalPathItem.post.parameters,\n        }),\n        target: operationArgs.operation.parameters,\n      });\n      parseOperation({\n        ...operationArgs,\n        method: 'post',\n        operation: {\n          ...operationArgs.operation,\n          ...finalPathItem.post,\n          parameters,\n        },\n      });\n    }\n\n    if (finalPathItem.put) {\n      const parameters = mergeParametersObjects({\n        source: parametersArrayToObject({\n          context,\n          operation: finalPathItem.put,\n          parameters: finalPathItem.put.parameters,\n        }),\n        target: operationArgs.operation.parameters,\n      });\n      parseOperation({\n        ...operationArgs,\n        method: 'put',\n        operation: {\n          ...operationArgs.operation,\n          ...finalPathItem.put,\n          parameters,\n        },\n      });\n    }\n  }\n};\n","import { createOperationKey } from '../../../ir/operation';\nimport { addNamespace, removeNamespace } from '../../shared/utils/graph';\nimport { httpMethods } from '../../shared/utils/operation';\nimport type { OpenApiV3_0_X, PathItemObject, PathsObject } from '../types/spec';\n\n/**\n * Replace source spec with filtered version.\n */\nexport const filterSpec = ({\n  operations,\n  parameters,\n  preserveOrder,\n  requestBodies,\n  responses,\n  schemas,\n  spec,\n}: {\n  operations: Set<string>;\n  parameters: Set<string>;\n  preserveOrder: boolean;\n  requestBodies: Set<string>;\n  responses: Set<string>;\n  schemas: Set<string>;\n  spec: OpenApiV3_0_X;\n}) => {\n  if (spec.components) {\n    if (spec.components.parameters) {\n      const filtered: typeof spec.components.parameters = {};\n\n      if (preserveOrder) {\n        for (const [name, source] of Object.entries(\n          spec.components.parameters,\n        )) {\n          if (parameters.has(addNamespace('parameter', name))) {\n            filtered[name] = source;\n          }\n        }\n      } else {\n        for (const key of parameters) {\n          const { name } = removeNamespace(key);\n          const source = spec.components.parameters[name];\n          if (source) {\n            filtered[name] = source;\n          }\n        }\n      }\n\n      spec.components.parameters = filtered;\n    }\n\n    if (spec.components.requestBodies) {\n      const filtered: typeof spec.components.requestBodies = {};\n\n      if (preserveOrder) {\n        for (const [name, source] of Object.entries(\n          spec.components.requestBodies,\n        )) {\n          if (requestBodies.has(addNamespace('body', name))) {\n            filtered[name] = source;\n          }\n        }\n      } else {\n        for (const key of requestBodies) {\n          const { name } = removeNamespace(key);\n          const source = spec.components.requestBodies[name];\n          if (source) {\n            filtered[name] = source;\n          }\n        }\n      }\n\n      spec.components.requestBodies = filtered;\n    }\n\n    if (spec.components.responses) {\n      const filtered: typeof spec.components.responses = {};\n\n      if (preserveOrder) {\n        for (const [name, source] of Object.entries(\n          spec.components.responses,\n        )) {\n          if (responses.has(addNamespace('response', name))) {\n            filtered[name] = source;\n          }\n        }\n      } else {\n        for (const key of responses) {\n          const { name } = removeNamespace(key);\n          const source = spec.components.responses[name];\n          if (source) {\n            filtered[name] = source;\n          }\n        }\n      }\n\n      spec.components.responses = filtered;\n    }\n\n    if (spec.components.schemas) {\n      const filtered: typeof spec.components.schemas = {};\n\n      if (preserveOrder) {\n        for (const [name, source] of Object.entries(spec.components.schemas)) {\n          if (schemas.has(addNamespace('schema', name))) {\n            filtered[name] = source;\n          }\n        }\n      } else {\n        for (const key of schemas) {\n          const { name } = removeNamespace(key);\n          const source = spec.components.schemas[name];\n          if (source) {\n            filtered[name] = source;\n          }\n        }\n      }\n\n      spec.components.schemas = filtered;\n    }\n  }\n\n  if (spec.paths) {\n    for (const entry of Object.entries(spec.paths)) {\n      const path = entry[0] as keyof PathsObject;\n      const pathItem = entry[1] as PathItemObject;\n\n      for (const method of httpMethods) {\n        const operation = pathItem[method];\n        if (!operation) {\n          continue;\n        }\n\n        const key = addNamespace(\n          'operation',\n          createOperationKey({ method, path }),\n        );\n        if (!operations.has(key)) {\n          delete pathItem[method];\n        }\n      }\n\n      // remove paths that have no operations left\n      if (!Object.keys(pathItem).length) {\n        delete spec.paths[path];\n      }\n    }\n  }\n};\n","import { createOperationKey } from '../../../ir/operation';\nimport type { Graph } from '../../shared/utils/graph';\nimport { addNamespace, stringToNamespace } from '../../shared/utils/graph';\nimport { httpMethods } from '../../shared/utils/operation';\nimport type {\n  ValidatorIssue,\n  ValidatorResult,\n} from '../../shared/utils/validator';\nimport type {\n  OpenApiV3_0_X,\n  PathItemObject,\n  PathsObject,\n  ReferenceObject,\n  SchemaObject,\n} from '../types/spec';\n\nconst collectSchemaDependencies = (\n  schema: SchemaObject | ReferenceObject,\n  dependencies: Set<string>,\n) => {\n  if ('$ref' in schema) {\n    if (schema.$ref) {\n      const parts = schema.$ref.split('/');\n      const type = parts[parts.length - 2];\n      const name = parts[parts.length - 1];\n      if (type && name) {\n        const namespace = stringToNamespace(type);\n        if (namespace === 'unknown') {\n          console.warn(`unsupported type: ${type}`);\n        }\n        dependencies.add(addNamespace(namespace, name));\n      }\n    }\n\n    return;\n  }\n\n  if (schema.items && typeof schema.items === 'object') {\n    collectSchemaDependencies(schema.items, dependencies);\n  }\n\n  if (schema.properties) {\n    for (const property of Object.values(schema.properties)) {\n      if (typeof property === 'object') {\n        collectSchemaDependencies(property, dependencies);\n      }\n    }\n  }\n\n  if (\n    schema.additionalProperties &&\n    typeof schema.additionalProperties === 'object'\n  ) {\n    collectSchemaDependencies(schema.additionalProperties, dependencies);\n  }\n\n  if (schema.allOf) {\n    for (const item of schema.allOf) {\n      collectSchemaDependencies(item, dependencies);\n    }\n  }\n\n  if (schema.anyOf) {\n    for (const item of schema.anyOf) {\n      collectSchemaDependencies(item, dependencies);\n    }\n  }\n\n  if (schema.not) {\n    collectSchemaDependencies(schema.not, dependencies);\n  }\n\n  if (schema.oneOf) {\n    for (const item of schema.oneOf) {\n      collectSchemaDependencies(item, dependencies);\n    }\n  }\n};\n\nexport const createGraph = ({\n  spec,\n  validate,\n}: {\n  spec: OpenApiV3_0_X;\n  validate: boolean;\n}): ValidatorResult & {\n  graph: Graph;\n} => {\n  const graph: Graph = {\n    operations: new Map(),\n    parameters: new Map(),\n    requestBodies: new Map(),\n    responses: new Map(),\n    schemas: new Map(),\n  };\n  const issues: Array<ValidatorIssue> = [];\n  const operationIds = new Map();\n\n  if (spec.components) {\n    // TODO: add other components\n    if (spec.components.schemas) {\n      for (const [key, schema] of Object.entries(spec.components.schemas)) {\n        const dependencies = new Set<string>();\n        collectSchemaDependencies(schema, dependencies);\n        graph.schemas.set(addNamespace('schema', key), {\n          dependencies,\n          deprecated:\n            'deprecated' in schema ? Boolean(schema.deprecated) : false,\n        });\n      }\n    }\n\n    if (spec.components.parameters) {\n      for (const [key, parameter] of Object.entries(\n        spec.components.parameters,\n      )) {\n        const dependencies = new Set<string>();\n        if ('$ref' in parameter) {\n          collectSchemaDependencies(parameter, dependencies);\n        } else {\n          if (parameter.schema) {\n            collectSchemaDependencies(parameter.schema, dependencies);\n          }\n\n          if (parameter.content) {\n            for (const media of Object.values(parameter.content)) {\n              if (media.schema) {\n                collectSchemaDependencies(media.schema, dependencies);\n              }\n            }\n          }\n        }\n        graph.parameters.set(addNamespace('parameter', key), {\n          dependencies,\n          deprecated:\n            'deprecated' in parameter ? Boolean(parameter.deprecated) : false,\n        });\n      }\n    }\n\n    if (spec.components.requestBodies) {\n      for (const [key, requestBody] of Object.entries(\n        spec.components.requestBodies,\n      )) {\n        const dependencies = new Set<string>();\n        if ('$ref' in requestBody) {\n          collectSchemaDependencies(requestBody, dependencies);\n        } else {\n          for (const media of Object.values(requestBody.content)) {\n            if (media.schema) {\n              collectSchemaDependencies(media.schema, dependencies);\n            }\n          }\n        }\n        graph.requestBodies.set(addNamespace('body', key), {\n          dependencies,\n          deprecated: false,\n        });\n      }\n    }\n\n    if (spec.components.responses) {\n      for (const [key, response] of Object.entries(spec.components.responses)) {\n        const dependencies = new Set<string>();\n        if ('$ref' in response) {\n          collectSchemaDependencies(response, dependencies);\n        } else {\n          if (response.content) {\n            for (const media of Object.values(response.content)) {\n              if (media.schema) {\n                collectSchemaDependencies(media.schema, dependencies);\n              }\n            }\n          }\n        }\n        graph.responses.set(addNamespace('response', key), {\n          dependencies,\n          deprecated: false,\n        });\n      }\n    }\n  }\n\n  if (spec.paths) {\n    for (const entry of Object.entries(spec.paths)) {\n      const path = entry[0] as keyof PathsObject;\n      const pathItem = entry[1] as PathItemObject;\n      for (const method of httpMethods) {\n        const operation = pathItem[method];\n        if (!operation) {\n          continue;\n        }\n\n        const operationKey = createOperationKey({ method, path });\n\n        if (validate && operation.operationId) {\n          if (!operationIds.has(operation.operationId)) {\n            operationIds.set(operation.operationId, operationKey);\n          } else {\n            issues.push({\n              code: 'duplicate_key',\n              context: {\n                key: 'operationId',\n                value: operation.operationId,\n              },\n              message:\n                'Duplicate `operationId` found. Each `operationId` must be unique.',\n              path: ['paths', path, method, 'operationId'],\n              severity: 'error',\n            });\n          }\n        }\n\n        const dependencies = new Set<string>();\n\n        if (operation.requestBody) {\n          if ('$ref' in operation.requestBody) {\n            collectSchemaDependencies(operation.requestBody, dependencies);\n          } else {\n            for (const media of Object.values(operation.requestBody.content)) {\n              if (media.schema) {\n                collectSchemaDependencies(media.schema, dependencies);\n              }\n            }\n          }\n        }\n\n        if (operation.responses) {\n          for (const response of Object.values(operation.responses)) {\n            if (!response) {\n              continue;\n            }\n\n            if ('$ref' in response) {\n              collectSchemaDependencies(response, dependencies);\n            } else if (response.content) {\n              for (const media of Object.values(response.content)) {\n                if (media.schema) {\n                  collectSchemaDependencies(media.schema, dependencies);\n                }\n              }\n            }\n          }\n        }\n\n        if (operation.parameters) {\n          for (const parameter of operation.parameters) {\n            if ('$ref' in parameter) {\n              collectSchemaDependencies(parameter, dependencies);\n            } else if (parameter.schema) {\n              collectSchemaDependencies(parameter.schema, dependencies);\n            }\n          }\n        }\n\n        graph.operations.set(addNamespace('operation', operationKey), {\n          dependencies,\n          deprecated: Boolean(operation.deprecated),\n          tags: new Set(operation.tags),\n        });\n      }\n    }\n  }\n\n  if (validate) {\n    if (spec.servers) {\n      if (typeof spec.servers !== 'object' || !Array.isArray(spec.servers)) {\n        issues.push({\n          code: 'invalid_type',\n          message: '`servers` must be an array.',\n          path: [],\n          severity: 'error',\n        });\n      }\n\n      for (let index = 0; index < spec.servers.length; index++) {\n        const server = spec.servers[index];\n        if (!server || typeof server !== 'object') {\n          issues.push({\n            code: 'invalid_type',\n            context: {\n              actual: typeof server,\n              expected: 'object',\n            },\n            message: 'Each entry in `servers` must be an object.',\n            path: ['servers', index],\n            severity: 'error',\n          });\n        } else {\n          if (!server.url) {\n            issues.push({\n              code: 'missing_required_field',\n              context: {\n                field: 'url',\n              },\n              message: 'Missing required field `url` in server object.',\n              path: ['servers', index],\n              severity: 'error',\n            });\n          }\n        }\n      }\n    }\n  }\n\n  return {\n    graph,\n    issues,\n    valid: !issues.some((issue) => issue.severity === 'error'),\n  };\n};\n","import type { IRMediaType } from '../../../ir/mediaType';\nimport {\n  isMediaTypeFileLike,\n  mediaTypeToIrMediaType,\n} from '../../../ir/mediaType';\nimport type {\n  MediaTypeObject,\n  ReferenceObject,\n  SchemaObject,\n} from '../types/spec';\n\ninterface Content {\n  mediaType: string;\n  schema: SchemaObject | ReferenceObject | undefined;\n  type: IRMediaType | undefined;\n}\n\nexport const contentToSchema = ({\n  content,\n}: {\n  content: Content;\n}): SchemaObject | undefined => {\n  const { mediaType, schema } = content;\n\n  if (schema && '$ref' in schema) {\n    return {\n      allOf: [{ ...schema }],\n    };\n  }\n\n  if (!schema) {\n    if (isMediaTypeFileLike({ mediaType })) {\n      return {\n        format: 'binary',\n        type: 'string',\n      };\n    }\n    return;\n  }\n\n  if (\n    schema.type === 'string' &&\n    !schema.format &&\n    isMediaTypeFileLike({ mediaType })\n  ) {\n    return {\n      ...schema,\n      format: 'binary',\n    };\n  }\n\n  return schema;\n};\n\nexport const mediaTypeObject = ({\n  content,\n}: {\n  content: Record<string, MediaTypeObject> | undefined;\n}): Content | undefined => {\n  // return the first supported MIME type\n  for (const mediaType in content) {\n    return {\n      mediaType,\n      schema: content[mediaType]!.schema,\n      type: mediaTypeToIrMediaType({ mediaType }),\n    };\n  }\n};\n","import type { IR } from '../../../ir/types';\nimport { addItemsToSchema } from '../../../ir/utils';\nimport { refToName } from '../../../utils/ref';\nimport type {\n  SchemaState,\n  SchemaType,\n  SchemaWithRequired,\n} from '../../shared/types/schema';\nimport { discriminatorValues } from '../../shared/utils/discriminator';\nimport { mergeSchemaAccessScopes } from '../../shared/utils/schema';\nimport type { ReferenceObject, SchemaObject } from '../types/spec';\n\nexport const getSchemaType = ({\n  schema,\n}: {\n  schema: SchemaObject;\n}): SchemaType<SchemaObject> | undefined => {\n  if (schema.type) {\n    return schema.type;\n  }\n\n  // infer object based on the presence of properties\n  if (schema.properties) {\n    return 'object';\n  }\n};\n\nconst parseSchemaJsDoc = ({\n  irSchema,\n  schema,\n}: {\n  irSchema: IR.SchemaObject;\n  schema: SchemaObject;\n}) => {\n  if (schema.deprecated !== undefined) {\n    irSchema.deprecated = schema.deprecated;\n  }\n\n  if (schema.description) {\n    irSchema.description = schema.description;\n  }\n\n  if (schema.title) {\n    irSchema.title = schema.title;\n  }\n};\n\nconst parseSchemaMeta = ({\n  irSchema,\n  schema,\n  state,\n}: {\n  irSchema: IR.SchemaObject;\n  schema: SchemaObject;\n  state: SchemaState;\n}) => {\n  if (schema.default !== undefined) {\n    irSchema.default = schema.default;\n  }\n\n  if (schema.exclusiveMaximum) {\n    if (schema.maximum !== undefined) {\n      irSchema.exclusiveMaximum = schema.maximum;\n    }\n  } else if (schema.maximum !== undefined) {\n    irSchema.maximum = schema.maximum;\n  }\n\n  if (schema.exclusiveMinimum) {\n    if (schema.minimum !== undefined) {\n      irSchema.exclusiveMinimum = schema.minimum;\n    }\n  } else if (schema.minimum !== undefined) {\n    irSchema.minimum = schema.minimum;\n  }\n\n  if (schema.format) {\n    irSchema.format = schema.format;\n  }\n\n  if (schema.maxItems !== undefined) {\n    irSchema.maxItems = schema.maxItems;\n  }\n\n  if (schema.maxLength !== undefined) {\n    irSchema.maxLength = schema.maxLength;\n  }\n\n  if (schema.minItems !== undefined) {\n    irSchema.minItems = schema.minItems;\n  }\n\n  if (schema.minLength !== undefined) {\n    irSchema.minLength = schema.minLength;\n  }\n\n  if (schema.pattern) {\n    irSchema.pattern = schema.pattern;\n  }\n\n  if (schema.readOnly) {\n    irSchema.accessScope = 'read';\n    irSchema.accessScopes = mergeSchemaAccessScopes(irSchema.accessScopes, [\n      'read',\n    ]);\n  } else if (schema.writeOnly) {\n    irSchema.accessScope = 'write';\n    irSchema.accessScopes = mergeSchemaAccessScopes(irSchema.accessScopes, [\n      'write',\n    ]);\n  } else if (state.isProperty) {\n    irSchema.accessScopes = mergeSchemaAccessScopes(irSchema.accessScopes, [\n      'both',\n    ]);\n  }\n};\n\nconst parseArray = ({\n  context,\n  irSchema = {},\n  schema,\n  state,\n}: {\n  context: IR.Context;\n  irSchema?: IR.SchemaObject;\n  schema: SchemaObject;\n  state: SchemaState;\n}): IR.SchemaObject => {\n  if (schema.maxItems && schema.maxItems === schema.minItems) {\n    irSchema.type = 'tuple';\n  } else {\n    irSchema.type = 'array';\n  }\n\n  let schemaItems: Array<IR.SchemaObject> = [];\n\n  if (schema.items) {\n    const irItemsSchema = schemaToIrSchema({\n      context,\n      schema: schema.items,\n      state,\n    });\n\n    irSchema.accessScopes = mergeSchemaAccessScopes(\n      irSchema.accessScopes,\n      irItemsSchema.accessScopes,\n    );\n\n    if (\n      !schemaItems.length &&\n      schema.maxItems &&\n      schema.maxItems === schema.minItems\n    ) {\n      schemaItems = Array(schema.maxItems).fill(irItemsSchema);\n    } else {\n      if ('$ref' in schema.items) {\n        schemaItems.push(irItemsSchema);\n      } else {\n        const ofArray =\n          schema.items.allOf || schema.items.anyOf || schema.items.oneOf;\n        if (ofArray && ofArray.length > 1 && !schema.items.nullable) {\n          // bring composition up to avoid incorrectly nested arrays\n          irSchema = {\n            ...irSchema,\n            ...irItemsSchema,\n          };\n        } else {\n          schemaItems.push(irItemsSchema);\n        }\n      }\n    }\n  }\n\n  irSchema = addItemsToSchema({\n    items: schemaItems,\n    schema: irSchema,\n  });\n\n  return irSchema;\n};\n\nconst parseBoolean = ({\n  irSchema = {},\n}: {\n  context: IR.Context;\n  irSchema?: IR.SchemaObject;\n  schema: SchemaObject;\n  state: SchemaState;\n}): IR.SchemaObject => {\n  irSchema.type = 'boolean';\n\n  return irSchema;\n};\n\nconst parseNumber = ({\n  irSchema = {},\n  schema,\n}: {\n  context: IR.Context;\n  irSchema?: IR.SchemaObject;\n  schema: SchemaWithRequired<SchemaObject, 'type'>;\n  state: SchemaState;\n}): IR.SchemaObject => {\n  irSchema.type = schema.type;\n\n  return irSchema;\n};\n\nconst parseObject = ({\n  context,\n  irSchema = {},\n  schema,\n  state,\n}: {\n  context: IR.Context;\n  irSchema?: IR.SchemaObject;\n  schema: SchemaObject;\n  state: SchemaState;\n}): IR.SchemaObject => {\n  irSchema.type = 'object';\n\n  const schemaProperties: Record<string, IR.SchemaObject> = {};\n\n  for (const name in schema.properties) {\n    const property = schema.properties[name]!;\n    if (typeof property === 'boolean') {\n      // TODO: parser - handle boolean properties\n    } else {\n      const irPropertySchema = schemaToIrSchema({\n        context,\n        schema: property,\n        state: {\n          ...state,\n          isProperty: true,\n        },\n      });\n      irSchema.accessScopes = mergeSchemaAccessScopes(\n        irSchema.accessScopes,\n        irPropertySchema.accessScopes,\n      );\n      schemaProperties[name] = irPropertySchema;\n    }\n  }\n\n  if (Object.keys(schemaProperties).length) {\n    irSchema.properties = schemaProperties;\n  }\n\n  if (schema.additionalProperties === undefined) {\n    if (!irSchema.properties) {\n      irSchema.additionalProperties = {\n        type: 'unknown',\n      };\n    }\n  } else if (typeof schema.additionalProperties === 'boolean') {\n    irSchema.additionalProperties = {\n      type: schema.additionalProperties ? 'unknown' : 'never',\n    };\n  } else {\n    const irAdditionalPropertiesSchema = schemaToIrSchema({\n      context,\n      schema: schema.additionalProperties,\n      state,\n    });\n    irSchema.additionalProperties = irAdditionalPropertiesSchema;\n  }\n\n  if (schema.required) {\n    irSchema.required = schema.required;\n  }\n\n  return irSchema;\n};\n\nconst parseString = ({\n  irSchema = {},\n}: {\n  context: IR.Context;\n  irSchema?: IR.SchemaObject;\n  schema: SchemaObject;\n  state: SchemaState;\n}): IR.SchemaObject => {\n  irSchema.type = 'string';\n\n  return irSchema;\n};\n\nconst initIrSchema = ({\n  schema,\n}: {\n  schema: SchemaObject;\n}): IR.SchemaObject => {\n  const irSchema: IR.SchemaObject = {};\n\n  parseSchemaJsDoc({\n    irSchema,\n    schema,\n  });\n\n  return irSchema;\n};\n\nconst parseAllOf = ({\n  context,\n  schema,\n  state,\n}: {\n  context: IR.Context;\n  schema: SchemaWithRequired<SchemaObject, 'allOf'>;\n  state: SchemaState;\n}): IR.SchemaObject => {\n  let irSchema = initIrSchema({ schema });\n\n  const schemaItems: Array<IR.SchemaObject> = [];\n  const schemaType = getSchemaType({ schema });\n\n  const compositionSchemas = schema.allOf;\n\n  for (const compositionSchema of compositionSchemas) {\n    const irCompositionSchema = schemaToIrSchema({\n      context,\n      schema: compositionSchema,\n      state,\n    });\n\n    irSchema.accessScopes = mergeSchemaAccessScopes(\n      irSchema.accessScopes,\n      irCompositionSchema.accessScopes,\n    );\n\n    if (schema.required) {\n      if (irCompositionSchema.required) {\n        irCompositionSchema.required = [\n          ...irCompositionSchema.required,\n          ...schema.required,\n        ];\n      } else {\n        irCompositionSchema.required = schema.required;\n      }\n    }\n\n    schemaItems.push(irCompositionSchema);\n\n    if ('$ref' in compositionSchema) {\n      const ref = context.resolveRef<SchemaObject>(compositionSchema.$ref);\n      // `$ref` should be passed from the root `parseSchema()` call\n      if (ref.discriminator && state.$ref) {\n        const values = discriminatorValues(\n          state.$ref,\n          ref.discriminator.mapping,\n        );\n        const valueSchemas: ReadonlyArray<IR.SchemaObject> = values.map(\n          (value) => ({\n            const: value,\n            type: 'string',\n          }),\n        );\n        const irDiscriminatorSchema: IR.SchemaObject = {\n          properties: {\n            [ref.discriminator.propertyName]:\n              valueSchemas.length > 1\n                ? {\n                    items: valueSchemas,\n                    logicalOperator: 'or',\n                  }\n                : valueSchemas[0]!,\n          },\n          type: 'object',\n        };\n        if (ref.required?.includes(ref.discriminator.propertyName)) {\n          irDiscriminatorSchema.required = [ref.discriminator.propertyName];\n        }\n        schemaItems.push(irDiscriminatorSchema);\n      }\n\n      if (!state.circularReferenceTracker.has(compositionSchema.$ref)) {\n        const irRefSchema = schemaToIrSchema({\n          context,\n          schema: ref,\n          state: {\n            ...state,\n            $ref: compositionSchema.$ref,\n          },\n        });\n        irSchema.accessScopes = mergeSchemaAccessScopes(\n          irSchema.accessScopes,\n          irRefSchema.accessScopes,\n        );\n      }\n    }\n  }\n\n  if (schemaType === 'object') {\n    const irObjectSchema = parseOneType({\n      context,\n      schema: {\n        ...schema,\n        type: 'object',\n      },\n      state,\n    });\n\n    irSchema.accessScopes = mergeSchemaAccessScopes(\n      irSchema.accessScopes,\n      irObjectSchema.accessScopes,\n    );\n\n    if (irObjectSchema.properties) {\n      for (const requiredProperty of irObjectSchema.required ?? []) {\n        if (!irObjectSchema.properties[requiredProperty]) {\n          for (const compositionSchema of compositionSchemas) {\n            // TODO: parser - this could be probably resolved more accurately\n            const finalCompositionSchema =\n              '$ref' in compositionSchema\n                ? context.resolveRef<SchemaObject>(compositionSchema.$ref)\n                : compositionSchema;\n\n            if (\n              getSchemaType({ schema: finalCompositionSchema }) === 'object'\n            ) {\n              const irCompositionSchema = parseOneType({\n                context,\n                schema: {\n                  ...finalCompositionSchema,\n                  type: 'object',\n                },\n                state,\n              });\n\n              irSchema.accessScopes = mergeSchemaAccessScopes(\n                irSchema.accessScopes,\n                irCompositionSchema.accessScopes,\n              );\n\n              if (irCompositionSchema.properties?.[requiredProperty]) {\n                irObjectSchema.properties[requiredProperty] =\n                  irCompositionSchema.properties[requiredProperty];\n                break;\n              }\n            }\n          }\n        }\n      }\n      schemaItems.push(irObjectSchema);\n    }\n  }\n\n  irSchema = addItemsToSchema({\n    items: schemaItems,\n    logicalOperator: 'and',\n    mutateSchemaOneItem: true,\n    schema: irSchema,\n  });\n\n  if (schema.nullable) {\n    // nest composition to avoid producing an intersection with null\n    const nestedItems: Array<IR.SchemaObject> = [\n      {\n        type: 'null',\n      },\n    ];\n\n    if (schemaItems.length) {\n      nestedItems.unshift(irSchema);\n    }\n\n    irSchema = {\n      items: nestedItems,\n      logicalOperator: 'or',\n    };\n\n    // TODO: parser - this is a hack to bring back up meta fields\n    // without it, some schemas were missing original deprecated\n    if (nestedItems[0]!.deprecated) {\n      irSchema.deprecated = nestedItems[0]!.deprecated;\n    }\n\n    // TODO: parser - this is a hack to bring back up meta fields\n    // without it, some schemas were missing original description\n    if (nestedItems[0]!.description) {\n      irSchema.description = nestedItems[0]!.description;\n    }\n  }\n\n  return irSchema;\n};\n\nconst parseAnyOf = ({\n  context,\n  schema,\n  state,\n}: {\n  context: IR.Context;\n  schema: SchemaWithRequired<SchemaObject, 'anyOf'>;\n  state: SchemaState;\n}): IR.SchemaObject => {\n  let irSchema = initIrSchema({ schema });\n\n  const schemaItems: Array<IR.SchemaObject> = [];\n  const schemaType = getSchemaType({ schema });\n\n  const compositionSchemas = schema.anyOf;\n\n  for (const compositionSchema of compositionSchemas) {\n    let irCompositionSchema = schemaToIrSchema({\n      context,\n      schema: compositionSchema,\n      state,\n    });\n\n    irSchema.accessScopes = mergeSchemaAccessScopes(\n      irSchema.accessScopes,\n      irCompositionSchema.accessScopes,\n    );\n\n    // `$ref` should be defined with discriminators\n    if (schema.discriminator && '$ref' in compositionSchema) {\n      const values = discriminatorValues(\n        compositionSchema.$ref,\n        schema.discriminator.mapping,\n      );\n      const valueSchemas: ReadonlyArray<IR.SchemaObject> = values.map(\n        (value) => ({\n          const: value,\n          type: 'string',\n        }),\n      );\n      const irDiscriminatorSchema: IR.SchemaObject = {\n        properties: {\n          [schema.discriminator.propertyName]:\n            valueSchemas.length > 1\n              ? {\n                  items: valueSchemas,\n                  logicalOperator: 'or',\n                }\n              : valueSchemas[0]!,\n        },\n        type: 'object',\n      };\n      irCompositionSchema = {\n        items: [irDiscriminatorSchema, irCompositionSchema],\n        logicalOperator: 'and',\n      };\n    }\n\n    schemaItems.push(irCompositionSchema);\n  }\n\n  if (schema.nullable) {\n    schemaItems.push({ type: 'null' });\n  }\n\n  irSchema = addItemsToSchema({\n    items: schemaItems,\n    mutateSchemaOneItem: true,\n    schema: irSchema,\n  });\n\n  if (schemaType === 'object') {\n    // nest composition to avoid producing a union with object properties\n    const irObjectSchema = parseOneType({\n      context,\n      schema: {\n        ...schema,\n        type: 'object',\n      },\n      state,\n    });\n\n    irSchema.accessScopes = mergeSchemaAccessScopes(\n      irSchema.accessScopes,\n      irObjectSchema.accessScopes,\n    );\n\n    if (irObjectSchema.properties) {\n      irSchema = {\n        items: [irSchema, irObjectSchema],\n        logicalOperator: 'and',\n      };\n    }\n  }\n\n  return irSchema;\n};\n\nconst parseEnum = ({\n  context,\n  schema,\n  state,\n}: {\n  context: IR.Context;\n  schema: SchemaWithRequired<SchemaObject, 'enum'>;\n  state: SchemaState;\n}): IR.SchemaObject => {\n  let irSchema = initIrSchema({ schema });\n\n  irSchema.type = 'enum';\n\n  const schemaItems: Array<IR.SchemaObject> = [];\n\n  for (const [index, enumValue] of schema.enum.entries()) {\n    const typeOfEnumValue = typeof enumValue;\n    let enumType: SchemaType<SchemaObject> | 'null' | undefined;\n\n    if (\n      typeOfEnumValue === 'string' ||\n      typeOfEnumValue === 'number' ||\n      typeOfEnumValue === 'boolean'\n    ) {\n      enumType = typeOfEnumValue;\n    } else if (typeOfEnumValue === 'object' && Array.isArray(enumValue)) {\n      enumType = 'array';\n    } else if (enumValue === null) {\n      // nullable must be true\n      if (schema.nullable) {\n        enumType = 'null';\n      }\n    } else {\n      console.warn(\n        '🚨',\n        `unhandled \"${typeOfEnumValue}\" typeof value \"${enumValue}\" for enum`,\n        schema.enum,\n      );\n    }\n\n    if (!enumType) {\n      continue;\n    }\n\n    const irTypeSchema = parseOneType({\n      context,\n      schema: {\n        description: schema['x-enum-descriptions']?.[index],\n        title:\n          schema['x-enum-varnames']?.[index] ?? schema['x-enumNames']?.[index],\n        // cast enum to string temporarily\n        type: enumType === 'null' ? 'string' : enumType,\n      },\n      state,\n    });\n\n    irTypeSchema.const = enumValue;\n\n    // cast enum back\n    if (enumType === 'null') {\n      irTypeSchema.type = enumType;\n    }\n\n    if (irTypeSchema.type === 'array') {\n      irTypeSchema.type = 'tuple';\n    }\n\n    irSchema.accessScopes = mergeSchemaAccessScopes(\n      irSchema.accessScopes,\n      irTypeSchema.accessScopes,\n    );\n\n    schemaItems.push(irTypeSchema);\n  }\n\n  irSchema = addItemsToSchema({\n    items: schemaItems,\n    schema: irSchema,\n  });\n\n  return irSchema;\n};\n\nconst parseOneOf = ({\n  context,\n  schema,\n  state,\n}: {\n  context: IR.Context;\n  schema: SchemaWithRequired<SchemaObject, 'oneOf'>;\n  state: SchemaState;\n}): IR.SchemaObject => {\n  let irSchema = initIrSchema({ schema });\n\n  let schemaItems: Array<IR.SchemaObject> = [];\n  const schemaType = getSchemaType({ schema });\n\n  const compositionSchemas = schema.oneOf;\n\n  for (const compositionSchema of compositionSchemas) {\n    let irCompositionSchema = schemaToIrSchema({\n      context,\n      schema: compositionSchema,\n      state,\n    });\n\n    irSchema.accessScopes = mergeSchemaAccessScopes(\n      irSchema.accessScopes,\n      irCompositionSchema.accessScopes,\n    );\n\n    // `$ref` should be defined with discriminators\n    if (schema.discriminator && '$ref' in compositionSchema) {\n      const values = discriminatorValues(\n        compositionSchema.$ref,\n        schema.discriminator.mapping,\n      );\n      const valueSchemas: ReadonlyArray<IR.SchemaObject> = values.map(\n        (value) => ({\n          const: value,\n          type: 'string',\n        }),\n      );\n      const irDiscriminatorSchema: IR.SchemaObject = {\n        properties: {\n          [schema.discriminator.propertyName]:\n            valueSchemas.length > 1\n              ? {\n                  items: valueSchemas,\n                  logicalOperator: 'or',\n                }\n              : valueSchemas[0]!,\n        },\n        required: [schema.discriminator.propertyName],\n        type: 'object',\n      };\n      irCompositionSchema = {\n        items: [irDiscriminatorSchema, irCompositionSchema],\n        logicalOperator: 'and',\n      };\n    }\n\n    // since we know oneOf will be using \"or\" logical operator, if the parsed\n    // composition schema also has an \"or\" operator, we can bring it up\n    // to avoid unnecessary brackets\n    if (\n      irCompositionSchema.logicalOperator === 'or' &&\n      irCompositionSchema.type !== 'array' &&\n      irCompositionSchema.items\n    ) {\n      schemaItems = schemaItems.concat(irCompositionSchema.items);\n    } else {\n      schemaItems.push(irCompositionSchema);\n    }\n  }\n\n  if (schema.nullable) {\n    schemaItems.push({ type: 'null' });\n  }\n\n  irSchema = addItemsToSchema({\n    items: schemaItems,\n    mutateSchemaOneItem: true,\n    schema: irSchema,\n  });\n\n  if (schemaType === 'object') {\n    // nest composition to avoid producing a union with object properties\n    const irObjectSchema = parseOneType({\n      context,\n      schema: {\n        ...schema,\n        type: 'object',\n      },\n      state,\n    });\n\n    irSchema.accessScopes = mergeSchemaAccessScopes(\n      irSchema.accessScopes,\n      irObjectSchema.accessScopes,\n    );\n\n    if (irObjectSchema.properties) {\n      irSchema = {\n        items: [irSchema, irObjectSchema],\n        logicalOperator: 'and',\n      };\n    }\n  }\n\n  return irSchema;\n};\n\nconst parseRef = ({\n  context,\n  schema,\n  state,\n}: {\n  context: IR.Context;\n  schema: ReferenceObject;\n  state: SchemaState;\n}): IR.SchemaObject => {\n  const irSchema: IR.SchemaObject = {};\n\n  // refs using unicode characters become encoded, didn't investigate why\n  // but the suspicion is this comes from `@hey-api/json-schema-ref-parser`\n  irSchema.$ref = decodeURI(schema.$ref);\n\n  if (!state.circularReferenceTracker.has(schema.$ref)) {\n    const refSchema = context.resolveRef<SchemaObject>(schema.$ref);\n    const irRefSchema = schemaToIrSchema({\n      context,\n      schema: refSchema,\n      state: {\n        ...state,\n        $ref: schema.$ref,\n        isProperty: false,\n      },\n    });\n    irSchema.accessScopes = mergeSchemaAccessScopes(\n      irSchema.accessScopes,\n      irRefSchema.accessScopes,\n    );\n  }\n\n  return irSchema;\n};\n\nconst parseNullableType = ({\n  context,\n  irSchema,\n  schema,\n  state,\n}: {\n  context: IR.Context;\n  irSchema?: IR.SchemaObject;\n  schema: SchemaWithRequired<SchemaObject, 'type'>;\n  state: SchemaState;\n}): IR.SchemaObject => {\n  if (!irSchema) {\n    irSchema = initIrSchema({ schema });\n  }\n\n  const typeIrSchema: IR.SchemaObject = {};\n\n  parseSchemaMeta({\n    irSchema: typeIrSchema,\n    schema,\n    state,\n  });\n\n  if (typeIrSchema.default === null) {\n    // clear to avoid duplicate default inside the non-null schema.\n    // this would produce incorrect validator output\n    delete typeIrSchema.default;\n  }\n\n  const schemaItems: Array<IR.SchemaObject> = [\n    parseOneType({\n      context,\n      irSchema: typeIrSchema,\n      schema,\n      state,\n    }),\n    {\n      type: 'null',\n    },\n  ];\n\n  irSchema = addItemsToSchema({\n    items: schemaItems,\n    schema: irSchema,\n  });\n\n  return irSchema;\n};\n\nconst parseType = ({\n  context,\n  schema,\n  state,\n}: {\n  context: IR.Context;\n  schema: SchemaWithRequired<SchemaObject, 'type'>;\n  state: SchemaState;\n}): IR.SchemaObject => {\n  const irSchema = initIrSchema({ schema });\n\n  parseSchemaMeta({\n    irSchema,\n    schema,\n    state,\n  });\n\n  const type = getSchemaType({ schema });\n\n  if (!type) {\n    return irSchema;\n  }\n\n  if (!schema.nullable) {\n    return parseOneType({\n      context,\n      irSchema,\n      schema: {\n        ...schema,\n        type,\n      },\n      state,\n    });\n  }\n\n  return parseNullableType({\n    context,\n    irSchema,\n    schema: {\n      ...schema,\n      type,\n    },\n    state,\n  });\n};\n\nconst parseOneType = ({\n  context,\n  irSchema,\n  schema,\n  state,\n}: {\n  context: IR.Context;\n  irSchema?: IR.SchemaObject;\n  schema: SchemaWithRequired<SchemaObject, 'type'>;\n  state: SchemaState;\n}): IR.SchemaObject => {\n  if (!irSchema) {\n    irSchema = initIrSchema({ schema });\n\n    parseSchemaMeta({\n      irSchema,\n      schema,\n      state,\n    });\n  }\n\n  switch (schema.type) {\n    case 'array':\n      return parseArray({\n        context,\n        irSchema,\n        schema,\n        state,\n      });\n    case 'boolean':\n      return parseBoolean({\n        context,\n        irSchema,\n        schema,\n        state,\n      });\n    case 'integer':\n    case 'number':\n      return parseNumber({\n        context,\n        irSchema,\n        schema,\n        state,\n      });\n    case 'object':\n      return parseObject({\n        context,\n        irSchema,\n        schema,\n        state,\n      });\n    case 'string':\n      return parseString({\n        context,\n        irSchema,\n        schema,\n        state,\n      });\n    default:\n      // gracefully handle invalid type\n      return parseUnknown({\n        context,\n        irSchema,\n        schema,\n        state,\n      });\n  }\n};\n\nconst parseUnknown = ({\n  irSchema,\n  schema,\n  state,\n}: {\n  context: IR.Context;\n  irSchema?: IR.SchemaObject;\n  schema: SchemaObject;\n  state: SchemaState;\n}): IR.SchemaObject => {\n  if (!irSchema) {\n    irSchema = initIrSchema({ schema });\n  }\n\n  irSchema.type = 'unknown';\n\n  parseSchemaMeta({\n    irSchema,\n    schema,\n    state,\n  });\n\n  return irSchema;\n};\n\nexport const schemaToIrSchema = ({\n  context,\n  schema,\n  state,\n}: {\n  context: IR.Context;\n  schema: SchemaObject | ReferenceObject;\n  state: SchemaState | undefined;\n}): IR.SchemaObject => {\n  if (!state) {\n    state = {\n      circularReferenceTracker: new Set(),\n    };\n  }\n\n  if (state.$ref) {\n    state.circularReferenceTracker.add(state.$ref);\n  }\n\n  if ('$ref' in schema) {\n    return parseRef({\n      context,\n      schema,\n      state,\n    });\n  }\n\n  if (schema.enum) {\n    return parseEnum({\n      context,\n      schema: schema as SchemaWithRequired<SchemaObject, 'enum'>,\n      state,\n    });\n  }\n\n  if (schema.allOf) {\n    return parseAllOf({\n      context,\n      schema: schema as SchemaWithRequired<SchemaObject, 'allOf'>,\n      state,\n    });\n  }\n\n  if (schema.anyOf) {\n    return parseAnyOf({\n      context,\n      schema: schema as SchemaWithRequired<SchemaObject, 'anyOf'>,\n      state,\n    });\n  }\n\n  if (schema.oneOf) {\n    return parseOneOf({\n      context,\n      schema: schema as SchemaWithRequired<SchemaObject, 'oneOf'>,\n      state,\n    });\n  }\n\n  // infer object based on the presence of properties\n  if (schema.type || schema.properties) {\n    return parseType({\n      context,\n      schema: schema as SchemaWithRequired<SchemaObject, 'type'>,\n      state,\n    });\n  }\n\n  return parseUnknown({\n    context,\n    schema,\n    state,\n  });\n};\n\nexport const parseSchema = ({\n  $ref,\n  context,\n  schema,\n}: {\n  $ref: string;\n  context: IR.Context;\n  schema: SchemaObject | ReferenceObject;\n}) => {\n  if (!context.ir.components) {\n    context.ir.components = {};\n  }\n\n  if (!context.ir.components.schemas) {\n    context.ir.components.schemas = {};\n  }\n\n  context.ir.components.schemas[refToName($ref)] = schemaToIrSchema({\n    context,\n    schema,\n    state: {\n      $ref,\n      circularReferenceTracker: new Set(),\n    },\n  });\n};\n","import { getPaginationKeywordsRegExp } from '../../../ir/pagination';\nimport type { IR } from '../../../ir/types';\nimport type { SchemaType } from '../../shared/types/schema';\nimport type {\n  ParameterObject,\n  ReferenceObject,\n  RequestBodyObject,\n} from '../types/spec';\nimport type { SchemaObject } from '../types/spec';\nimport { mediaTypeObject } from './mediaType';\nimport { getSchemaType } from './schema';\n\nconst isPaginationType = (\n  schemaType: SchemaType<SchemaObject> | undefined,\n): boolean =>\n  schemaType === 'boolean' ||\n  schemaType === 'integer' ||\n  schemaType === 'number' ||\n  schemaType === 'string';\n\n// We handle only simple values for now, up to 1 nested field\nexport const paginationField = ({\n  context,\n  name,\n  schema,\n}: {\n  context: IR.Context;\n  name: string;\n  schema: SchemaObject | ReferenceObject;\n}): boolean | string => {\n  const paginationRegExp = getPaginationKeywordsRegExp(\n    context.config.input.pagination,\n  );\n  if (paginationRegExp.test(name)) {\n    return true;\n  }\n\n  if ('$ref' in schema) {\n    const ref = context.resolveRef<\n      ParameterObject | RequestBodyObject | SchemaObject\n    >(schema.$ref);\n\n    if ('content' in ref || 'in' in ref) {\n      let refSchema: SchemaObject | ReferenceObject | undefined;\n\n      if ('in' in ref) {\n        refSchema = ref.schema;\n      }\n\n      if (!refSchema) {\n        // parameter or body\n        const content = mediaTypeObject({ content: ref.content });\n        if (content?.schema) {\n          refSchema = content.schema;\n        }\n      }\n\n      if (!refSchema) {\n        return false;\n      }\n\n      return paginationField({\n        context,\n        name,\n        schema: refSchema,\n      });\n    }\n\n    return paginationField({\n      context,\n      name,\n      schema: ref,\n    });\n  }\n\n  for (const name in schema.properties) {\n    const paginationRegExp = getPaginationKeywordsRegExp(\n      context.config.input.pagination,\n    );\n\n    if (paginationRegExp.test(name)) {\n      const property = schema.properties[name]!;\n\n      if (typeof property !== 'boolean' && !('$ref' in property)) {\n        const schemaType = getSchemaType({ schema: property });\n        // TODO: resolve deeper references\n\n        if (isPaginationType(schemaType)) {\n          return name;\n        }\n      }\n    }\n  }\n\n  for (const allOf of schema.allOf ?? []) {\n    const pagination = paginationField({\n      context,\n      name,\n      schema: allOf,\n    });\n    if (pagination) {\n      return pagination;\n    }\n  }\n\n  return false;\n};\n","import type { IR } from '../../../ir/types';\nimport type { State } from '../../shared/types/state';\nimport { operationToId } from '../../shared/utils/operation';\nimport type {\n  OperationObject,\n  PathItemObject,\n  RequestBodyObject,\n  ResponseObject,\n  SecuritySchemeObject,\n} from '../types/spec';\nimport { contentToSchema, mediaTypeObject } from './mediaType';\nimport { paginationField } from './pagination';\nimport { schemaToIrSchema } from './schema';\n\ninterface Operation\n  extends Omit<OperationObject, 'parameters'>,\n    Pick<IR.OperationObject, 'parameters'> {}\n\nconst parseOperationJsDoc = ({\n  irOperation,\n  operation,\n}: {\n  irOperation: IR.OperationObject;\n  operation: Operation;\n}) => {\n  if (operation.deprecated !== undefined) {\n    irOperation.deprecated = operation.deprecated;\n  }\n\n  if (operation.description) {\n    irOperation.description = operation.description;\n  }\n\n  if (operation.summary) {\n    irOperation.summary = operation.summary;\n  }\n\n  if (operation.tags?.length) {\n    irOperation.tags = operation.tags;\n  }\n};\n\nconst initIrOperation = ({\n  context,\n  method,\n  operation,\n  path,\n  state,\n}: Pick<IR.OperationObject, 'method' | 'path'> & {\n  context: IR.Context;\n  operation: Operation;\n  state: State;\n}): IR.OperationObject => {\n  const irOperation: IR.OperationObject = {\n    id: operationToId({\n      context,\n      id: operation.operationId,\n      method,\n      path,\n      state,\n    }),\n    method,\n    path,\n  };\n\n  if (operation.operationId) {\n    irOperation.operationId = operation.operationId;\n  }\n\n  parseOperationJsDoc({\n    irOperation,\n    operation,\n  });\n\n  return irOperation;\n};\n\nconst operationToIrOperation = ({\n  context,\n  method,\n  operation,\n  path,\n  securitySchemesMap,\n  state,\n}: Pick<IR.OperationObject, 'method' | 'path'> & {\n  context: IR.Context;\n  operation: Operation;\n  securitySchemesMap: Map<string, SecuritySchemeObject>;\n  state: State;\n}): IR.OperationObject => {\n  const irOperation = initIrOperation({\n    context,\n    method,\n    operation,\n    path,\n    state,\n  });\n\n  if (operation.parameters) {\n    irOperation.parameters = operation.parameters;\n  }\n\n  if (operation.requestBody) {\n    const requestBody =\n      '$ref' in operation.requestBody\n        ? context.resolveRef<RequestBodyObject>(operation.requestBody.$ref)\n        : operation.requestBody;\n    const content = mediaTypeObject({\n      content: requestBody.content,\n    });\n    if (content) {\n      const pagination = paginationField({\n        context,\n        name: '',\n        schema:\n          content.schema && '$ref' in content.schema\n            ? {\n                allOf: [{ ...content.schema }],\n                description: requestBody.description,\n              }\n            : {\n                description: requestBody.description,\n                ...content.schema,\n              },\n      });\n\n      irOperation.body = {\n        mediaType: content.mediaType,\n        schema: schemaToIrSchema({\n          context,\n          schema:\n            '$ref' in operation.requestBody\n              ? {\n                  allOf: [{ ...operation.requestBody }],\n                  description: requestBody.description,\n                }\n              : content.schema && '$ref' in content.schema\n                ? {\n                    allOf: [{ ...content.schema }],\n                    description: requestBody.description,\n                  }\n                : {\n                    description: requestBody.description,\n                    ...content.schema,\n                  },\n          state: undefined,\n        }),\n      };\n\n      if (pagination) {\n        irOperation.body.pagination = pagination;\n      }\n\n      if (requestBody.required) {\n        irOperation.body.required = requestBody.required;\n      }\n\n      if (content.type) {\n        irOperation.body.type = content.type;\n      }\n    }\n  }\n\n  for (const name in operation.responses) {\n    if (!irOperation.responses) {\n      irOperation.responses = {};\n    }\n\n    const response = operation.responses[name]!;\n    const responseObject =\n      '$ref' in response\n        ? context.resolveRef<ResponseObject>(response.$ref)\n        : response;\n    const content = mediaTypeObject({\n      content: responseObject.content,\n    });\n\n    if (content) {\n      irOperation.responses[name] = {\n        mediaType: content.mediaType,\n        schema: schemaToIrSchema({\n          context,\n          schema: {\n            description: responseObject.description,\n            ...contentToSchema({ content }),\n          },\n          state: undefined,\n        }),\n      };\n    } else {\n      irOperation.responses[name] = {\n        schema: {\n          description: responseObject.description,\n          // TODO: parser - cover all statues with empty response bodies\n          // 1xx, 204, 205, 304\n          type: name === '204' ? 'void' : 'unknown',\n        },\n      };\n    }\n  }\n\n  if (operation.security) {\n    const securitySchemeObjects: Array<IR.SecurityObject> = [];\n\n    for (const securityRequirementObject of operation.security) {\n      for (const name in securityRequirementObject) {\n        const securitySchemeObject = securitySchemesMap.get(name);\n\n        if (!securitySchemeObject) {\n          continue;\n        }\n\n        securitySchemeObjects.push(securitySchemeObject);\n      }\n    }\n\n    if (securitySchemeObjects.length) {\n      irOperation.security = securitySchemeObjects;\n    }\n  }\n\n  // TODO: parser - handle servers\n  // qux: operation.servers\n\n  return irOperation;\n};\n\nexport const parseOperation = ({\n  context,\n  method,\n  operation,\n  path,\n  securitySchemesMap,\n  state,\n}: {\n  context: IR.Context;\n  method: Extract<\n    keyof PathItemObject,\n    'delete' | 'get' | 'head' | 'options' | 'patch' | 'post' | 'put' | 'trace'\n  >;\n  operation: Operation;\n  path: keyof IR.PathsObject;\n  securitySchemesMap: Map<string, SecuritySchemeObject>;\n  state: State;\n}) => {\n  if (!context.ir.paths) {\n    context.ir.paths = {};\n  }\n\n  if (!context.ir.paths[path]) {\n    context.ir.paths[path] = {};\n  }\n\n  if (operation.servers) {\n    context.ir.servers = [...(context.ir.servers ?? []), ...operation.servers];\n  }\n\n  context.ir.paths[path][method] = operationToIrOperation({\n    context,\n    method,\n    operation,\n    path,\n    securitySchemesMap,\n    state,\n  });\n};\n","import type { IR } from '../../../ir/types';\nimport { refToName } from '../../../utils/ref';\nimport type {\n  ParameterObject,\n  ReferenceObject,\n  SchemaObject,\n} from '../types/spec';\nimport { mediaTypeObject } from './mediaType';\nimport { paginationField } from './pagination';\nimport { schemaToIrSchema } from './schema';\n\n/**\n * Returns default parameter `allowReserved` based on value of `in`.\n */\nconst defaultAllowReserved = (\n  _in: ParameterObject['in'],\n): boolean | undefined => {\n  switch (_in) {\n    // this keyword only applies to parameters with an `in` value of `query`\n    case 'query':\n      return false;\n    default:\n      return;\n  }\n};\n\n/**\n * Returns default parameter `explode` based on value of `style`.\n */\nconst defaultExplode = (style: Required<ParameterObject>['style']): boolean => {\n  switch (style) {\n    // default value for `deepObject` is `false`, but that behavior is undefined\n    // so we use `true` to make this work with the `client-fetch` package\n    case 'deepObject':\n    case 'form':\n      return true;\n    default:\n      return false;\n  }\n};\n\n/**\n * Returns default parameter `style` based on value of `in`.\n */\nconst defaultStyle = (\n  _in: ParameterObject['in'],\n): Required<IR.ParameterObject>['style'] => {\n  switch (_in) {\n    case 'header':\n    case 'path':\n      return 'simple';\n    case 'cookie':\n    case 'query':\n      return 'form';\n  }\n};\n\nexport const parametersArrayToObject = ({\n  context,\n  parameters,\n}: {\n  context: IR.Context;\n  parameters?: ReadonlyArray<ParameterObject | ReferenceObject>;\n}): IR.ParametersObject | undefined => {\n  if (!parameters || !Object.keys(parameters).length) {\n    return;\n  }\n\n  const parametersObject: IR.ParametersObject = {};\n\n  for (const parameterOrReference of parameters) {\n    const parameter =\n      '$ref' in parameterOrReference\n        ? context.dereference<ParameterObject>(parameterOrReference)\n        : parameterOrReference;\n\n    if (!parametersObject[parameter.in]) {\n      parametersObject[parameter.in] = {};\n    }\n\n    // lowercase keys for case insensitive access\n    parametersObject[parameter.in]![parameter.name.toLocaleLowerCase()] =\n      parameterToIrParameter({\n        context,\n        parameter,\n      });\n  }\n\n  return parametersObject;\n};\n\nconst parameterToIrParameter = ({\n  context,\n  parameter,\n}: {\n  context: IR.Context;\n  parameter: ParameterObject;\n}): IR.ParameterObject => {\n  // TODO: parser - fix\n  let schema = parameter.schema;\n\n  if (!schema) {\n    const content = mediaTypeObject({\n      content: parameter.content,\n    });\n    if (content) {\n      schema = content.schema;\n    }\n  }\n\n  const finalSchema: SchemaObject =\n    schema && '$ref' in schema\n      ? {\n          allOf: [{ ...schema }],\n          deprecated: parameter.deprecated,\n          description: parameter.description,\n        }\n      : {\n          deprecated: parameter.deprecated,\n          description: parameter.description,\n          ...schema,\n        };\n\n  const pagination = paginationField({\n    context,\n    name: parameter.name,\n    schema: finalSchema,\n  });\n\n  const style = parameter.style || defaultStyle(parameter.in);\n  const explode =\n    parameter.explode !== undefined ? parameter.explode : defaultExplode(style);\n  const allowReserved =\n    parameter.allowReserved !== undefined\n      ? parameter.allowReserved\n      : defaultAllowReserved(parameter.in);\n\n  const irParameter: IR.ParameterObject = {\n    allowReserved,\n    explode,\n    location: parameter.in,\n    name: parameter.name,\n    schema: schemaToIrSchema({\n      context,\n      schema: finalSchema,\n      state: undefined,\n    }),\n    style,\n  };\n\n  if (parameter.deprecated) {\n    irParameter.deprecated = parameter.deprecated;\n  }\n\n  if (parameter.description) {\n    irParameter.description = parameter.description;\n  }\n\n  if (pagination) {\n    irParameter.pagination = pagination;\n  }\n\n  if (parameter.required) {\n    irParameter.required = parameter.required;\n  }\n\n  return irParameter;\n};\n\nexport const parseParameter = ({\n  $ref,\n  context,\n  parameter,\n}: {\n  $ref: string;\n  context: IR.Context;\n  parameter: ParameterObject;\n}) => {\n  if (!context.ir.components) {\n    context.ir.components = {};\n  }\n\n  if (!context.ir.components.parameters) {\n    context.ir.components.parameters = {};\n  }\n\n  context.ir.components.parameters[refToName($ref)] = parameterToIrParameter({\n    context,\n    parameter,\n  });\n};\n","import type { IR } from '../../../ir/types';\nimport { refToName } from '../../../utils/ref';\nimport type { RequestBodyObject, SchemaObject } from '../types/spec';\nimport { mediaTypeObject } from './mediaType';\nimport { schemaToIrSchema } from './schema';\n\nconst requestBodyToIrRequestBody = ({\n  context,\n  requestBody,\n}: {\n  context: IR.Context;\n  requestBody: RequestBodyObject;\n}): IR.RequestBodyObject => {\n  // TODO: parser - fix\n  const content = mediaTypeObject({\n    content: requestBody.content,\n  });\n  const schema = content ? content.schema : undefined;\n\n  const finalSchema: SchemaObject = {\n    description: requestBody.description,\n    ...schema,\n  };\n\n  const irRequestBody: IR.RequestBodyObject = {\n    schema: schemaToIrSchema({\n      context,\n      schema: finalSchema,\n      state: undefined,\n    }),\n  };\n\n  if (requestBody.description) {\n    irRequestBody.description = requestBody.description;\n  }\n\n  if (requestBody.required) {\n    irRequestBody.required = requestBody.required;\n  }\n\n  return irRequestBody;\n};\n\nexport const parseRequestBody = ({\n  $ref,\n  context,\n  requestBody,\n}: {\n  $ref: string;\n  context: IR.Context;\n  requestBody: RequestBodyObject;\n}) => {\n  if (!context.ir.components) {\n    context.ir.components = {};\n  }\n\n  if (!context.ir.components.requestBodies) {\n    context.ir.components.requestBodies = {};\n  }\n\n  context.ir.components.requestBodies[refToName($ref)] =\n    requestBodyToIrRequestBody({\n      context,\n      requestBody,\n    });\n};\n","import type { IR } from '../../../ir/types';\nimport { parseUrl } from '../../../utils/url';\n\nexport const parseServers = ({ context }: { context: IR.Context }) => {\n  if (context.spec.servers) {\n    context.ir.servers = context.spec.servers;\n    return;\n  }\n\n  if (typeof context.config.input.path === 'string') {\n    const url = parseUrl(context.config.input.path);\n    context.ir.servers = [\n      {\n        url: `${url.protocol ? `${url.protocol}://` : ''}${url.host}${url.port ? `:${url.port}` : ''}`,\n      },\n    ];\n  }\n\n  if (!context.ir.servers) {\n    context.ir.servers = [\n      {\n        url: '/',\n      },\n    ];\n  }\n};\n","import type { IR } from '../../../ir/types';\nimport type { State } from '../../shared/types/state';\nimport {\n  createFilteredDependencies,\n  createFilters,\n  hasFilters,\n} from '../../shared/utils/filter';\nimport type { Graph } from '../../shared/utils/graph';\nimport { mergeParametersObjects } from '../../shared/utils/parameter';\nimport { handleValidatorResult } from '../../shared/utils/validator';\nimport type {\n  OpenApiV3_0_X,\n  ParameterObject,\n  PathItemObject,\n  PathsObject,\n  RequestBodyObject,\n  SecuritySchemeObject,\n} from '../types/spec';\nimport { filterSpec } from './filter';\nimport { createGraph } from './graph';\nimport { parseOperation } from './operation';\nimport { parametersArrayToObject, parseParameter } from './parameter';\nimport { parseRequestBody } from './requestBody';\nimport { parseSchema } from './schema';\nimport { parseServers } from './server';\n\nexport const parseV3_0_X = (context: IR.Context<OpenApiV3_0_X>) => {\n  const shouldFilterSpec = hasFilters(context.config.input.filters);\n\n  let graph: Graph | undefined;\n\n  if (shouldFilterSpec || context.config.input.validate_EXPERIMENTAL) {\n    const result = createGraph({\n      spec: context.spec,\n      validate: Boolean(context.config.input.validate_EXPERIMENTAL),\n    });\n    graph = result.graph;\n    handleValidatorResult({ context, result });\n  }\n\n  if (shouldFilterSpec && graph) {\n    const filters = createFilters(context.config.input.filters, context.spec);\n    const sets = createFilteredDependencies({ filters, graph });\n    filterSpec({\n      ...sets,\n      preserveOrder: filters.preserveOrder,\n      spec: context.spec,\n    });\n  }\n\n  const state: State = {\n    ids: new Map(),\n  };\n  const securitySchemesMap = new Map<string, SecuritySchemeObject>();\n\n  // TODO: parser - handle more component types, old parser handles only parameters and schemas\n  if (context.spec.components) {\n    for (const name in context.spec.components.securitySchemes) {\n      const securityOrReference =\n        context.spec.components.securitySchemes[name]!;\n      const securitySchemeObject =\n        '$ref' in securityOrReference\n          ? context.resolveRef<SecuritySchemeObject>(securityOrReference.$ref)\n          : securityOrReference;\n      securitySchemesMap.set(name, securitySchemeObject);\n    }\n\n    for (const name in context.spec.components.parameters) {\n      const $ref = `#/components/parameters/${name}`;\n      const parameterOrReference = context.spec.components.parameters[name]!;\n      const parameter =\n        '$ref' in parameterOrReference\n          ? context.resolveRef<ParameterObject>(parameterOrReference.$ref)\n          : parameterOrReference;\n\n      parseParameter({\n        $ref,\n        context,\n        parameter,\n      });\n    }\n\n    for (const name in context.spec.components.requestBodies) {\n      const $ref = `#/components/requestBodies/${name}`;\n      const requestBodyOrReference =\n        context.spec.components.requestBodies[name]!;\n      const requestBody =\n        '$ref' in requestBodyOrReference\n          ? context.resolveRef<RequestBodyObject>(requestBodyOrReference.$ref)\n          : requestBodyOrReference;\n\n      parseRequestBody({\n        $ref,\n        context,\n        requestBody,\n      });\n    }\n\n    for (const name in context.spec.components.schemas) {\n      const $ref = `#/components/schemas/${name}`;\n      const schema = context.spec.components.schemas[name]!;\n\n      parseSchema({\n        $ref,\n        context,\n        schema,\n      });\n    }\n  }\n\n  parseServers({ context });\n\n  for (const path in context.spec.paths) {\n    const pathItem = context.spec.paths[path as keyof PathsObject]!;\n\n    const finalPathItem = pathItem.$ref\n      ? {\n          ...context.resolveRef<PathItemObject>(pathItem.$ref),\n          ...pathItem,\n        }\n      : pathItem;\n\n    const operationArgs: Omit<\n      Parameters<typeof parseOperation>[0],\n      'method' | 'operation'\n    > & {\n      operation: Omit<\n        Parameters<typeof parseOperation>[0]['operation'],\n        'responses'\n      >;\n    } = {\n      context,\n      operation: {\n        description: finalPathItem.description,\n        parameters: parametersArrayToObject({\n          context,\n          parameters: finalPathItem.parameters,\n        }),\n        security: context.spec.security,\n        servers: finalPathItem.servers,\n        summary: finalPathItem.summary,\n      },\n      path: path as keyof PathsObject,\n      securitySchemesMap,\n      state,\n    };\n\n    if (finalPathItem.delete) {\n      parseOperation({\n        ...operationArgs,\n        method: 'delete',\n        operation: {\n          ...operationArgs.operation,\n          ...finalPathItem.delete,\n          parameters: mergeParametersObjects({\n            source: parametersArrayToObject({\n              context,\n              parameters: finalPathItem.delete.parameters,\n            }),\n            target: operationArgs.operation.parameters,\n          }),\n        },\n      });\n    }\n\n    if (finalPathItem.get) {\n      parseOperation({\n        ...operationArgs,\n        method: 'get',\n        operation: {\n          ...operationArgs.operation,\n          ...finalPathItem.get,\n          parameters: mergeParametersObjects({\n            source: parametersArrayToObject({\n              context,\n              parameters: finalPathItem.get.parameters,\n            }),\n            target: operationArgs.operation.parameters,\n          }),\n        },\n      });\n    }\n\n    if (finalPathItem.head) {\n      parseOperation({\n        ...operationArgs,\n        method: 'head',\n        operation: {\n          ...operationArgs.operation,\n          ...finalPathItem.head,\n          parameters: mergeParametersObjects({\n            source: parametersArrayToObject({\n              context,\n              parameters: finalPathItem.head.parameters,\n            }),\n            target: operationArgs.operation.parameters,\n          }),\n        },\n      });\n    }\n\n    if (finalPathItem.options) {\n      parseOperation({\n        ...operationArgs,\n        method: 'options',\n        operation: {\n          ...operationArgs.operation,\n          ...finalPathItem.options,\n          parameters: mergeParametersObjects({\n            source: parametersArrayToObject({\n              context,\n              parameters: finalPathItem.options.parameters,\n            }),\n            target: operationArgs.operation.parameters,\n          }),\n        },\n      });\n    }\n\n    if (finalPathItem.patch) {\n      parseOperation({\n        ...operationArgs,\n        method: 'patch',\n        operation: {\n          ...operationArgs.operation,\n          ...finalPathItem.patch,\n          parameters: mergeParametersObjects({\n            source: parametersArrayToObject({\n              context,\n              parameters: finalPathItem.patch.parameters,\n            }),\n            target: operationArgs.operation.parameters,\n          }),\n        },\n      });\n    }\n\n    if (finalPathItem.post) {\n      parseOperation({\n        ...operationArgs,\n        method: 'post',\n        operation: {\n          ...operationArgs.operation,\n          ...finalPathItem.post,\n          parameters: mergeParametersObjects({\n            source: parametersArrayToObject({\n              context,\n              parameters: finalPathItem.post.parameters,\n            }),\n            target: operationArgs.operation.parameters,\n          }),\n        },\n      });\n    }\n\n    if (finalPathItem.put) {\n      parseOperation({\n        ...operationArgs,\n        method: 'put',\n        operation: {\n          ...operationArgs.operation,\n          ...finalPathItem.put,\n          parameters: mergeParametersObjects({\n            source: parametersArrayToObject({\n              context,\n              parameters: finalPathItem.put.parameters,\n            }),\n            target: operationArgs.operation.parameters,\n          }),\n        },\n      });\n    }\n\n    if (finalPathItem.trace) {\n      parseOperation({\n        ...operationArgs,\n        method: 'trace',\n        operation: {\n          ...operationArgs.operation,\n          ...finalPathItem.trace,\n          parameters: mergeParametersObjects({\n            source: parametersArrayToObject({\n              context,\n              parameters: finalPathItem.trace.parameters,\n            }),\n            target: operationArgs.operation.parameters,\n          }),\n        },\n      });\n    }\n  }\n};\n","import { createOperationKey } from '../../../ir/operation';\nimport { addNamespace, removeNamespace } from '../../shared/utils/graph';\nimport { httpMethods } from '../../shared/utils/operation';\nimport type { OpenApiV3_1_X, PathItemObject, PathsObject } from '../types/spec';\n\n/**\n * Replace source spec with filtered version.\n */\nexport const filterSpec = ({\n  operations,\n  parameters,\n  preserveOrder,\n  requestBodies,\n  responses,\n  schemas,\n  spec,\n}: {\n  operations: Set<string>;\n  parameters: Set<string>;\n  preserveOrder: boolean;\n  requestBodies: Set<string>;\n  responses: Set<string>;\n  schemas: Set<string>;\n  spec: OpenApiV3_1_X;\n}) => {\n  if (spec.components) {\n    if (spec.components.parameters) {\n      const filtered: typeof spec.components.parameters = {};\n\n      if (preserveOrder) {\n        for (const [name, source] of Object.entries(\n          spec.components.parameters,\n        )) {\n          if (parameters.has(addNamespace('parameter', name))) {\n            filtered[name] = source;\n          }\n        }\n      } else {\n        for (const key of parameters) {\n          const { name } = removeNamespace(key);\n          const source = spec.components.parameters[name];\n          if (source) {\n            filtered[name] = source;\n          }\n        }\n      }\n\n      spec.components.parameters = filtered;\n    }\n\n    if (spec.components.requestBodies) {\n      const filtered: typeof spec.components.requestBodies = {};\n\n      if (preserveOrder) {\n        for (const [name, source] of Object.entries(\n          spec.components.requestBodies,\n        )) {\n          if (requestBodies.has(addNamespace('body', name))) {\n            filtered[name] = source;\n          }\n        }\n      } else {\n        for (const key of requestBodies) {\n          const { name } = removeNamespace(key);\n          const source = spec.components.requestBodies[name];\n          if (source) {\n            filtered[name] = source;\n          }\n        }\n      }\n\n      spec.components.requestBodies = filtered;\n    }\n\n    if (spec.components.responses) {\n      const filtered: typeof spec.components.responses = {};\n\n      if (preserveOrder) {\n        for (const [name, source] of Object.entries(\n          spec.components.responses,\n        )) {\n          if (responses.has(addNamespace('response', name))) {\n            filtered[name] = source;\n          }\n        }\n      } else {\n        for (const key of responses) {\n          const { name } = removeNamespace(key);\n          const source = spec.components.responses[name];\n          if (source) {\n            filtered[name] = source;\n          }\n        }\n      }\n\n      spec.components.responses = filtered;\n    }\n\n    if (spec.components.schemas) {\n      const filtered: typeof spec.components.schemas = {};\n\n      if (preserveOrder) {\n        for (const [name, source] of Object.entries(spec.components.schemas)) {\n          if (schemas.has(addNamespace('schema', name))) {\n            filtered[name] = source;\n          }\n        }\n      } else {\n        for (const key of schemas) {\n          const { name } = removeNamespace(key);\n          const source = spec.components.schemas[name];\n          if (source) {\n            filtered[name] = source;\n          }\n        }\n      }\n\n      spec.components.schemas = filtered;\n    }\n  }\n\n  if (spec.paths) {\n    for (const entry of Object.entries(spec.paths)) {\n      const path = entry[0] as keyof PathsObject;\n      const pathItem = entry[1] as PathItemObject;\n\n      for (const method of httpMethods) {\n        const operation = pathItem[method];\n        if (!operation) {\n          continue;\n        }\n\n        const key = addNamespace(\n          'operation',\n          createOperationKey({ method, path }),\n        );\n        if (!operations.has(key)) {\n          delete pathItem[method];\n        }\n      }\n\n      // remove paths that have no operations left\n      if (!Object.keys(pathItem).length) {\n        delete spec.paths[path];\n      }\n    }\n  }\n};\n","import { createOperationKey } from '../../../ir/operation';\nimport type { Graph } from '../../shared/utils/graph';\nimport { addNamespace, stringToNamespace } from '../../shared/utils/graph';\nimport { httpMethods } from '../../shared/utils/operation';\nimport type {\n  ValidatorIssue,\n  ValidatorResult,\n} from '../../shared/utils/validator';\nimport type {\n  OpenApiV3_1_X,\n  PathItemObject,\n  PathsObject,\n  SchemaObject,\n} from '../types/spec';\n\nconst collectSchemaDependencies = (\n  schema: SchemaObject,\n  dependencies: Set<string>,\n) => {\n  if ('$ref' in schema && schema.$ref) {\n    const parts = schema.$ref.split('/');\n    const type = parts[parts.length - 2];\n    const name = parts[parts.length - 1];\n    if (type && name) {\n      const namespace = stringToNamespace(type);\n      if (namespace === 'unknown') {\n        console.warn(`unsupported type: ${type}`);\n      }\n      dependencies.add(addNamespace(namespace, name));\n    }\n  }\n\n  if (schema.items && typeof schema.items === 'object') {\n    collectSchemaDependencies(schema.items, dependencies);\n  }\n\n  if (schema.properties) {\n    for (const property of Object.values(schema.properties)) {\n      if (typeof property === 'object') {\n        collectSchemaDependencies(property, dependencies);\n      }\n    }\n  }\n\n  if (\n    schema.additionalProperties &&\n    typeof schema.additionalProperties === 'object'\n  ) {\n    collectSchemaDependencies(schema.additionalProperties, dependencies);\n  }\n\n  if (schema.allOf) {\n    for (const item of schema.allOf) {\n      collectSchemaDependencies(item, dependencies);\n    }\n  }\n\n  if (schema.anyOf) {\n    for (const item of schema.anyOf) {\n      collectSchemaDependencies(item, dependencies);\n    }\n  }\n\n  if (schema.contains) {\n    collectSchemaDependencies(schema.contains, dependencies);\n  }\n\n  if (schema.not) {\n    collectSchemaDependencies(schema.not, dependencies);\n  }\n\n  if (schema.oneOf) {\n    for (const item of schema.oneOf) {\n      collectSchemaDependencies(item, dependencies);\n    }\n  }\n\n  if (schema.prefixItems) {\n    for (const item of schema.prefixItems) {\n      collectSchemaDependencies(item, dependencies);\n    }\n  }\n\n  if (schema.propertyNames && typeof schema.propertyNames === 'object') {\n    collectSchemaDependencies(schema.propertyNames, dependencies);\n  }\n};\n\nexport const createGraph = ({\n  spec,\n  validate,\n}: {\n  spec: OpenApiV3_1_X;\n  validate: boolean;\n}): ValidatorResult & {\n  graph: Graph;\n} => {\n  const graph: Graph = {\n    operations: new Map(),\n    parameters: new Map(),\n    requestBodies: new Map(),\n    responses: new Map(),\n    schemas: new Map(),\n  };\n  const issues: Array<ValidatorIssue> = [];\n  const operationIds = new Map();\n\n  if (spec.components) {\n    // TODO: add other components\n    if (spec.components.schemas) {\n      for (const [key, schema] of Object.entries(spec.components.schemas)) {\n        const dependencies = new Set<string>();\n        collectSchemaDependencies(schema, dependencies);\n        graph.schemas.set(addNamespace('schema', key), {\n          dependencies,\n          deprecated:\n            'deprecated' in schema ? Boolean(schema.deprecated) : false,\n        });\n      }\n    }\n\n    if (spec.components.parameters) {\n      for (const [key, parameter] of Object.entries(\n        spec.components.parameters,\n      )) {\n        const dependencies = new Set<string>();\n        if ('$ref' in parameter) {\n          collectSchemaDependencies(parameter, dependencies);\n        } else {\n          if (parameter.schema) {\n            collectSchemaDependencies(parameter.schema, dependencies);\n          }\n\n          if (parameter.content) {\n            for (const media of Object.values(parameter.content)) {\n              if (media.schema) {\n                collectSchemaDependencies(media.schema, dependencies);\n              }\n            }\n          }\n        }\n        graph.parameters.set(addNamespace('parameter', key), {\n          dependencies,\n          deprecated:\n            'deprecated' in parameter ? Boolean(parameter.deprecated) : false,\n        });\n      }\n    }\n\n    if (spec.components.requestBodies) {\n      for (const [key, requestBody] of Object.entries(\n        spec.components.requestBodies,\n      )) {\n        const dependencies = new Set<string>();\n        if ('$ref' in requestBody) {\n          collectSchemaDependencies(requestBody, dependencies);\n        } else {\n          for (const media of Object.values(requestBody.content)) {\n            if (media.schema) {\n              collectSchemaDependencies(media.schema, dependencies);\n            }\n          }\n        }\n        graph.requestBodies.set(addNamespace('body', key), {\n          dependencies,\n          deprecated: false,\n        });\n      }\n    }\n\n    if (spec.components.responses) {\n      for (const [key, response] of Object.entries(spec.components.responses)) {\n        const dependencies = new Set<string>();\n        if ('$ref' in response) {\n          collectSchemaDependencies(response, dependencies);\n        } else {\n          if (response.content) {\n            for (const media of Object.values(response.content)) {\n              if (media.schema) {\n                collectSchemaDependencies(media.schema, dependencies);\n              }\n            }\n          }\n        }\n        graph.responses.set(addNamespace('response', key), {\n          dependencies,\n          deprecated: false,\n        });\n      }\n    }\n  }\n\n  if (spec.paths) {\n    for (const entry of Object.entries(spec.paths)) {\n      const path = entry[0] as keyof PathsObject;\n      const pathItem = entry[1] as PathItemObject;\n      for (const method of httpMethods) {\n        const operation = pathItem[method];\n        if (!operation) {\n          continue;\n        }\n\n        const operationKey = createOperationKey({ method, path });\n\n        if (validate && operation.operationId) {\n          if (!operationIds.has(operation.operationId)) {\n            operationIds.set(operation.operationId, operationKey);\n          } else {\n            issues.push({\n              code: 'duplicate_key',\n              context: {\n                key: 'operationId',\n                value: operation.operationId,\n              },\n              message:\n                'Duplicate `operationId` found. Each `operationId` must be unique.',\n              path: ['paths', path, method, 'operationId'],\n              severity: 'error',\n            });\n          }\n        }\n\n        const dependencies = new Set<string>();\n\n        if (operation.requestBody) {\n          if ('$ref' in operation.requestBody) {\n            collectSchemaDependencies(operation.requestBody, dependencies);\n          } else {\n            for (const media of Object.values(operation.requestBody.content)) {\n              if (media.schema) {\n                collectSchemaDependencies(media.schema, dependencies);\n              }\n            }\n          }\n        }\n\n        if (operation.responses) {\n          for (const response of Object.values(operation.responses)) {\n            if (!response) {\n              continue;\n            }\n\n            if ('$ref' in response) {\n              collectSchemaDependencies(response, dependencies);\n            } else if (response.content) {\n              for (const media of Object.values(response.content)) {\n                if (media.schema) {\n                  collectSchemaDependencies(media.schema, dependencies);\n                }\n              }\n            }\n          }\n        }\n\n        if (operation.parameters) {\n          for (const parameter of operation.parameters) {\n            if ('$ref' in parameter) {\n              collectSchemaDependencies(parameter, dependencies);\n            } else if (parameter.schema) {\n              collectSchemaDependencies(parameter.schema, dependencies);\n            }\n          }\n        }\n\n        graph.operations.set(addNamespace('operation', operationKey), {\n          dependencies,\n          deprecated: Boolean(operation.deprecated),\n          tags: new Set(operation.tags),\n        });\n      }\n    }\n  }\n\n  if (validate) {\n    if (spec.servers) {\n      if (typeof spec.servers !== 'object' || !Array.isArray(spec.servers)) {\n        issues.push({\n          code: 'invalid_type',\n          message: '`servers` must be an array.',\n          path: [],\n          severity: 'error',\n        });\n      }\n\n      for (let index = 0; index < spec.servers.length; index++) {\n        const server = spec.servers[index];\n        if (!server || typeof server !== 'object') {\n          issues.push({\n            code: 'invalid_type',\n            context: {\n              actual: typeof server,\n              expected: 'object',\n            },\n            message: 'Each entry in `servers` must be an object.',\n            path: ['servers', index],\n            severity: 'error',\n          });\n        } else {\n          if (!server.url) {\n            issues.push({\n              code: 'missing_required_field',\n              context: {\n                field: 'url',\n              },\n              message: 'Missing required field `url` in server object.',\n              path: ['servers', index],\n              severity: 'error',\n            });\n          }\n        }\n      }\n    }\n  }\n\n  return {\n    graph,\n    issues,\n    valid: !issues.some((issue) => issue.severity === 'error'),\n  };\n};\n","import type { IRMediaType } from '../../../ir/mediaType';\nimport {\n  isMediaTypeFileLike,\n  mediaTypeToIrMediaType,\n} from '../../../ir/mediaType';\nimport type { MediaTypeObject, SchemaObject } from '../types/spec';\n\ninterface Content {\n  mediaType: string;\n  schema: SchemaObject | undefined;\n  type: IRMediaType | undefined;\n}\n\nexport const contentToSchema = ({\n  content,\n}: {\n  content: Content;\n}): SchemaObject | undefined => {\n  const { mediaType, schema } = content;\n\n  if (!schema) {\n    if (isMediaTypeFileLike({ mediaType })) {\n      return {\n        format: 'binary',\n        type: 'string',\n      };\n    }\n    return;\n  }\n\n  if (\n    schema.type === 'string' &&\n    !schema.format &&\n    isMediaTypeFileLike({ mediaType })\n  ) {\n    return {\n      ...schema,\n      format: 'binary',\n    };\n  }\n\n  return schema;\n};\n\nexport const mediaTypeObject = ({\n  content,\n}: {\n  content: Record<string, MediaTypeObject> | undefined;\n}): Content | undefined => {\n  // return the first supported MIME type\n  for (const mediaType in content) {\n    return {\n      mediaType,\n      schema: content[mediaType]!.schema,\n      type: mediaTypeToIrMediaType({ mediaType }),\n    };\n  }\n};\n","import type { IR } from '../../../ir/types';\nimport { addItemsToSchema } from '../../../ir/utils';\nimport { refToName } from '../../../utils/ref';\nimport type {\n  SchemaState,\n  SchemaType,\n  SchemaWithRequired,\n} from '../../shared/types/schema';\nimport { discriminatorValues } from '../../shared/utils/discriminator';\nimport { mergeSchemaAccessScopes } from '../../shared/utils/schema';\nimport type { SchemaObject } from '../types/spec';\n\nexport const getSchemaTypes = ({\n  schema,\n}: {\n  schema: SchemaObject;\n}): ReadonlyArray<SchemaType<SchemaObject>> => {\n  if (typeof schema.type === 'string') {\n    return [schema.type];\n  }\n\n  if (schema.type) {\n    return schema.type;\n  }\n\n  // infer object based on the presence of properties\n  if (schema.properties) {\n    return ['object'];\n  }\n\n  return [];\n};\n\nconst parseSchemaJsDoc = ({\n  irSchema,\n  schema,\n}: {\n  irSchema: IR.SchemaObject;\n  schema: SchemaObject;\n}) => {\n  if (schema.deprecated !== undefined) {\n    irSchema.deprecated = schema.deprecated;\n  }\n\n  if (schema.description) {\n    irSchema.description = schema.description;\n  }\n\n  if (schema.title) {\n    irSchema.title = schema.title;\n  }\n};\n\nconst parseSchemaMeta = ({\n  irSchema,\n  schema,\n  state,\n}: {\n  irSchema: IR.SchemaObject;\n  schema: SchemaObject;\n  state: SchemaState;\n}) => {\n  if (schema.const !== undefined) {\n    irSchema.const = schema.const;\n\n    // try to infer schema type\n    if (!schema.type) {\n      if (schema.const === null) {\n        irSchema.type = 'null';\n      } else {\n        switch (typeof schema.const) {\n          case 'bigint':\n          case 'number':\n            irSchema.type = 'number';\n            break;\n          case 'boolean':\n            irSchema.type = 'boolean';\n            break;\n          case 'string':\n            irSchema.type = 'string';\n            break;\n        }\n      }\n    }\n  }\n\n  if (schema.default !== undefined) {\n    irSchema.default = schema.default;\n  }\n\n  if (schema.exclusiveMaximum !== undefined) {\n    irSchema.exclusiveMaximum = schema.exclusiveMaximum;\n  }\n\n  if (schema.exclusiveMinimum !== undefined) {\n    irSchema.exclusiveMinimum = schema.exclusiveMinimum;\n  }\n\n  if (schema.format) {\n    irSchema.format = schema.format;\n  }\n\n  if (schema.maximum !== undefined) {\n    irSchema.maximum = schema.maximum;\n  }\n\n  if (schema.maxItems !== undefined) {\n    irSchema.maxItems = schema.maxItems;\n  }\n\n  if (schema.maxLength !== undefined) {\n    irSchema.maxLength = schema.maxLength;\n  }\n\n  if (schema.minimum !== undefined) {\n    irSchema.minimum = schema.minimum;\n  }\n\n  if (schema.minItems !== undefined) {\n    irSchema.minItems = schema.minItems;\n  }\n\n  if (schema.minLength !== undefined) {\n    irSchema.minLength = schema.minLength;\n  }\n\n  if (schema.pattern) {\n    irSchema.pattern = schema.pattern;\n  }\n\n  if (schema.readOnly) {\n    irSchema.accessScope = 'read';\n    irSchema.accessScopes = mergeSchemaAccessScopes(irSchema.accessScopes, [\n      'read',\n    ]);\n  } else if (schema.writeOnly) {\n    irSchema.accessScope = 'write';\n    irSchema.accessScopes = mergeSchemaAccessScopes(irSchema.accessScopes, [\n      'write',\n    ]);\n  } else if (state.isProperty) {\n    irSchema.accessScopes = mergeSchemaAccessScopes(irSchema.accessScopes, [\n      'both',\n    ]);\n  }\n};\n\nconst parseArray = ({\n  context,\n  irSchema = {},\n  schema,\n  state,\n}: {\n  context: IR.Context;\n  irSchema?: IR.SchemaObject;\n  schema: SchemaObject;\n  state: SchemaState;\n}): IR.SchemaObject => {\n  if (\n    (schema.prefixItems && schema.prefixItems.length) ||\n    (schema.maxItems && schema.maxItems === schema.minItems) ||\n    schema.const !== undefined\n  ) {\n    irSchema.type = 'tuple';\n  } else {\n    irSchema.type = 'array';\n  }\n\n  let schemaItems: Array<IR.SchemaObject> = [];\n\n  for (const item of schema.prefixItems ?? []) {\n    const irItemSchema = schemaToIrSchema({\n      context,\n      schema: item,\n      state,\n    });\n    irSchema.accessScopes = mergeSchemaAccessScopes(\n      irSchema.accessScopes,\n      irItemSchema.accessScopes,\n    );\n    schemaItems.push(irItemSchema);\n  }\n\n  if (schema.items) {\n    const irItemsSchema = schemaToIrSchema({\n      context,\n      schema: schema.items,\n      state,\n    });\n\n    irSchema.accessScopes = mergeSchemaAccessScopes(\n      irSchema.accessScopes,\n      irItemsSchema.accessScopes,\n    );\n\n    if (\n      !schemaItems.length &&\n      schema.maxItems &&\n      schema.maxItems === schema.minItems\n    ) {\n      schemaItems = Array(schema.maxItems).fill(irItemsSchema);\n    } else {\n      const ofArray =\n        schema.items.allOf || schema.items.anyOf || schema.items.oneOf;\n      if (\n        ofArray &&\n        ofArray.length > 1 &&\n        !getSchemaTypes({ schema: schema.items }).includes('null')\n      ) {\n        // bring composition up to avoid incorrectly nested arrays\n        irSchema = {\n          ...irSchema,\n          ...irItemsSchema,\n        };\n      } else {\n        schemaItems.push(irItemsSchema);\n      }\n    }\n  }\n\n  irSchema = addItemsToSchema({\n    items: schemaItems,\n    schema: irSchema,\n  });\n\n  return irSchema;\n};\n\nconst parseBoolean = ({\n  irSchema = {},\n}: {\n  context: IR.Context;\n  irSchema?: IR.SchemaObject;\n  schema: SchemaObject;\n}): IR.SchemaObject => {\n  irSchema.type = 'boolean';\n\n  return irSchema;\n};\n\nconst parseNull = ({\n  irSchema = {},\n}: {\n  context: IR.Context;\n  irSchema?: IR.SchemaObject;\n  schema: SchemaObject;\n}) => {\n  irSchema.type = 'null';\n\n  return irSchema;\n};\n\nconst parseNumber = ({\n  irSchema = {},\n  schema,\n}: {\n  context: IR.Context;\n  irSchema?: IR.SchemaObject;\n  schema: Omit<SchemaObject, 'type'> & {\n    type: SchemaType<SchemaObject>;\n  };\n}): IR.SchemaObject => {\n  irSchema.type = schema.type;\n\n  return irSchema;\n};\n\nconst parseObject = ({\n  context,\n  irSchema = {},\n  schema,\n  state,\n}: {\n  context: IR.Context;\n  irSchema?: IR.SchemaObject;\n  schema: SchemaObject;\n  state: SchemaState;\n}): IR.SchemaObject => {\n  irSchema.type = 'object';\n\n  const schemaProperties: Record<string, IR.SchemaObject> = {};\n\n  for (const name in schema.properties) {\n    const property = schema.properties[name]!;\n    if (typeof property === 'boolean') {\n      // TODO: parser - handle boolean properties\n    } else {\n      const irPropertySchema = schemaToIrSchema({\n        context,\n        schema: property,\n        state: {\n          ...state,\n          isProperty: true,\n        },\n      });\n      irSchema.accessScopes = mergeSchemaAccessScopes(\n        irSchema.accessScopes,\n        irPropertySchema.accessScopes,\n      );\n      schemaProperties[name] = irPropertySchema;\n    }\n  }\n\n  if (Object.keys(schemaProperties).length) {\n    irSchema.properties = schemaProperties;\n  }\n\n  if (schema.additionalProperties === undefined) {\n    if (!irSchema.properties) {\n      irSchema.additionalProperties = {\n        type: 'unknown',\n      };\n    }\n  } else if (typeof schema.additionalProperties === 'boolean') {\n    irSchema.additionalProperties = {\n      type: schema.additionalProperties ? 'unknown' : 'never',\n    };\n  } else {\n    const irAdditionalPropertiesSchema = schemaToIrSchema({\n      context,\n      schema: schema.additionalProperties,\n      state,\n    });\n    irSchema.additionalProperties = irAdditionalPropertiesSchema;\n  }\n\n  if (schema.propertyNames) {\n    irSchema.propertyNames = schemaToIrSchema({\n      context,\n      schema: schema.propertyNames,\n      state,\n    });\n  }\n\n  if (schema.required) {\n    irSchema.required = schema.required;\n  }\n\n  return irSchema;\n};\n\nconst parseString = ({\n  irSchema = {},\n}: {\n  context: IR.Context;\n  irSchema?: IR.SchemaObject;\n  schema: SchemaObject;\n}): IR.SchemaObject => {\n  irSchema.type = 'string';\n\n  return irSchema;\n};\n\nconst initIrSchema = ({\n  schema,\n}: {\n  schema: SchemaObject;\n}): IR.SchemaObject => {\n  const irSchema: IR.SchemaObject = {};\n\n  parseSchemaJsDoc({\n    irSchema,\n    schema,\n  });\n\n  return irSchema;\n};\n\nconst parseAllOf = ({\n  context,\n  schema,\n  state,\n}: {\n  context: IR.Context;\n  schema: SchemaWithRequired<SchemaObject, 'allOf'>;\n  state: SchemaState;\n}): IR.SchemaObject => {\n  let irSchema = initIrSchema({ schema });\n\n  const schemaItems: Array<IR.SchemaObject> = [];\n  const schemaTypes = getSchemaTypes({ schema });\n\n  const compositionSchemas = schema.allOf;\n\n  for (const compositionSchema of compositionSchemas) {\n    const irCompositionSchema = schemaToIrSchema({\n      context,\n      schema: compositionSchema,\n      state,\n    });\n\n    irSchema.accessScopes = mergeSchemaAccessScopes(\n      irSchema.accessScopes,\n      irCompositionSchema.accessScopes,\n    );\n\n    if (schema.required) {\n      if (irCompositionSchema.required) {\n        irCompositionSchema.required = [\n          ...irCompositionSchema.required,\n          ...schema.required,\n        ];\n      } else {\n        irCompositionSchema.required = schema.required;\n      }\n    }\n\n    schemaItems.push(irCompositionSchema);\n\n    if (compositionSchema.$ref) {\n      const ref = context.resolveRef<SchemaObject>(compositionSchema.$ref);\n      // `$ref` should be passed from the root `parseSchema()` call\n      if (ref.discriminator && state.$ref) {\n        const values = discriminatorValues(\n          state.$ref,\n          ref.discriminator.mapping,\n        );\n        const valueSchemas: ReadonlyArray<IR.SchemaObject> = values.map(\n          (value) => ({\n            const: value,\n            type: 'string',\n          }),\n        );\n        const irDiscriminatorSchema: IR.SchemaObject = {\n          properties: {\n            [ref.discriminator.propertyName]:\n              valueSchemas.length > 1\n                ? {\n                    items: valueSchemas,\n                    logicalOperator: 'or',\n                  }\n                : valueSchemas[0]!,\n          },\n          type: 'object',\n        };\n        if (ref.required?.includes(ref.discriminator.propertyName)) {\n          irDiscriminatorSchema.required = [ref.discriminator.propertyName];\n        }\n        schemaItems.push(irDiscriminatorSchema);\n      }\n\n      if (!state.circularReferenceTracker.has(compositionSchema.$ref)) {\n        const irRefSchema = schemaToIrSchema({\n          context,\n          schema: ref,\n          state: {\n            ...state,\n            $ref: compositionSchema.$ref,\n          },\n        });\n        irSchema.accessScopes = mergeSchemaAccessScopes(\n          irSchema.accessScopes,\n          irRefSchema.accessScopes,\n        );\n      }\n    }\n  }\n\n  if (schemaTypes.includes('object')) {\n    const irObjectSchema = parseOneType({\n      context,\n      schema: {\n        ...schema,\n        type: 'object',\n      },\n      state,\n    });\n\n    irSchema.accessScopes = mergeSchemaAccessScopes(\n      irSchema.accessScopes,\n      irObjectSchema.accessScopes,\n    );\n\n    if (irObjectSchema.properties) {\n      for (const requiredProperty of irObjectSchema.required ?? []) {\n        if (!irObjectSchema.properties[requiredProperty]) {\n          for (const compositionSchema of compositionSchemas) {\n            // TODO: parser - this could be probably resolved more accurately\n            const finalCompositionSchema = compositionSchema.$ref\n              ? context.resolveRef<SchemaObject>(compositionSchema.$ref)\n              : compositionSchema;\n\n            if (\n              getSchemaTypes({ schema: finalCompositionSchema }).includes(\n                'object',\n              )\n            ) {\n              const irCompositionSchema = parseOneType({\n                context,\n                schema: {\n                  ...finalCompositionSchema,\n                  type: 'object',\n                },\n                state,\n              });\n\n              irSchema.accessScopes = mergeSchemaAccessScopes(\n                irSchema.accessScopes,\n                irCompositionSchema.accessScopes,\n              );\n\n              if (irCompositionSchema.properties?.[requiredProperty]) {\n                irObjectSchema.properties[requiredProperty] =\n                  irCompositionSchema.properties[requiredProperty];\n                break;\n              }\n            }\n          }\n        }\n      }\n      schemaItems.push(irObjectSchema);\n    }\n  }\n\n  irSchema = addItemsToSchema({\n    items: schemaItems,\n    logicalOperator: 'and',\n    mutateSchemaOneItem: true,\n    schema: irSchema,\n  });\n\n  if (schemaTypes.includes('null')) {\n    // nest composition to avoid producing an intersection with null\n    const nestedItems: Array<IR.SchemaObject> = [\n      {\n        type: 'null',\n      },\n    ];\n\n    if (schemaItems.length) {\n      nestedItems.unshift(irSchema);\n    }\n\n    irSchema = {\n      items: nestedItems,\n      logicalOperator: 'or',\n    };\n  }\n\n  return irSchema;\n};\n\nconst parseAnyOf = ({\n  context,\n  schema,\n  state,\n}: {\n  context: IR.Context;\n  schema: SchemaWithRequired<SchemaObject, 'anyOf'>;\n  state: SchemaState;\n}): IR.SchemaObject => {\n  let irSchema = initIrSchema({ schema });\n\n  const schemaItems: Array<IR.SchemaObject> = [];\n  const schemaTypes = getSchemaTypes({ schema });\n\n  const compositionSchemas = schema.anyOf;\n\n  for (const compositionSchema of compositionSchemas) {\n    let irCompositionSchema = schemaToIrSchema({\n      context,\n      schema: compositionSchema,\n      state,\n    });\n\n    irSchema.accessScopes = mergeSchemaAccessScopes(\n      irSchema.accessScopes,\n      irCompositionSchema.accessScopes,\n    );\n\n    // `$ref` should be defined with discriminators\n    if (schema.discriminator && compositionSchema.$ref) {\n      const values = discriminatorValues(\n        compositionSchema.$ref,\n        schema.discriminator.mapping,\n      );\n      const valueSchemas: ReadonlyArray<IR.SchemaObject> = values.map(\n        (value) => ({\n          const: value,\n          type: 'string',\n        }),\n      );\n      const irDiscriminatorSchema: IR.SchemaObject = {\n        properties: {\n          [schema.discriminator.propertyName]:\n            valueSchemas.length > 1\n              ? {\n                  items: valueSchemas,\n                  logicalOperator: 'or',\n                }\n              : valueSchemas[0]!,\n        },\n        type: 'object',\n      };\n      irCompositionSchema = {\n        items: [irDiscriminatorSchema, irCompositionSchema],\n        logicalOperator: 'and',\n      };\n    }\n\n    schemaItems.push(irCompositionSchema);\n  }\n\n  if (schemaTypes.includes('null')) {\n    schemaItems.push({ type: 'null' });\n  }\n\n  irSchema = addItemsToSchema({\n    items: schemaItems,\n    mutateSchemaOneItem: true,\n    schema: irSchema,\n  });\n\n  if (schemaTypes.includes('object')) {\n    // nest composition to avoid producing a union with object properties\n    const irObjectSchema = parseOneType({\n      context,\n      schema: {\n        ...schema,\n        type: 'object',\n      },\n      state,\n    });\n\n    irSchema.accessScopes = mergeSchemaAccessScopes(\n      irSchema.accessScopes,\n      irObjectSchema.accessScopes,\n    );\n\n    if (irObjectSchema.properties) {\n      irSchema = {\n        items: [irSchema, irObjectSchema],\n        logicalOperator: 'and',\n      };\n    }\n  }\n\n  return irSchema;\n};\n\nconst parseEnum = ({\n  context,\n  schema,\n  state,\n}: {\n  context: IR.Context;\n  schema: SchemaWithRequired<SchemaObject, 'enum'>;\n  state: SchemaState;\n}): IR.SchemaObject => {\n  let irSchema = initIrSchema({ schema });\n\n  irSchema.type = 'enum';\n\n  const schemaItems: Array<IR.SchemaObject> = [];\n  const schemaTypes = getSchemaTypes({ schema });\n\n  for (const [index, enumValue] of schema.enum.entries()) {\n    const typeOfEnumValue = typeof enumValue;\n    let enumType: SchemaType<SchemaObject> | undefined;\n\n    if (\n      typeOfEnumValue === 'string' ||\n      typeOfEnumValue === 'number' ||\n      typeOfEnumValue === 'boolean'\n    ) {\n      enumType = typeOfEnumValue;\n    } else if (typeOfEnumValue === 'object' && Array.isArray(enumValue)) {\n      enumType = 'array';\n    } else if (enumValue === null) {\n      // type must contain null\n      if (schemaTypes.includes('null')) {\n        enumType = 'null';\n      }\n    } else {\n      console.warn(\n        '🚨',\n        `unhandled \"${typeOfEnumValue}\" typeof value \"${enumValue}\" for enum`,\n        schema.enum,\n      );\n    }\n\n    if (!enumType) {\n      continue;\n    }\n\n    const irTypeSchema = parseOneType({\n      context,\n      schema: {\n        const: enumValue,\n        description: schema['x-enum-descriptions']?.[index],\n        title:\n          schema['x-enum-varnames']?.[index] ?? schema['x-enumNames']?.[index],\n        type: enumType,\n      },\n      state,\n    });\n\n    irSchema.accessScopes = mergeSchemaAccessScopes(\n      irSchema.accessScopes,\n      irTypeSchema.accessScopes,\n    );\n\n    schemaItems.push(irTypeSchema);\n  }\n\n  irSchema = addItemsToSchema({\n    items: schemaItems,\n    schema: irSchema,\n  });\n\n  return irSchema;\n};\n\nconst parseOneOf = ({\n  context,\n  schema,\n  state,\n}: {\n  context: IR.Context;\n  schema: SchemaWithRequired<SchemaObject, 'oneOf'>;\n  state: SchemaState;\n}): IR.SchemaObject => {\n  let irSchema = initIrSchema({ schema });\n\n  let schemaItems: Array<IR.SchemaObject> = [];\n  const schemaTypes = getSchemaTypes({ schema });\n\n  const compositionSchemas = schema.oneOf;\n\n  for (const compositionSchema of compositionSchemas) {\n    let irCompositionSchema = schemaToIrSchema({\n      context,\n      schema: compositionSchema,\n      state,\n    });\n\n    irSchema.accessScopes = mergeSchemaAccessScopes(\n      irSchema.accessScopes,\n      irCompositionSchema.accessScopes,\n    );\n\n    // `$ref` should be defined with discriminators\n    if (schema.discriminator && compositionSchema.$ref) {\n      const values = discriminatorValues(\n        compositionSchema.$ref,\n        schema.discriminator.mapping,\n      );\n      const valueSchemas: ReadonlyArray<IR.SchemaObject> = values.map(\n        (value) => ({\n          const: value,\n          type: 'string',\n        }),\n      );\n      const irDiscriminatorSchema: IR.SchemaObject = {\n        properties: {\n          [schema.discriminator.propertyName]:\n            valueSchemas.length > 1\n              ? {\n                  items: valueSchemas,\n                  logicalOperator: 'or',\n                }\n              : valueSchemas[0]!,\n        },\n        required: [schema.discriminator.propertyName],\n        type: 'object',\n      };\n      irCompositionSchema = {\n        items: [irDiscriminatorSchema, irCompositionSchema],\n        logicalOperator: 'and',\n      };\n    }\n\n    // since we know oneOf will be using \"or\" logical operator, if the parsed\n    // composition schema also has an \"or\" operator, we can bring it up\n    // to avoid unnecessary brackets\n    if (\n      irCompositionSchema.logicalOperator === 'or' &&\n      irCompositionSchema.type !== 'array' &&\n      irCompositionSchema.items\n    ) {\n      schemaItems = schemaItems.concat(irCompositionSchema.items);\n    } else {\n      schemaItems.push(irCompositionSchema);\n    }\n  }\n\n  if (schemaTypes.includes('null')) {\n    schemaItems.push({ type: 'null' });\n  }\n\n  irSchema = addItemsToSchema({\n    items: schemaItems,\n    mutateSchemaOneItem: true,\n    schema: irSchema,\n  });\n\n  if (schemaTypes.includes('object')) {\n    // nest composition to avoid producing a union with object properties\n    const irObjectSchema = parseOneType({\n      context,\n      schema: {\n        ...schema,\n        type: 'object',\n      },\n      state,\n    });\n\n    irSchema.accessScopes = mergeSchemaAccessScopes(\n      irSchema.accessScopes,\n      irObjectSchema.accessScopes,\n    );\n\n    if (irObjectSchema.properties) {\n      irSchema = {\n        items: [irSchema, irObjectSchema],\n        logicalOperator: 'and',\n      };\n    }\n  }\n\n  return irSchema;\n};\n\nconst parseRef = ({\n  context,\n  schema,\n  state,\n}: {\n  context: IR.Context;\n  schema: SchemaWithRequired<SchemaObject, '$ref'>;\n  state: SchemaState;\n}): IR.SchemaObject => {\n  let irSchema = initIrSchema({ schema });\n\n  const irRefSchema: IR.SchemaObject = {};\n\n  // refs using unicode characters become encoded, didn't investigate why\n  // but the suspicion is this comes from `@hey-api/json-schema-ref-parser`\n  irRefSchema.$ref = decodeURI(schema.$ref);\n\n  if (!state.circularReferenceTracker.has(schema.$ref)) {\n    const refSchema = context.resolveRef<SchemaObject>(schema.$ref);\n    const irResolvedRefSchema = schemaToIrSchema({\n      context,\n      schema: refSchema,\n      state: {\n        ...state,\n        $ref: schema.$ref,\n        isProperty: false,\n      },\n    });\n    irRefSchema.accessScopes = mergeSchemaAccessScopes(\n      irRefSchema.accessScopes,\n      irResolvedRefSchema.accessScopes,\n    );\n  }\n\n  const schemaItems: Array<IR.SchemaObject> = [];\n  schemaItems.push(irRefSchema);\n\n  if (schema.type && typeof schema.type !== 'string') {\n    if (schema.type.includes('null')) {\n      schemaItems.push({ type: 'null' });\n    }\n  }\n\n  irSchema = addItemsToSchema({\n    items: schemaItems,\n    mutateSchemaOneItem: true,\n    schema: irSchema,\n  });\n\n  return irSchema;\n};\n\nconst parseOneType = ({\n  context,\n  irSchema,\n  schema,\n  state,\n}: {\n  context: IR.Context;\n  irSchema?: IR.SchemaObject;\n  schema: Omit<SchemaObject, 'type'> & {\n    type: SchemaType<SchemaObject>;\n  };\n  state: SchemaState;\n}): IR.SchemaObject => {\n  if (!irSchema) {\n    irSchema = initIrSchema({ schema });\n\n    parseSchemaMeta({\n      irSchema,\n      schema,\n      state,\n    });\n  }\n\n  switch (schema.type) {\n    case 'array':\n      return parseArray({\n        context,\n        irSchema,\n        schema,\n        state,\n      });\n    case 'boolean':\n      return parseBoolean({\n        context,\n        irSchema,\n        schema,\n      });\n    case 'integer':\n    case 'number':\n      return parseNumber({\n        context,\n        irSchema,\n        schema,\n      });\n    case 'null':\n      return parseNull({\n        context,\n        irSchema,\n        schema,\n      });\n    case 'object':\n      return parseObject({\n        context,\n        irSchema,\n        schema,\n        state,\n      });\n    case 'string':\n      return parseString({\n        context,\n        irSchema,\n        schema,\n      });\n    default:\n      // gracefully handle invalid type\n      return parseUnknown({\n        context,\n        irSchema,\n        schema,\n        state,\n      });\n  }\n};\n\nconst parseManyTypes = ({\n  context,\n  irSchema,\n  schema,\n  state,\n}: {\n  context: IR.Context;\n  irSchema?: IR.SchemaObject;\n  schema: Omit<SchemaObject, 'type'> & {\n    type: ReadonlyArray<SchemaType<SchemaObject>>;\n  };\n  state: SchemaState;\n}): IR.SchemaObject => {\n  if (!irSchema) {\n    irSchema = initIrSchema({ schema });\n  }\n\n  const typeIrSchema: IR.SchemaObject = {};\n\n  parseSchemaMeta({\n    irSchema: typeIrSchema,\n    schema,\n    state,\n  });\n\n  if (schema.type.includes('null') && typeIrSchema.default === null) {\n    // clear to avoid duplicate default inside the non-null schema.\n    // this would produce incorrect validator output\n    delete typeIrSchema.default;\n  }\n\n  const schemaItems: Array<IR.SchemaObject> = [];\n\n  for (const type of schema.type) {\n    if (type === 'null') {\n      schemaItems.push({ type: 'null' });\n    } else {\n      const irTypeSchema = parseOneType({\n        context,\n        irSchema: typeIrSchema,\n        schema: {\n          ...schema,\n          type,\n        },\n        state,\n      });\n\n      irSchema.accessScopes = mergeSchemaAccessScopes(\n        irSchema.accessScopes,\n        irTypeSchema.accessScopes,\n      );\n\n      schemaItems.push(irTypeSchema);\n    }\n  }\n\n  irSchema = addItemsToSchema({\n    items: schemaItems,\n    schema: irSchema,\n  });\n\n  return irSchema;\n};\n\nconst parseType = ({\n  context,\n  schema,\n  state,\n}: {\n  context: IR.Context;\n  schema: SchemaWithRequired<SchemaObject, 'type'>;\n  state: SchemaState;\n}): IR.SchemaObject => {\n  const irSchema = initIrSchema({ schema });\n\n  parseSchemaMeta({\n    irSchema,\n    schema,\n    state,\n  });\n\n  const schemaTypes = getSchemaTypes({ schema });\n\n  if (schemaTypes.length === 1) {\n    return parseOneType({\n      context,\n      irSchema,\n      schema: {\n        ...schema,\n        type: schemaTypes[0]!,\n      },\n      state,\n    });\n  }\n\n  return parseManyTypes({\n    context,\n    irSchema,\n    schema: {\n      ...schema,\n      type: schemaTypes,\n    },\n    state,\n  });\n};\n\nconst parseUnknown = ({\n  irSchema,\n  schema,\n  state,\n}: {\n  context: IR.Context;\n  irSchema?: IR.SchemaObject;\n  schema: SchemaObject;\n  state: SchemaState;\n}): IR.SchemaObject => {\n  if (!irSchema) {\n    irSchema = initIrSchema({ schema });\n  }\n\n  irSchema.type = 'unknown';\n\n  parseSchemaMeta({\n    irSchema,\n    schema,\n    state,\n  });\n\n  return irSchema;\n};\n\nexport const schemaToIrSchema = ({\n  context,\n  schema,\n  state,\n}: {\n  context: IR.Context;\n  schema: SchemaObject;\n  state: SchemaState | undefined;\n}): IR.SchemaObject => {\n  if (!state) {\n    state = {\n      circularReferenceTracker: new Set(),\n    };\n  }\n\n  if (state.$ref) {\n    state.circularReferenceTracker.add(state.$ref);\n  }\n\n  if (schema.$ref) {\n    return parseRef({\n      context,\n      schema: schema as SchemaWithRequired<SchemaObject, '$ref'>,\n      state,\n    });\n  }\n\n  if (schema.enum) {\n    return parseEnum({\n      context,\n      schema: schema as SchemaWithRequired<SchemaObject, 'enum'>,\n      state,\n    });\n  }\n\n  if (schema.allOf) {\n    return parseAllOf({\n      context,\n      schema: schema as SchemaWithRequired<SchemaObject, 'allOf'>,\n      state,\n    });\n  }\n\n  if (schema.anyOf) {\n    return parseAnyOf({\n      context,\n      schema: schema as SchemaWithRequired<SchemaObject, 'anyOf'>,\n      state,\n    });\n  }\n\n  if (schema.oneOf) {\n    return parseOneOf({\n      context,\n      schema: schema as SchemaWithRequired<SchemaObject, 'oneOf'>,\n      state,\n    });\n  }\n\n  // infer object based on the presence of properties\n  if (schema.type || schema.properties) {\n    return parseType({\n      context,\n      schema: schema as SchemaWithRequired<SchemaObject, 'type'>,\n      state,\n    });\n  }\n\n  return parseUnknown({\n    context,\n    schema,\n    state,\n  });\n};\n\nexport const parseSchema = ({\n  $ref,\n  context,\n  schema,\n}: {\n  $ref: string;\n  context: IR.Context;\n  schema: SchemaObject;\n}) => {\n  if (!context.ir.components) {\n    context.ir.components = {};\n  }\n\n  if (!context.ir.components.schemas) {\n    context.ir.components.schemas = {};\n  }\n\n  context.ir.components.schemas[refToName($ref)] = schemaToIrSchema({\n    context,\n    schema,\n    state: {\n      $ref,\n      circularReferenceTracker: new Set(),\n    },\n  });\n};\n","import { getPaginationKeywordsRegExp } from '../../../ir/pagination';\nimport type { IR } from '../../../ir/types';\nimport type { SchemaType } from '../../shared/types/schema';\nimport type { ParameterObject, RequestBodyObject } from '../types/spec';\nimport type { SchemaObject } from '../types/spec';\nimport { mediaTypeObject } from './mediaType';\nimport { getSchemaTypes } from './schema';\n\nconst isPaginationType = (\n  schemaTypes: ReadonlyArray<SchemaType<SchemaObject>>,\n): boolean =>\n  schemaTypes.includes('boolean') ||\n  schemaTypes.includes('integer') ||\n  schemaTypes.includes('number') ||\n  schemaTypes.includes('string');\n\n// We handle only simple values for now, up to 1 nested field\nexport const paginationField = ({\n  context,\n  name,\n  schema,\n}: {\n  context: IR.Context;\n  name: string;\n  schema: SchemaObject;\n}): boolean | string => {\n  const paginationRegExp = getPaginationKeywordsRegExp(\n    context.config.input.pagination,\n  );\n  if (paginationRegExp.test(name)) {\n    return true;\n  }\n\n  if (schema.$ref) {\n    const ref = context.resolveRef<\n      ParameterObject | RequestBodyObject | SchemaObject\n    >(schema.$ref);\n\n    if ('content' in ref || 'in' in ref) {\n      let refSchema: SchemaObject | undefined;\n\n      if ('in' in ref) {\n        refSchema = ref.schema;\n      }\n\n      if (!refSchema) {\n        // parameter or body\n        const content = mediaTypeObject({ content: ref.content });\n        if (content?.schema) {\n          refSchema = content.schema;\n        }\n      }\n\n      if (!refSchema) {\n        return false;\n      }\n\n      return paginationField({\n        context,\n        name,\n        schema: refSchema,\n      });\n    }\n\n    return paginationField({\n      context,\n      name,\n      schema: ref,\n    });\n  }\n\n  for (const name in schema.properties) {\n    const paginationRegExp = getPaginationKeywordsRegExp(\n      context.config.input.pagination,\n    );\n\n    if (paginationRegExp.test(name)) {\n      const property = schema.properties[name]!;\n\n      if (typeof property !== 'boolean') {\n        // TODO: resolve deeper references\n        const schemaTypes = getSchemaTypes({ schema: property });\n\n        if (!schemaTypes.length) {\n          const compositionSchemas = property.anyOf ?? property.oneOf;\n          const nonNullCompositionSchemas = (compositionSchemas ?? []).filter(\n            (schema) => schema.type !== 'null',\n          );\n          if (nonNullCompositionSchemas.length === 1) {\n            const schemaTypes = getSchemaTypes({\n              schema: nonNullCompositionSchemas[0]!,\n            });\n            if (isPaginationType(schemaTypes)) {\n              return name;\n            }\n          }\n        }\n\n        if (isPaginationType(schemaTypes)) {\n          return name;\n        }\n      }\n    }\n  }\n\n  for (const allOf of schema.allOf ?? []) {\n    const pagination = paginationField({\n      context,\n      name,\n      schema: allOf,\n    });\n    if (pagination) {\n      return pagination;\n    }\n  }\n\n  return false;\n};\n","import type { IR } from '../../../ir/types';\nimport type { State } from '../../shared/types/state';\nimport { operationToId } from '../../shared/utils/operation';\nimport type {\n  OperationObject,\n  PathItemObject,\n  RequestBodyObject,\n  ResponseObject,\n  SecuritySchemeObject,\n} from '../types/spec';\nimport { contentToSchema, mediaTypeObject } from './mediaType';\nimport { paginationField } from './pagination';\nimport { schemaToIrSchema } from './schema';\n\ninterface Operation\n  extends Omit<OperationObject, 'parameters'>,\n    Pick<IR.OperationObject, 'parameters'> {}\n\nconst parseOperationJsDoc = ({\n  irOperation,\n  operation,\n}: {\n  irOperation: IR.OperationObject;\n  operation: Operation;\n}) => {\n  if (operation.deprecated !== undefined) {\n    irOperation.deprecated = operation.deprecated;\n  }\n\n  if (operation.description) {\n    irOperation.description = operation.description;\n  }\n\n  if (operation.summary) {\n    irOperation.summary = operation.summary;\n  }\n\n  if (operation.tags?.length) {\n    irOperation.tags = operation.tags;\n  }\n};\n\nconst initIrOperation = ({\n  context,\n  method,\n  operation,\n  path,\n  state,\n}: Pick<IR.OperationObject, 'method' | 'path'> & {\n  context: IR.Context;\n  operation: Operation;\n  state: State;\n}): IR.OperationObject => {\n  const irOperation: IR.OperationObject = {\n    id: operationToId({\n      context,\n      id: operation.operationId,\n      method,\n      path,\n      state,\n    }),\n    method,\n    path,\n  };\n\n  if (operation.operationId) {\n    irOperation.operationId = operation.operationId;\n  }\n\n  parseOperationJsDoc({\n    irOperation,\n    operation,\n  });\n\n  return irOperation;\n};\n\nconst operationToIrOperation = ({\n  context,\n  method,\n  operation,\n  path,\n  securitySchemesMap,\n  state,\n}: Pick<IR.OperationObject, 'method' | 'path'> & {\n  context: IR.Context;\n  operation: Operation;\n  securitySchemesMap: Map<string, SecuritySchemeObject>;\n  state: State;\n}): IR.OperationObject => {\n  const irOperation = initIrOperation({\n    context,\n    method,\n    operation,\n    path,\n    state,\n  });\n\n  if (operation.parameters) {\n    irOperation.parameters = operation.parameters;\n  }\n\n  if (operation.requestBody) {\n    const requestBody =\n      '$ref' in operation.requestBody\n        ? context.resolveRef<RequestBodyObject>(operation.requestBody.$ref)\n        : operation.requestBody;\n    const content = mediaTypeObject({\n      content: requestBody.content,\n    });\n    if (content) {\n      const pagination = paginationField({\n        context,\n        name: '',\n        schema: {\n          description: requestBody.description,\n          ...content.schema,\n        },\n      });\n\n      irOperation.body = {\n        mediaType: content.mediaType,\n        schema: schemaToIrSchema({\n          context,\n          schema: {\n            description: requestBody.description,\n            ...('$ref' in operation.requestBody\n              ? operation.requestBody\n              : content.schema),\n          },\n          state: undefined,\n        }),\n      };\n\n      if (pagination) {\n        irOperation.body.pagination = pagination;\n      }\n\n      if (requestBody.required) {\n        irOperation.body.required = requestBody.required;\n      }\n\n      if (content.type) {\n        irOperation.body.type = content.type;\n      }\n    }\n  }\n\n  for (const name in operation.responses) {\n    if (!irOperation.responses) {\n      irOperation.responses = {};\n    }\n\n    const response = operation.responses[name]!;\n    const responseObject =\n      '$ref' in response\n        ? context.resolveRef<ResponseObject>(response.$ref)\n        : response;\n    const content = mediaTypeObject({\n      content: responseObject.content,\n    });\n\n    if (content) {\n      irOperation.responses[name] = {\n        mediaType: content.mediaType,\n        schema: schemaToIrSchema({\n          context,\n          schema: {\n            description: responseObject.description,\n            ...contentToSchema({ content }),\n          },\n          state: undefined,\n        }),\n      };\n    } else {\n      irOperation.responses[name] = {\n        schema: {\n          description: responseObject.description,\n          // TODO: parser - cover all statues with empty response bodies\n          // 1xx, 204, 205, 304\n          type: name === '204' ? 'void' : 'unknown',\n        },\n      };\n    }\n  }\n\n  if (operation.security) {\n    const securitySchemeObjects: Array<IR.SecurityObject> = [];\n\n    for (const securityRequirementObject of operation.security) {\n      for (const name in securityRequirementObject) {\n        const securitySchemeObject = securitySchemesMap.get(name);\n\n        if (!securitySchemeObject) {\n          continue;\n        }\n\n        securitySchemeObjects.push(securitySchemeObject);\n      }\n    }\n\n    if (securitySchemeObjects.length) {\n      irOperation.security = securitySchemeObjects;\n    }\n  }\n\n  // TODO: parser - handle servers\n  // qux: operation.servers\n\n  return irOperation;\n};\n\nexport const parseOperation = ({\n  context,\n  method,\n  operation,\n  path,\n  securitySchemesMap,\n  state,\n}: {\n  context: IR.Context;\n  method: Extract<\n    keyof PathItemObject,\n    'delete' | 'get' | 'head' | 'options' | 'patch' | 'post' | 'put' | 'trace'\n  >;\n  operation: Operation;\n  path: keyof IR.PathsObject;\n  securitySchemesMap: Map<string, SecuritySchemeObject>;\n  state: State;\n}) => {\n  if (!context.ir.paths) {\n    context.ir.paths = {};\n  }\n\n  if (!context.ir.paths[path]) {\n    context.ir.paths[path] = {};\n  }\n\n  if (operation.servers) {\n    context.ir.servers = [...(context.ir.servers ?? []), ...operation.servers];\n  }\n\n  context.ir.paths[path][method] = operationToIrOperation({\n    context,\n    method,\n    operation,\n    path,\n    securitySchemesMap,\n    state,\n  });\n};\n","import type { IR } from '../../../ir/types';\nimport { refToName } from '../../../utils/ref';\nimport type {\n  ParameterObject,\n  ReferenceObject,\n  SchemaObject,\n} from '../types/spec';\nimport { mediaTypeObject } from './mediaType';\nimport { paginationField } from './pagination';\nimport { schemaToIrSchema } from './schema';\n\n/**\n * Returns default parameter `allowReserved` based on value of `in`.\n */\nconst defaultAllowReserved = (\n  _in: ParameterObject['in'],\n): boolean | undefined => {\n  switch (_in) {\n    // this keyword only applies to parameters with an `in` value of `query`\n    case 'query':\n      return false;\n    default:\n      return;\n  }\n};\n\n/**\n * Returns default parameter `explode` based on value of `style`.\n */\nconst defaultExplode = (style: Required<ParameterObject>['style']): boolean => {\n  switch (style) {\n    // default value for `deepObject` is `false`, but that behavior is undefined\n    // so we use `true` to make this work with the `client-fetch` package\n    case 'deepObject':\n    case 'form':\n      return true;\n    default:\n      return false;\n  }\n};\n\n/**\n * Returns default parameter `style` based on value of `in`.\n */\nconst defaultStyle = (\n  _in: ParameterObject['in'],\n): Required<ParameterObject>['style'] => {\n  switch (_in) {\n    case 'header':\n    case 'path':\n      return 'simple';\n    case 'cookie':\n    case 'query':\n      return 'form';\n  }\n};\n\nexport const parametersArrayToObject = ({\n  context,\n  parameters,\n}: {\n  context: IR.Context;\n  parameters?: ReadonlyArray<ParameterObject | ReferenceObject>;\n}): IR.ParametersObject | undefined => {\n  if (!parameters || !Object.keys(parameters).length) {\n    return;\n  }\n\n  const parametersObject: IR.ParametersObject = {};\n\n  for (const parameterOrReference of parameters) {\n    const parameter =\n      '$ref' in parameterOrReference\n        ? context.dereference<ParameterObject>(parameterOrReference)\n        : parameterOrReference;\n\n    if (!parametersObject[parameter.in]) {\n      parametersObject[parameter.in] = {};\n    }\n\n    // lowercase keys for case insensitive access\n    parametersObject[parameter.in]![parameter.name.toLocaleLowerCase()] =\n      parameterToIrParameter({\n        context,\n        parameter,\n      });\n  }\n\n  return parametersObject;\n};\n\nconst parameterToIrParameter = ({\n  context,\n  parameter,\n}: {\n  context: IR.Context;\n  parameter: ParameterObject;\n}): IR.ParameterObject => {\n  // TODO: parser - fix\n  let schema = parameter.schema;\n\n  if (!schema) {\n    const content = mediaTypeObject({\n      content: parameter.content,\n    });\n    if (content) {\n      schema = content.schema;\n    }\n  }\n\n  const finalSchema: SchemaObject = {\n    deprecated: parameter.deprecated,\n    description: parameter.description,\n    ...schema,\n  };\n\n  const pagination = paginationField({\n    context,\n    name: parameter.name,\n    schema: finalSchema,\n  });\n\n  const style = parameter.style || defaultStyle(parameter.in);\n  const explode =\n    parameter.explode !== undefined ? parameter.explode : defaultExplode(style);\n  const allowReserved =\n    parameter.allowReserved !== undefined\n      ? parameter.allowReserved\n      : defaultAllowReserved(parameter.in);\n\n  const irParameter: IR.ParameterObject = {\n    allowReserved,\n    explode,\n    location: parameter.in,\n    name: parameter.name,\n    schema: schemaToIrSchema({\n      context,\n      schema: finalSchema,\n      state: undefined,\n    }),\n    style,\n  };\n\n  if (parameter.deprecated) {\n    irParameter.deprecated = parameter.deprecated;\n  }\n\n  if (parameter.description) {\n    irParameter.description = parameter.description;\n  }\n\n  if (pagination) {\n    irParameter.pagination = pagination;\n  }\n\n  if (parameter.required) {\n    irParameter.required = parameter.required;\n  }\n\n  return irParameter;\n};\n\nexport const parseParameter = ({\n  $ref,\n  context,\n  parameter,\n}: {\n  $ref: string;\n  context: IR.Context;\n  parameter: ParameterObject;\n}) => {\n  if (!context.ir.components) {\n    context.ir.components = {};\n  }\n\n  if (!context.ir.components.parameters) {\n    context.ir.components.parameters = {};\n  }\n\n  context.ir.components.parameters[refToName($ref)] = parameterToIrParameter({\n    context,\n    parameter,\n  });\n};\n","import type { IR } from '../../../ir/types';\nimport { refToName } from '../../../utils/ref';\nimport type { RequestBodyObject, SchemaObject } from '../types/spec';\nimport { mediaTypeObject } from './mediaType';\nimport { schemaToIrSchema } from './schema';\n\nconst requestBodyToIrRequestBody = ({\n  context,\n  requestBody,\n}: {\n  context: IR.Context;\n  requestBody: RequestBodyObject;\n}): IR.RequestBodyObject => {\n  // TODO: parser - fix\n  const content = mediaTypeObject({\n    content: requestBody.content,\n  });\n  const schema = content ? content.schema : undefined;\n\n  const finalSchema: SchemaObject = {\n    description: requestBody.description,\n    ...schema,\n  };\n\n  const irRequestBody: IR.RequestBodyObject = {\n    schema: schemaToIrSchema({\n      context,\n      schema: finalSchema,\n      state: undefined,\n    }),\n  };\n\n  if (requestBody.description) {\n    irRequestBody.description = requestBody.description;\n  }\n\n  if (requestBody.required) {\n    irRequestBody.required = requestBody.required;\n  }\n\n  return irRequestBody;\n};\n\nexport const parseRequestBody = ({\n  $ref,\n  context,\n  requestBody,\n}: {\n  $ref: string;\n  context: IR.Context;\n  requestBody: RequestBodyObject;\n}) => {\n  if (!context.ir.components) {\n    context.ir.components = {};\n  }\n\n  if (!context.ir.components.requestBodies) {\n    context.ir.components.requestBodies = {};\n  }\n\n  context.ir.components.requestBodies[refToName($ref)] =\n    requestBodyToIrRequestBody({\n      context,\n      requestBody,\n    });\n};\n","import type { IR } from '../../../ir/types';\nimport { parseUrl } from '../../../utils/url';\n\nexport const parseServers = ({ context }: { context: IR.Context }) => {\n  if (context.spec.servers) {\n    context.ir.servers = context.spec.servers;\n    return;\n  }\n\n  if (typeof context.config.input.path === 'string') {\n    const url = parseUrl(context.config.input.path);\n    context.ir.servers = [\n      {\n        url: `${url.protocol ? `${url.protocol}://` : ''}${url.host}${url.port ? `:${url.port}` : ''}`,\n      },\n    ];\n  }\n\n  if (!context.ir.servers) {\n    context.ir.servers = [\n      {\n        url: '/',\n      },\n    ];\n  }\n};\n","import type { IR } from '../../../ir/types';\nimport type { State } from '../../shared/types/state';\nimport {\n  createFilteredDependencies,\n  createFilters,\n  hasFilters,\n} from '../../shared/utils/filter';\nimport type { Graph } from '../../shared/utils/graph';\nimport { mergeParametersObjects } from '../../shared/utils/parameter';\nimport { handleValidatorResult } from '../../shared/utils/validator';\nimport type {\n  OpenApiV3_1_X,\n  ParameterObject,\n  PathItemObject,\n  PathsObject,\n  RequestBodyObject,\n  SecuritySchemeObject,\n} from '../types/spec';\nimport { filterSpec } from './filter';\nimport { createGraph } from './graph';\nimport { parseOperation } from './operation';\nimport { parametersArrayToObject, parseParameter } from './parameter';\nimport { parseRequestBody } from './requestBody';\nimport { parseSchema } from './schema';\nimport { parseServers } from './server';\n\nexport const parseV3_1_X = (context: IR.Context<OpenApiV3_1_X>) => {\n  const shouldFilterSpec = hasFilters(context.config.input.filters);\n\n  let graph: Graph | undefined;\n\n  if (shouldFilterSpec || context.config.input.validate_EXPERIMENTAL) {\n    const result = createGraph({\n      spec: context.spec,\n      validate: Boolean(context.config.input.validate_EXPERIMENTAL),\n    });\n    graph = result.graph;\n    handleValidatorResult({ context, result });\n  }\n\n  if (shouldFilterSpec && graph) {\n    const filters = createFilters(context.config.input.filters, context.spec);\n    const sets = createFilteredDependencies({ filters, graph });\n    filterSpec({\n      ...sets,\n      preserveOrder: filters.preserveOrder,\n      spec: context.spec,\n    });\n  }\n\n  const state: State = {\n    ids: new Map(),\n  };\n  const securitySchemesMap = new Map<string, SecuritySchemeObject>();\n\n  // TODO: parser - handle more component types, old parser handles only parameters and schemas\n  if (context.spec.components) {\n    for (const name in context.spec.components.securitySchemes) {\n      const securityOrReference =\n        context.spec.components.securitySchemes[name]!;\n      const securitySchemeObject =\n        '$ref' in securityOrReference\n          ? context.resolveRef<SecuritySchemeObject>(securityOrReference.$ref)\n          : securityOrReference;\n      securitySchemesMap.set(name, securitySchemeObject);\n    }\n\n    for (const name in context.spec.components.parameters) {\n      const $ref = `#/components/parameters/${name}`;\n      const parameterOrReference = context.spec.components.parameters[name]!;\n      const parameter =\n        '$ref' in parameterOrReference\n          ? context.resolveRef<ParameterObject>(parameterOrReference.$ref)\n          : parameterOrReference;\n\n      parseParameter({\n        $ref,\n        context,\n        parameter,\n      });\n    }\n\n    for (const name in context.spec.components.requestBodies) {\n      const $ref = `#/components/requestBodies/${name}`;\n      const requestBodyOrReference =\n        context.spec.components.requestBodies[name]!;\n      const requestBody =\n        '$ref' in requestBodyOrReference\n          ? context.resolveRef<RequestBodyObject>(requestBodyOrReference.$ref)\n          : requestBodyOrReference;\n\n      parseRequestBody({\n        $ref,\n        context,\n        requestBody,\n      });\n    }\n\n    for (const name in context.spec.components.schemas) {\n      const $ref = `#/components/schemas/${name}`;\n      const schema = context.spec.components.schemas[name]!;\n\n      parseSchema({\n        $ref,\n        context,\n        schema,\n      });\n    }\n  }\n\n  parseServers({ context });\n\n  for (const path in context.spec.paths) {\n    const pathItem = context.spec.paths[path as keyof PathsObject]!;\n\n    const finalPathItem = pathItem.$ref\n      ? {\n          ...context.resolveRef<PathItemObject>(pathItem.$ref),\n          ...pathItem,\n        }\n      : pathItem;\n\n    const operationArgs: Omit<Parameters<typeof parseOperation>[0], 'method'> =\n      {\n        context,\n        operation: {\n          description: finalPathItem.description,\n          parameters: parametersArrayToObject({\n            context,\n            parameters: finalPathItem.parameters,\n          }),\n          security: context.spec.security,\n          servers: finalPathItem.servers,\n          summary: finalPathItem.summary,\n        },\n        path: path as keyof PathsObject,\n        securitySchemesMap,\n        state,\n      };\n\n    if (finalPathItem.delete) {\n      parseOperation({\n        ...operationArgs,\n        method: 'delete',\n        operation: {\n          ...operationArgs.operation,\n          ...finalPathItem.delete,\n          parameters: mergeParametersObjects({\n            source: parametersArrayToObject({\n              context,\n              parameters: finalPathItem.delete.parameters,\n            }),\n            target: operationArgs.operation.parameters,\n          }),\n        },\n      });\n    }\n\n    if (finalPathItem.get) {\n      parseOperation({\n        ...operationArgs,\n        method: 'get',\n        operation: {\n          ...operationArgs.operation,\n          ...finalPathItem.get,\n          parameters: mergeParametersObjects({\n            source: parametersArrayToObject({\n              context,\n              parameters: finalPathItem.get.parameters,\n            }),\n            target: operationArgs.operation.parameters,\n          }),\n        },\n      });\n    }\n\n    if (finalPathItem.head) {\n      parseOperation({\n        ...operationArgs,\n        method: 'head',\n        operation: {\n          ...operationArgs.operation,\n          ...finalPathItem.head,\n          parameters: mergeParametersObjects({\n            source: parametersArrayToObject({\n              context,\n              parameters: finalPathItem.head.parameters,\n            }),\n            target: operationArgs.operation.parameters,\n          }),\n        },\n      });\n    }\n\n    if (finalPathItem.options) {\n      parseOperation({\n        ...operationArgs,\n        method: 'options',\n        operation: {\n          ...operationArgs.operation,\n          ...finalPathItem.options,\n          parameters: mergeParametersObjects({\n            source: parametersArrayToObject({\n              context,\n              parameters: finalPathItem.options.parameters,\n            }),\n            target: operationArgs.operation.parameters,\n          }),\n        },\n      });\n    }\n\n    if (finalPathItem.patch) {\n      parseOperation({\n        ...operationArgs,\n        method: 'patch',\n        operation: {\n          ...operationArgs.operation,\n          ...finalPathItem.patch,\n          parameters: mergeParametersObjects({\n            source: parametersArrayToObject({\n              context,\n              parameters: finalPathItem.patch.parameters,\n            }),\n            target: operationArgs.operation.parameters,\n          }),\n        },\n      });\n    }\n\n    if (finalPathItem.post) {\n      parseOperation({\n        ...operationArgs,\n        method: 'post',\n        operation: {\n          ...operationArgs.operation,\n          ...finalPathItem.post,\n          parameters: mergeParametersObjects({\n            source: parametersArrayToObject({\n              context,\n              parameters: finalPathItem.post.parameters,\n            }),\n            target: operationArgs.operation.parameters,\n          }),\n        },\n      });\n    }\n\n    if (finalPathItem.put) {\n      parseOperation({\n        ...operationArgs,\n        method: 'put',\n        operation: {\n          ...operationArgs.operation,\n          ...finalPathItem.put,\n          parameters: mergeParametersObjects({\n            source: parametersArrayToObject({\n              context,\n              parameters: finalPathItem.put.parameters,\n            }),\n            target: operationArgs.operation.parameters,\n          }),\n        },\n      });\n    }\n\n    if (finalPathItem.trace) {\n      parseOperation({\n        ...operationArgs,\n        method: 'trace',\n        operation: {\n          ...operationArgs.operation,\n          ...finalPathItem.trace,\n          parameters: mergeParametersObjects({\n            source: parametersArrayToObject({\n              context,\n              parameters: finalPathItem.trace.parameters,\n            }),\n            target: operationArgs.operation.parameters,\n          }),\n        },\n      });\n    }\n  }\n};\n","export const refParametersPartial = '#/components/parameters/';\n\nexport const refSchemasPartial = '#/components/schemas/';\n","import { ensureValidTypeScriptJavaScriptIdentifier } from '../openApi';\nimport type { Config } from '../types/config';\nimport { getConfig } from './config';\nimport { reservedJavaScriptKeywordsRegExp } from './regexp';\nimport { stringCase } from './stringCase';\n\nexport const transformClassName = ({\n  config,\n  name,\n}: {\n  config: Config;\n  name: string;\n}) => {\n  const plugin = config.plugins['@hey-api/sdk'];\n  if (plugin?.classNameBuilder) {\n    let customName = '';\n\n    if (typeof plugin.classNameBuilder === 'function') {\n      customName = plugin.classNameBuilder(name);\n    } else {\n      customName = plugin.classNameBuilder.replace('{{name}}', name);\n    }\n\n    return customName;\n  }\n\n  return name;\n};\n\nexport const transformTypeName = (name: string) => {\n  const config = getConfig();\n  if (config.plugins['@hey-api/typescript']?.style === 'PascalCase') {\n    return stringCase({\n      case: 'PascalCase',\n      value: name,\n    });\n  }\n  return name;\n};\n\n/**\n * This method is meant to be used to process definition names\n * and return a cleaned up, transformed version that is legal\n * to use in the output code.\n *\n * For example, a definition with name \"400\" would result in \"_400\",\n * \"import\" would result in \"_import\", etc. This also respects the\n * casing configuration for types.\n *\n * @param name Name of the definition in OpenAPI specification.\n * @returns A cleaned up, transformed name usable in output code.\n */\nexport const cleanAndTransformTypeName = (name: string) => {\n  const transformed = transformTypeName(name);\n  const cleaned = ensureValidTypeScriptJavaScriptIdentifier(transformed);\n  const result = cleaned.replace(reservedJavaScriptKeywordsRegExp, '_$1');\n  return result;\n};\n","export function unique<T>(value: T, index: number, arr: T[]): boolean {\n  return arr.indexOf(value) === index;\n}\n","export function sort(a: string, b: string): number {\n  const nameA = a.toLocaleLowerCase();\n  const nameB = b.toLocaleLowerCase();\n  return nameA.localeCompare(nameB, 'en');\n}\n\nexport const sorterByName = <T extends { name: string }>(a: T, b: T) =>\n  sort(a.name, b.name);\n\nexport function sortByName<T extends { name: string }>(items: T[]): T[] {\n  return items.sort(sorterByName);\n}\n","import type { Enum, Model } from '../openApi';\nimport { ensureValidTypeScriptJavaScriptIdentifier } from '../openApi';\nimport { unescapeName } from './escape';\nimport { sort } from './sort';\nimport { unique } from './unique';\n\n/**\n * Sanitizes names of enums, so they are valid typescript identifiers of a certain form.\n *\n * 1: Replace all characters not legal as part of identifier with '_'\n * 2: Add '_' prefix if first character of enum name has character not legal for start of identifier\n * 3: Add '_' where the string transitions from lowercase to uppercase\n * 4: Transform the whole string to uppercase\n *\n * Javascript identifier regexp pattern retrieved from https://developer.mozilla.org/docs/Web/JavaScript/Reference/Lexical_grammar#identifiers\n */\nexport const enumKey = (value?: string | number, customName?: string) => {\n  if (customName) {\n    return customName;\n  }\n  // prefix numbers with underscore\n  if (typeof value === 'number') {\n    return `'_${value}'`;\n  }\n\n  let key = '';\n  if (typeof value === 'string') {\n    key = value\n      .replace(/[^$\\u200c\\u200d\\p{ID_Continue}]/gu, '_')\n      .replace(/^([^$_\\p{ID_Start}])/u, '_$1')\n      .replace(/(\\p{Lowercase})(\\p{Uppercase}+)/gu, '$1_$2');\n  }\n  key = key.trim();\n  if (!key) {\n    key = 'empty_string';\n  }\n  return key.toUpperCase();\n};\n\nexport const enumUnionType = (enums: Enum[]) =>\n  enums\n    .map((enumerator) => enumValue(enumerator.value, true))\n    .filter(unique)\n    .join(' | ');\n\nexport const enumValue = (value?: string | number, union: boolean = false) => {\n  if (typeof value === 'string') {\n    if (value.includes(\"'\") && union) {\n      return `\"${value}\"`;\n    }\n    return `'${value}'`;\n  }\n  return value;\n};\n\nexport const enumEntry = (enumerator: Enum) => {\n  const key = enumKey(enumerator.value, enumerator.customName);\n  const value = enumValue(enumerator.value);\n  return { key, value };\n};\n\n/**\n * Represent enum in `meta` object for deduplication\n */\nexport const enumMeta = (model: Model): Required<Model>['meta'] => {\n  // serialize enum values in namespace for quick lookup\n  const serialized = model.enum\n    .map((enumerator) => enumEntry(enumerator))\n    .sort((a, b) => sort(a.key, b.key))\n    .map((enumerator) => `${enumerator.key}=${enumerator.value}`)\n    .join('&');\n  return {\n    $ref: `enum/${model.name}/${serialized}`,\n    name: ensureValidTypeScriptJavaScriptIdentifier(unescapeName(model.name)),\n  };\n};\n","import { getType } from '../openApi';\nimport { refParametersPartial, refSchemasPartial } from './const';\nimport { reservedJavaScriptKeywordsRegExp } from './regexp';\nimport { cleanAndTransformTypeName } from './transform';\n\nexport const getParametersMeta = (definitionName: string) => {\n  const definitionType = getType({ type: definitionName });\n  /**\n   * Prefix parameter names to avoid name conflicts with schemas.\n   * Assuming people are mostly interested in importing schema types\n   * and don't care about this name as much. It should be resolved in\n   * a cleaner way, there just isn't a good deduplication strategy\n   * today. This is a workaround in the meantime, hopefully reducing\n   * the chance of conflicts.\n   *\n   * Example where this would break: schema named `ParameterFoo` and\n   * parameter named `Foo` (this would transform to `ParameterFoo`)\n   *\n   * Note: there's a related code to this workaround in `getType()`\n   * method that needs to be cleaned up when this is addressed.\n   */\n  const name = `Parameter${definitionType.base.replace(reservedJavaScriptKeywordsRegExp, '_$1')}`;\n  const meta = {\n    $ref: refParametersPartial + definitionName,\n    name,\n  };\n  return meta;\n};\n\n/**\n * @param definitionName Name of the schema definition in OpenAPI specification.\n * @returns meta object\n */\nexport const getSchemasMeta = (definitionName: string) => {\n  const name = cleanAndTransformTypeName(definitionName);\n  const meta = {\n    $ref: refSchemasPartial + definitionName,\n    name,\n  };\n  return meta;\n};\n","import type ts from 'typescript';\n\nimport { compiler, type Property } from '../compiler';\nimport type { Model } from '../openApi';\nimport { sanitizeOperationParameterName } from '../openApi';\nimport type { Client } from '../types/client';\nimport { getConfig, isLegacyClient } from './config';\nimport { refSchemasPartial } from './const';\nimport { enumValue } from './enum';\nimport { escapeComment, escapeName, unescapeName } from './escape';\nimport { getSchemasMeta } from './meta';\nimport { reservedJavaScriptKeywordsRegExp } from './regexp';\nimport { stringCase } from './stringCase';\nimport { unique } from './unique';\n\nexport const isModelDate = (model: Model): boolean =>\n  model.format === 'date' || model.format === 'date-time';\n\nconst base = (model: Model) => {\n  const config = getConfig();\n\n  if (model.base === 'binary') {\n    return compiler.typeUnionNode({\n      types: ['Blob', 'File'],\n    });\n  }\n\n  if (config.plugins['@hey-api/transformers']?.dates && isModelDate(model)) {\n    return compiler.typeNode('Date');\n  }\n\n  return compiler.typeNode(model.base);\n};\n\nconst typeReference = (model: Model) => {\n  // nullable is false when base is null to avoid duplicate null statements\n  const isNullable = model.base === 'null' ? false : model.isNullable;\n  let typeNode = base(model);\n  /**\n   * special handling for single reference. The current approach didn't handle\n   * transformed names, this fixes that. We should add a more robust solution,\n   * but this will work for now.\n   * {@link https://github.com/hey-api/openapi-ts/issues/768}\n   */\n  if (model.export === 'reference' && model.$refs.length === 1) {\n    if (model.$refs[0]!.startsWith(refSchemasPartial)) {\n      const meta = getSchemasMeta(model.base);\n      typeNode = compiler.typeNode(meta.name);\n    }\n  }\n  const unionNode = compiler.typeUnionNode({\n    isNullable,\n    types: [typeNode],\n  });\n  return unionNode;\n};\n\nconst typeArray = (model: Model) => {\n  if (model.link) {\n    // We treat an array of `model.link` as constant size array definition.\n    if (Array.isArray(model.link)) {\n      const types = model.link.map((m) => toType(m));\n      const tuple = compiler.typeTupleNode({\n        isNullable: model.isNullable,\n        types,\n      });\n      return tuple;\n    }\n\n    // Special case where we use tuple to define constant size array.\n    if (\n      model.export === 'array' &&\n      model.maxItems &&\n      model.minItems &&\n      model.maxItems === model.minItems &&\n      model.maxItems <= 100\n    ) {\n      const types = Array(model.maxItems).fill(toType(model.link));\n      const tuple = compiler.typeTupleNode({\n        isNullable: model.isNullable,\n        types,\n      });\n      return tuple;\n    }\n\n    return compiler.typeArrayNode([toType(model.link)], model.isNullable);\n  }\n\n  return compiler.typeArrayNode([base(model)], model.isNullable);\n};\n\nconst typeEnum = (model: Model) => {\n  const values = model.enum.map((enumerator) => enumValue(enumerator.value));\n  return compiler.typeUnionNode({\n    isNullable: model.isNullable,\n    types: values,\n  });\n};\n\nconst typeDict = (model: Model) => {\n  const type =\n    model.link && !Array.isArray(model.link) ? toType(model.link) : base(model);\n  return compiler.typeRecordNode(['string'], [type], model.isNullable, true);\n};\n\nconst typeUnionOrIntersection = ({\n  model,\n  style,\n}: {\n  model: Model;\n  style: 'intersection' | 'union';\n}) => {\n  const types = model.properties\n    .map((model) => {\n      const str = compiler.nodeToString({\n        node: toType(model),\n        unescape: true,\n      });\n      return str;\n    })\n    .filter(unique);\n\n  const node =\n    style === 'union'\n      ? compiler.typeUnionNode({\n          // avoid printing duplicate null statements\n          isNullable:\n            model.isNullable &&\n            !model.properties.find((property) => property.isNullable),\n          types,\n        })\n      : compiler.typeIntersectionNode({\n          isNullable: model.isNullable,\n          types,\n        });\n\n  // top-level models don't need parentheses around them\n  if (model.meta) {\n    return node;\n  }\n\n  return compiler.typeParenthesizedNode({\n    type: node,\n  });\n};\n\nconst typeInterface = (model: Model) => {\n  if (!model.properties.length) {\n    return compiler.typeNode('unknown');\n  }\n\n  const config = getConfig();\n\n  const isLegacy = isLegacyClient(config);\n\n  const properties: Property[] = model.properties.map((property) => {\n    let maybeRequired = property.isRequired ? '' : '?';\n    let value = toType(property);\n    let name = !isLegacy\n      ? escapeName(unescapeName(transformTypeKeyName(property.name)))\n      : // special test for 1XX status codes. We need a more robust system\n        // for escaping values depending on context in which they're printed,\n        // but since this works for client packages, it's not worth it right now\n        /^\\dXX$/.test(property.name)\n        ? escapeName(property.name)\n        : property.name;\n    // special case for additional properties type\n    if (property.name === '[key: string]') {\n      name = property.name;\n      if (maybeRequired) {\n        maybeRequired = '';\n        value = compiler.typeUnionNode({\n          types: [value, 'undefined'],\n        });\n      }\n    }\n    return {\n      comment: [\n        property.description && escapeComment(property.description),\n        property.deprecated && '@deprecated',\n      ],\n      isReadOnly: property.isReadOnly,\n      isRequired: maybeRequired === '',\n      name,\n      type: value,\n    };\n  });\n\n  return compiler.typeInterfaceNode({\n    isNullable: model.isNullable,\n    properties,\n    useLegacyResolution: true,\n  });\n};\n\nexport const toType = (model: Model): ts.TypeNode => {\n  switch (model.export) {\n    case 'all-of':\n      return typeUnionOrIntersection({\n        model,\n        style: 'intersection',\n      });\n    case 'any-of':\n    case 'one-of':\n      return typeUnionOrIntersection({\n        model,\n        style: 'union',\n      });\n    case 'array':\n      return typeArray(model);\n    case 'dictionary':\n      return typeDict(model);\n    case 'enum':\n      return typeEnum(model);\n    case 'interface':\n      return typeInterface(model);\n    case 'const':\n    case 'generic':\n    case 'reference':\n    default:\n      return typeReference(model);\n  }\n};\n\nexport interface SetUniqueTypeNameResult {\n  /**\n   * Did this function add a new property to the `client.types` object?\n   */\n  created: boolean;\n  /**\n   * Unique name for the exported type.\n   */\n  name: string;\n}\n\n/**\n * Generates a unique name for the exported type for given model meta.\n * @param args.client Internal client instance\n * @param args.count Unique key for deduplication\n * @param args.create If a name record does not exist, should it be created?\n * @param args.meta Meta property from the model\n * @param args.nameTransformer Function for transforming name into the final\n * value. In different contexts, a different strategy might be used. For\n * example, slashes `/` are invalid in TypeScript identifiers, but okay in\n * a JavaScript object key name.\n * @returns {SetUniqueTypeNameResult}\n */\nexport const setUniqueTypeName = ({\n  client,\n  count = 1,\n  create = false,\n  meta,\n  nameTransformer,\n}: Pick<Required<Model>, 'meta'> & {\n  client: Client;\n  count?: number;\n  create?: boolean;\n  nameTransformer?: (value: string) => string;\n}): SetUniqueTypeNameResult => {\n  let result: SetUniqueTypeNameResult = {\n    created: false,\n    name: '',\n  };\n  let name = meta.name;\n  if (nameTransformer) {\n    name = nameTransformer(name);\n  }\n  if (count > 1) {\n    name = `${name}${count}`;\n  }\n  const type = client.types[name];\n  if (!type) {\n    if (create) {\n      client.types[name] = meta;\n      result = {\n        created: true,\n        name,\n      };\n    }\n  } else if (type.$ref === meta.$ref) {\n    result = {\n      created: false,\n      name,\n    };\n  } else {\n    result = setUniqueTypeName({\n      client,\n      count: count + 1,\n      create,\n      meta,\n      nameTransformer,\n    });\n  }\n  return result;\n};\n\nexport interface UnsetUniqueTypeNameResult {\n  /**\n   * Did this function delete a property from the `client.types` object?\n   */\n  deleted: boolean;\n  /**\n   * Unique name removed from the `client.types` object.\n   */\n  name: string;\n}\n\nexport const unsetUniqueTypeName = ({\n  client,\n  name,\n}: {\n  client: Client;\n  name: string;\n}): UnsetUniqueTypeNameResult => {\n  let result: UnsetUniqueTypeNameResult = {\n    deleted: false,\n    name: '',\n  };\n  if (!client.types[name]) {\n    return result;\n  }\n  delete client.types[name];\n  result = {\n    deleted: true,\n    name,\n  };\n  return result;\n};\n\n/**\n * Replaces any invalid characters from a parameter name.\n * For example: 'filter.someProperty' becomes 'filterSomeProperty'.\n */\nexport const transformTypeKeyName = (value: string): string => {\n  const config = getConfig();\n\n  // transform only for legacy clients\n  if (!isLegacyClient(config)) {\n    return value;\n  }\n\n  const name = stringCase({\n    case: 'camelCase',\n    value: sanitizeOperationParameterName(value),\n  }).replace(reservedJavaScriptKeywordsRegExp, '_$1');\n  return name;\n};\n","import type { Config } from '../../../types/config';\nimport { getConfig, isLegacyClient } from '../../../utils/config';\nimport { stringCase } from '../../../utils/stringCase';\nimport { transformTypeKeyName } from '../../../utils/type';\nimport type {\n  OperationParameter,\n  OperationResponse,\n} from '../interfaces/client';\nimport { sanitizeNamespaceIdentifier } from './sanitize';\n\nexport const getOperationResponseHeader = (\n  operationResponses: OperationResponse[],\n): string | null => {\n  const header = operationResponses.find(\n    (operationResponses) => operationResponses.in === 'header',\n  );\n  if (header) {\n    return header.name;\n  }\n  return null;\n};\n\n/**\n * Does this operation have at least one required parameter?\n * @returns boolean\n */\nexport const isOperationParameterRequired = (\n  parameters: OperationParameter[],\n) => {\n  const isRequired = parameters.some((parameter) => parameter.isRequired);\n  return isRequired;\n};\n\n/**\n * Attempts to parse response status code from string into number.\n * @param value string status code from OpenAPI definition\n * @returns Parsed status code or null if invalid value\n */\nexport const parseResponseStatusCode = (\n  value: string,\n): OperationResponse['code'] | null => {\n  if (value === 'default') {\n    return 'default';\n  }\n\n  if (value === '1XX') {\n    return '1XX';\n  }\n\n  if (value === '2XX') {\n    return '2XX';\n  }\n\n  if (value === '3XX') {\n    return '3XX';\n  }\n\n  if (value === '4XX') {\n    return '4XX';\n  }\n\n  if (value === '5XX') {\n    return '5XX';\n  }\n\n  if (/\\d{3}/g.test(value)) {\n    const code = Number.parseInt(value, 10);\n    if (code >= 100 && code < 600) {\n      return code;\n    }\n  }\n\n  return null;\n};\n\nexport const sorterByResponseStatusCode = (\n  a: OperationResponse,\n  b: OperationResponse,\n) => {\n  if (a.code > b.code) {\n    return 1;\n  }\n\n  if (a.code < b.code) {\n    return -1;\n  }\n\n  return 0;\n};\n\nconst isErrorStatusCode = (code: OperationResponse['code']) =>\n  code === '3XX' ||\n  code === '4XX' ||\n  code === '5XX' ||\n  (typeof code === 'number' && code >= 300);\n\nconst isSuccessStatusCode = (code: OperationResponse['code']) =>\n  code === '2XX' || (typeof code === 'number' && code >= 200 && code < 300);\n\n/**\n * Detects whether default response is meant to be used\n * for error or success response.\n */\nconst inferDefaultResponseTypes = (\n  response: OperationResponse,\n  responses: OperationResponse[],\n) => {\n  let types: Array<'error' | 'success'> = [];\n\n  const addResponseType = (type: (typeof types)[number]) => {\n    if (!types.includes(type)) {\n      types = [...types, type];\n    }\n  };\n\n  const hasSuccessResponse = responses.some(({ code }) =>\n    isSuccessStatusCode(code),\n  );\n  if (!hasSuccessResponse) {\n    addResponseType('success');\n  }\n\n  const description = (response.description ?? '').toLocaleLowerCase();\n  const $refs = response.$refs.join('|').toLocaleLowerCase();\n\n  // must be in lowercase\n  const errorKeywords = ['error', 'problem'];\n  const successKeywords = ['success'];\n\n  if (\n    successKeywords.some(\n      (keyword) => description.includes(keyword) || $refs.includes(keyword),\n    )\n  ) {\n    addResponseType('success');\n  }\n\n  if (\n    errorKeywords.some(\n      (keyword) => description.includes(keyword) || $refs.includes(keyword),\n    )\n  ) {\n    addResponseType('error');\n  }\n\n  if (!types.length) {\n    addResponseType('error');\n  }\n\n  return types;\n};\n\nexport const operationFilterFn = ({\n  config,\n  operationKey,\n}: {\n  config: Config;\n  operationKey: string;\n}): boolean => {\n  const regexp = config.plugins['@hey-api/sdk']?.filter\n    ? new RegExp(config.plugins['@hey-api/sdk']?.filter)\n    : undefined;\n  return !regexp || regexp.test(operationKey);\n};\n\n/**\n * Convert the input value to a correct operation (method) class name.\n * This will use the operation ID - if available - and otherwise fallback\n * on a generated name from the URL\n */\nexport const operationNameFn = ({\n  config,\n  method,\n  operationId,\n  path,\n}: {\n  config: Config;\n  method: string;\n  operationId: string | undefined;\n  path: string;\n}): string => {\n  if (config.plugins['@hey-api/sdk']?.operationId && operationId) {\n    return stringCase({\n      case: 'camelCase',\n      value: sanitizeNamespaceIdentifier(operationId),\n    });\n  }\n\n  let urlWithoutPlaceholders = path;\n\n  // legacy clients ignore the \"api-version\" param since we do not want to\n  // add it as the first/default parameter for each of the service calls\n  if (isLegacyClient(config)) {\n    urlWithoutPlaceholders = urlWithoutPlaceholders.replace(\n      /[^/]*?{api-version}.*?\\//g,\n      '',\n    );\n  }\n\n  urlWithoutPlaceholders = urlWithoutPlaceholders\n    .replace(/{(.*?)}/g, 'by-$1')\n    // replace slashes with hyphens for camelcase method at the end\n    .replace(/[/:+]/g, '-');\n\n  return stringCase({\n    case: 'camelCase',\n    value: `${method}-${urlWithoutPlaceholders}`,\n  });\n};\n\nexport const operationParameterFilterFn = (\n  parameter: OperationParameter,\n): boolean => {\n  const config = getConfig();\n\n  // legacy clients ignore the \"api-version\" param since we do not want to\n  // add it as the first/default parameter for each of the service calls\n  return !isLegacyClient(config) || parameter.prop !== 'api-version';\n};\n\nexport const operationParameterNameFn = (\n  parameter: Omit<OperationParameter, 'name'>,\n): string => {\n  const config = getConfig();\n\n  return !isLegacyClient(config)\n    ? parameter.prop\n    : transformTypeKeyName(parameter.prop);\n};\n\nexport const tagResponseTypes = (responses: OperationResponse[]) =>\n  responses.map((response) => {\n    const { code } = response;\n    if (code === 'default') {\n      response.responseTypes = inferDefaultResponseTypes(response, responses);\n    } else if (isSuccessStatusCode(code)) {\n      response.responseTypes = ['success'];\n    } else if (isErrorStatusCode(code)) {\n      response.responseTypes = ['error'];\n    }\n    return response;\n  });\n","import { IRContext } from '../ir/context';\nimport type { IR } from '../ir/types';\nimport type { Config } from '../types/config';\nimport { parseV2_0_X } from './2.0.x';\nimport { parseV3_0_X } from './3.0.x';\nimport { parseV3_1_X } from './3.1.x';\nimport type { Client } from './common/interfaces/client';\nimport type { OpenApi as LegacyOpenApi } from './common/interfaces/OpenApi';\nimport type { OpenApi } from './types';\nimport { parse as parseV2 } from './v2';\nimport { parse as parseV3 } from './v3';\n\nexport type {\n  Client,\n  Enum,\n  Method,\n  Model,\n  ModelMeta,\n  Operation,\n  OperationParameter,\n  OperationResponse,\n} from './common/interfaces/client';\nexport type { OpenApi } from './common/interfaces/OpenApi';\nexport { isOperationParameterRequired } from './common/parser/operation';\nexport {\n  ensureValidTypeScriptJavaScriptIdentifier,\n  sanitizeNamespaceIdentifier,\n  sanitizeOperationParameterName,\n} from './common/parser/sanitize';\nexport { getType } from './common/parser/type';\nexport type { OpenApiSchema as OpenApiV2Schema } from './v2/interfaces/OpenApiSchema';\nexport type { OpenApiSchema as OpenApiV3Schema } from './v3/interfaces/OpenApiSchema';\n\n/**\n * Parse the OpenAPI specification to a Client model that contains\n * all the models, services and schema's we should output.\n * @param openApi The OpenAPI spec that we have loaded from disk.\n */\nexport function parseLegacy({\n  openApi,\n}: {\n  openApi: unknown;\n}): Omit<Client, 'config'> {\n  const spec = openApi as LegacyOpenApi;\n\n  if ('openapi' in spec) {\n    return parseV3(spec);\n  }\n\n  if ('swagger' in spec) {\n    return parseV2(spec);\n  }\n\n  throw new Error(\n    `Unsupported OpenAPI specification: ${JSON.stringify(spec, null, 2)}`,\n  );\n}\n\n/**\n * @internal\n * Parse the resolved OpenAPI specification. This will populate and return\n * `context` with intermediate representation obtained from the parsed spec.\n */\nexport const parseOpenApiSpec = ({\n  config,\n  spec,\n}: {\n  config: Config;\n  spec: unknown;\n}): IR.Context | undefined => {\n  const context = new IRContext({\n    config,\n    spec: spec as OpenApi.V2_0_X | OpenApi.V3_0_X | OpenApi.V3_1_X,\n  });\n\n  if ('swagger' in context.spec) {\n    parseV2_0_X(context as IR.Context<OpenApi.V2_0_X>);\n    return context;\n  }\n\n  switch (context.spec.openapi) {\n    case '3.0.0':\n    case '3.0.1':\n    case '3.0.2':\n    case '3.0.3':\n    case '3.0.4':\n      parseV3_0_X(context as IR.Context<OpenApi.V3_0_X>);\n      return context;\n    case '3.1.0':\n    case '3.1.1':\n      parseV3_1_X(context as IR.Context<OpenApi.V3_1_X>);\n      return context;\n    default:\n      break;\n  }\n\n  throw new Error('Unsupported OpenAPI specification');\n};\n","import { compiler } from '../../../compiler';\nimport { TypeScriptFile } from '../../../generate/files';\nimport type { OpenApiV2Schema, OpenApiV3Schema } from '../../../openApi';\nimport { ensureValidTypeScriptJavaScriptIdentifier } from '../../../openApi';\nimport { getConfig } from '../../../utils/config';\nimport type { Plugin } from '../../types';\nimport type { Config } from './types';\n\nconst ensureValidSchemaOutput = (\n  schema: unknown,\n  parentKey?: string,\n): object => {\n  const config = getConfig();\n\n  if (Array.isArray(schema)) {\n    return schema.map((item) => ensureValidSchemaOutput(item));\n  }\n\n  if (typeof schema !== 'object' || schema === null) {\n    return schema as object;\n  }\n\n  const result = { ...schema };\n  Object.entries(result).forEach(([key, value]) => {\n    if (config.plugins['@hey-api/schemas']?.type === 'form') {\n      if (\n        [\n          'description',\n          'x-enum-descriptions',\n          'x-enum-varnames',\n          'x-enumNames',\n          'title',\n        ].includes(key) &&\n        parentKey !== 'properties'\n      ) {\n        // @ts-expect-error\n        delete result[key];\n        return;\n      }\n    }\n\n    // refs are encoded probably by json-schema-ref-parser, didn't investigate\n    // further\n    if (key === '$ref' && typeof value === 'string') {\n      // @ts-expect-error\n      result[key] = decodeURIComponent(value);\n    }\n\n    if (value && typeof value === 'object') {\n      // @ts-expect-error\n      result[key] = ensureValidSchemaOutput(value, key);\n    }\n  });\n  return result;\n};\n\nconst toSchemaName = (\n  name: string,\n  schema: OpenApiV2Schema | OpenApiV3Schema,\n): string => {\n  const config = getConfig();\n\n  const validName = ensureValidTypeScriptJavaScriptIdentifier(name);\n\n  const plugin = config.plugins['@hey-api/schemas'];\n\n  if (plugin?.nameBuilder) {\n    if (typeof plugin.nameBuilder === 'function') {\n      return plugin.nameBuilder(validName, schema);\n    } else {\n      return plugin.nameBuilder.replace('{{name}}', validName);\n    }\n  }\n\n  return `${validName}Schema`;\n};\n\nexport const handlerLegacy: Plugin.LegacyHandler<Config> = ({\n  files,\n  openApi,\n  plugin,\n}) => {\n  const config = getConfig();\n\n  files.schemas = new TypeScriptFile({\n    dir: config.output.path,\n    exportFromIndex: plugin.exportFromIndex,\n    id: 'schemas',\n    name: 'schemas.ts',\n  });\n\n  const addSchema = (\n    name: string,\n    schema: OpenApiV2Schema | OpenApiV3Schema,\n  ) => {\n    const obj = ensureValidSchemaOutput(schema);\n    const expression = compiler.objectExpression({ obj });\n    const statement = compiler.constVariable({\n      assertion: 'const',\n      exportConst: true,\n      expression,\n      name: toSchemaName(name, schema),\n    });\n    files.schemas!.add(statement);\n  };\n\n  // OpenAPI 2.0\n  if ('swagger' in openApi) {\n    Object.entries(openApi.definitions ?? {}).forEach(([name, definition]) => {\n      addSchema(name, definition);\n    });\n  }\n\n  // OpenAPI 3.x\n  if ('openapi' in openApi) {\n    Object.entries(openApi.components?.schemas ?? {}).forEach(\n      ([name, schema]) => {\n        addSchema(name, schema);\n      },\n    );\n  }\n};\n","import type { Plugin } from '../../types';\nimport { handler } from './plugin';\nimport { handlerLegacy } from './plugin-legacy';\nimport type { Config } from './types';\n\nexport const defaultConfig: Plugin.Config<Config> = {\n  _handler: handler,\n  _handlerLegacy: handlerLegacy,\n  exportFromIndex: false,\n  name: '@hey-api/schemas',\n  nameBuilder: (name) => `${name}Schema`,\n  output: 'schemas',\n  type: 'json',\n};\n\n/**\n * Type helper for `@hey-api/schemas` plugin, returns {@link Plugin.Config} object\n */\nexport const defineConfig: Plugin.DefineConfig<Config> = (config) => ({\n  ...defaultConfig,\n  ...config,\n});\n","import type { Comments } from '../../../compiler';\nimport { hasOperationDataRequired } from '../../../ir/operation';\nimport type { IR } from '../../../ir/types';\nimport { escapeComment } from '../../../utils/escape';\nimport { getClientPlugin } from '../../@hey-api/client-core/utils';\n\nexport const createOperationComment = ({\n  operation,\n}: {\n  operation: IR.OperationObject;\n}): Comments | undefined => {\n  const comments: Array<string> = [];\n\n  if (operation.summary) {\n    comments.push(escapeComment(operation.summary));\n  }\n\n  if (operation.description) {\n    comments.push(escapeComment(operation.description));\n  }\n\n  if (operation.deprecated) {\n    comments.push('@deprecated');\n  }\n\n  return comments.length ? comments : undefined;\n};\n\nexport const isOperationOptionsRequired = ({\n  context,\n  operation,\n}: {\n  context: IR.Context;\n  operation: IR.OperationObject;\n}): boolean => {\n  const client = getClientPlugin(context.config);\n  const isNuxtClient = client.name === '@hey-api/client-nuxt';\n  const plugin = context.config.plugins['@hey-api/sdk'];\n  return (\n    (plugin && !plugin.client && !plugin.instance) ||\n    isNuxtClient ||\n    hasOperationDataRequired(operation)\n  );\n};\n","export const nuxtTypeComposable = 'TComposable';\nexport const nuxtTypeDefault = 'DefaultT';\nexport const nuxtTypeResponse = 'ResT';\n\nexport const sdkId = 'sdk';\n","import ts from 'typescript';\n\nimport { compiler } from '../../../compiler';\nimport {\n  createOperationKey,\n  operationResponsesMap,\n} from '../../../ir/operation';\nimport type { IR } from '../../../ir/types';\nimport { irRef } from '../../../utils/ref';\nimport { stringCase } from '../../../utils/stringCase';\nimport { operationIrRef } from '../../shared/utils/ref';\nimport type { Plugin } from '../../types';\nimport { typesId } from '../typescript/ref';\nimport type { Config } from './types';\n\ninterface OperationIRRef {\n  /**\n   * Operation ID\n   */\n  id: string;\n}\n\nconst bigIntExpressions = ({\n  dataExpression,\n}: {\n  dataExpression?: ts.Expression | string;\n}): Array<ts.Expression> => {\n  const bigIntCallExpression =\n    dataExpression !== undefined\n      ? compiler.callExpression({\n          functionName: 'BigInt',\n          parameters: [\n            compiler.callExpression({\n              functionName: compiler.propertyAccessExpression({\n                expression: dataExpression,\n                name: 'toString',\n              }),\n            }),\n          ],\n        })\n      : undefined;\n\n  if (bigIntCallExpression) {\n    if (typeof dataExpression === 'string') {\n      return [bigIntCallExpression];\n    }\n\n    if (dataExpression) {\n      return [\n        compiler.assignment({\n          left: dataExpression,\n          right: bigIntCallExpression,\n        }),\n      ];\n    }\n  }\n\n  return [];\n};\n\nconst dateExpressions = ({\n  dataExpression,\n}: {\n  dataExpression?: ts.Expression | string;\n}): Array<ts.Expression> => {\n  const identifierDate = compiler.identifier({ text: 'Date' });\n\n  if (typeof dataExpression === 'string') {\n    return [\n      compiler.newExpression({\n        argumentsArray: [compiler.identifier({ text: dataExpression })],\n        expression: identifierDate,\n      }),\n    ];\n  }\n\n  if (dataExpression) {\n    return [\n      compiler.assignment({\n        left: dataExpression,\n        right: compiler.newExpression({\n          argumentsArray: [dataExpression],\n          expression: identifierDate,\n        }),\n      }),\n    ];\n  }\n\n  return [];\n};\n\nexport const operationTransformerIrRef = ({\n  id,\n  type,\n}: OperationIRRef & {\n  type: 'data' | 'error' | 'response';\n}): string => {\n  let affix = '';\n  switch (type) {\n    case 'data':\n      affix = 'DataResponseTransformer';\n      break;\n    case 'error':\n      affix = 'ErrorResponseTransformer';\n      break;\n    case 'response':\n      affix = 'ResponseTransformer';\n      break;\n  }\n  return `${irRef}${stringCase({\n    // TODO: parser - do not pascalcase for functions, only for types\n    case: 'camelCase',\n    value: id,\n  })}${affix}`;\n};\n\nconst schemaIrRef = ({\n  $ref,\n  type,\n}: {\n  $ref: string;\n  type: 'response';\n}): string => {\n  let affix = '';\n  switch (type) {\n    case 'response':\n      affix = 'SchemaResponseTransformer';\n      break;\n  }\n  const parts = $ref.split('/');\n  return `${parts.slice(0, parts.length - 1).join('/')}/${stringCase({\n    case: 'camelCase',\n    value: parts[parts.length - 1]!,\n  })}${affix}`;\n};\n\nexport const schemaResponseTransformerRef = ({\n  $ref,\n}: {\n  $ref: string;\n}): string => schemaIrRef({ $ref, type: 'response' });\n\nexport const transformersId = 'transformers';\nconst dataVariableName = 'data';\n\nconst ensureStatements = (\n  nodes: Array<ts.Expression | ts.Statement>,\n): Array<ts.Statement> =>\n  nodes.map((node) =>\n    ts.isStatement(node)\n      ? node\n      : compiler.expressionToStatement({ expression: node }),\n  );\n\nconst isNodeReturnStatement = ({\n  node,\n}: {\n  node: ts.Expression | ts.Statement;\n}) => node.kind === ts.SyntaxKind.ReturnStatement;\n\nconst schemaResponseTransformerNodes = ({\n  context,\n  plugin,\n  schema,\n}: {\n  context: IR.Context;\n  plugin: Plugin.Instance<Config>;\n  schema: IR.SchemaObject;\n}): Array<ts.Expression | ts.Statement> => {\n  const identifierData = compiler.identifier({ text: dataVariableName });\n  const nodes = processSchemaType({\n    context,\n    dataExpression: identifierData,\n    plugin,\n    schema,\n  });\n  // append return statement if one does not already exist\n  if (\n    nodes.length &&\n    !isNodeReturnStatement({ node: nodes[nodes.length - 1]! })\n  ) {\n    nodes.push(compiler.returnStatement({ expression: identifierData }));\n  }\n  return nodes;\n};\n\nconst processSchemaType = ({\n  context,\n  dataExpression,\n  plugin,\n  schema,\n}: {\n  context: IR.Context;\n  dataExpression?: ts.Expression | string;\n  plugin: Plugin.Instance<Config>;\n  schema: IR.SchemaObject;\n}): Array<ts.Expression | ts.Statement> => {\n  const file = context.file({ id: transformersId })!;\n\n  if (schema.$ref) {\n    let identifier = file.identifier({\n      $ref: schemaResponseTransformerRef({ $ref: schema.$ref }),\n      create: true,\n      namespace: 'value',\n    });\n\n    if (identifier.created && identifier.name) {\n      // create each schema response transformer only once\n      const refSchema = context.resolveIrRef<IR.SchemaObject>(schema.$ref);\n      const nodes = schemaResponseTransformerNodes({\n        context,\n        plugin,\n        schema: refSchema,\n      });\n      if (nodes.length) {\n        const node = compiler.constVariable({\n          expression: compiler.arrowFunction({\n            async: false,\n            multiLine: true,\n            parameters: [\n              {\n                name: dataVariableName,\n                // TODO: parser - add types, generate types without transforms\n                type: compiler.keywordTypeNode({ keyword: 'any' }),\n              },\n            ],\n            statements: ensureStatements(nodes),\n          }),\n          name: identifier.name,\n        });\n        file.add(node);\n      } else {\n        // the created schema response transformer was empty, do not generate\n        // it and prevent any future attempts\n        identifier = file.blockIdentifier({\n          $ref: schemaResponseTransformerRef({ $ref: schema.$ref }),\n          namespace: 'value',\n        });\n      }\n    }\n\n    if (identifier.name) {\n      const callExpression = compiler.callExpression({\n        functionName: identifier.name,\n        parameters: [dataExpression],\n      });\n\n      if (dataExpression) {\n        // In a map callback, the item needs to be returned, not just the transformation result\n        if (typeof dataExpression === 'string' && dataExpression === 'item') {\n          return [\n            compiler.returnStatement({\n              expression: callExpression,\n            }),\n          ];\n        }\n\n        return [\n          typeof dataExpression === 'string'\n            ? callExpression\n            : compiler.assignment({\n                left: dataExpression,\n                right: callExpression,\n              }),\n        ];\n      }\n    }\n\n    return [];\n  }\n\n  if (schema.type === 'array') {\n    if (!dataExpression || typeof dataExpression === 'string') {\n      return [];\n    }\n\n    // TODO: parser - handle tuples and complex arrays\n    const nodes = !schema.items\n      ? []\n      : processSchemaType({\n          context,\n          dataExpression: 'item',\n          plugin,\n          schema: schema.items?.[0]\n            ? schema.items[0]\n            : {\n                ...schema,\n                type: undefined,\n              },\n        });\n\n    if (!nodes.length) {\n      return [];\n    }\n\n    // Ensure the map callback has a return statement for the item\n    const mapCallbackStatements = ensureStatements(nodes);\n    const hasReturnStatement = mapCallbackStatements.some((stmt) =>\n      isNodeReturnStatement({ node: stmt }),\n    );\n\n    if (!hasReturnStatement) {\n      mapCallbackStatements.push(\n        compiler.returnStatement({\n          expression: compiler.identifier({ text: 'item' }),\n        }),\n      );\n    }\n\n    return [\n      compiler.assignment({\n        left: dataExpression,\n        right: compiler.callExpression({\n          functionName: compiler.propertyAccessExpression({\n            expression: dataExpression,\n            name: 'map',\n          }),\n          parameters: [\n            compiler.arrowFunction({\n              multiLine: true,\n              parameters: [\n                {\n                  name: 'item',\n                  type: 'any',\n                },\n              ],\n              statements: mapCallbackStatements,\n            }),\n          ],\n        }),\n      }),\n    ];\n  }\n\n  if (schema.type === 'object') {\n    let nodes: Array<ts.Expression | ts.Statement> = [];\n    const required = schema.required ?? [];\n\n    for (const name in schema.properties) {\n      const property = schema.properties[name]!;\n      const propertyAccessExpression = compiler.propertyAccessExpression({\n        expression: dataExpression || dataVariableName,\n        name,\n      });\n      const propertyNodes = processSchemaType({\n        context,\n        dataExpression: propertyAccessExpression,\n        plugin,\n        schema: property,\n      });\n      if (!propertyNodes.length) {\n        continue;\n      }\n      const noNullableTypesInSchema = !property.items?.find(\n        (x) => x.type === 'null',\n      );\n      const requiredField = required.includes(name);\n      // Cannot fully rely on required fields\n      // Such value has to be present, but it doesn't guarantee that this value is not nullish\n      if (requiredField && noNullableTypesInSchema) {\n        nodes = nodes.concat(propertyNodes);\n      } else {\n        nodes.push(\n          // todo: Probably, it would make more sense to go with if(x !== undefined && x !== null) instead of if(x)\n          // this place influences all underlying transformers, while it's not exactly transformer itself\n          // Keep in mind that !!0 === false, so it already makes output for Bigint undesirable\n          compiler.ifStatement({\n            expression: propertyAccessExpression,\n            thenStatement: compiler.block({\n              statements: ensureStatements(propertyNodes),\n            }),\n          }),\n        );\n      }\n    }\n\n    return nodes;\n  }\n\n  if (\n    plugin.dates &&\n    schema.type === 'string' &&\n    (schema.format === 'date' || schema.format === 'date-time')\n  ) {\n    return dateExpressions({ dataExpression });\n  }\n\n  if (plugin.bigInt && schema.type === 'integer' && schema.format === 'int64') {\n    return bigIntExpressions({ dataExpression });\n  }\n\n  if (schema.items) {\n    if (schema.items.length === 1) {\n      return processSchemaType({\n        context,\n        dataExpression: 'item',\n        plugin,\n        schema: schema.items[0]!,\n      });\n    }\n\n    let arrayNodes: Array<ts.Expression | ts.Statement> = [];\n    // process 2 items if one of them is null\n    if (\n      schema.logicalOperator === 'and' ||\n      (schema.items.length === 2 &&\n        schema.items.find(\n          (item) => item.type === 'null' || item.type === 'void',\n        ))\n    ) {\n      for (const item of schema.items) {\n        const nodes = processSchemaType({\n          context,\n          dataExpression: dataExpression || 'item',\n          plugin,\n          schema: item,\n        });\n        if (nodes.length) {\n          if (dataExpression) {\n            arrayNodes = arrayNodes.concat(nodes);\n          } else {\n            const identifierItem = compiler.identifier({ text: 'item' });\n            // processed means the item was transformed\n            arrayNodes.push(\n              compiler.ifStatement({\n                expression: identifierItem,\n                thenStatement: compiler.block({\n                  statements: ensureStatements(nodes),\n                }),\n              }),\n              compiler.returnStatement({ expression: identifierItem }),\n            );\n          }\n        }\n      }\n      return arrayNodes;\n    }\n\n    // assume enums do not contain transformable values\n    if (schema.type !== 'enum') {\n      if (\n        !(schema.items ?? []).every((item) =>\n          (\n            ['boolean', 'integer', 'null', 'number', 'string'] as ReadonlyArray<\n              typeof item.type\n            >\n          ).includes(item.type),\n        )\n      ) {\n        console.warn(\n          `❗️ Transformers warning: schema ${JSON.stringify(schema)} is too complex and won't be currently processed. This will likely produce an incomplete transformer which is not what you want. Please open an issue if you'd like this improved https://github.com/hey-api/openapi-ts/issues`,\n        );\n      }\n    }\n  }\n\n  return [];\n};\n\n// handles only response transformers for now\nexport const handler: Plugin.Handler<Config> = ({ context, plugin }) => {\n  const file = context.createFile({\n    exportFromIndex: plugin.exportFromIndex,\n    id: transformersId,\n    path: plugin.output,\n  });\n\n  context.subscribe('operation', ({ operation }) => {\n    const { response } = operationResponsesMap(operation);\n\n    if (!response) {\n      return;\n    }\n\n    if (response.items && response.items.length > 1) {\n      if (context.config.logs.level === 'debug') {\n        console.warn(\n          `❗️ Transformers warning: route ${createOperationKey(operation)} has ${response.items.length} non-void success responses. This is currently not handled and we will not generate a response transformer. Please open an issue if you'd like this feature https://github.com/hey-api/openapi-ts/issues`,\n        );\n      }\n      return;\n    }\n\n    const identifierResponse = context.file({ id: typesId })!.identifier({\n      $ref: operationIrRef({\n        config: context.config,\n        id: operation.id,\n        type: 'response',\n      }),\n      namespace: 'type',\n    });\n    if (!identifierResponse.name) {\n      return;\n    }\n\n    let identifierResponseTransformer = file.identifier({\n      $ref: operationTransformerIrRef({ id: operation.id, type: 'response' }),\n      create: true,\n      namespace: 'value',\n    });\n    if (!identifierResponseTransformer.name) {\n      return;\n    }\n\n    // TODO: parser - consider handling simple string response which is also a date\n    const nodes = schemaResponseTransformerNodes({\n      context,\n      plugin,\n      schema: response,\n    });\n    if (nodes.length) {\n      file.import({\n        asType: true,\n        module: file.relativePathToFile({ context, id: typesId }),\n        name: identifierResponse.name,\n      });\n      const responseTransformerNode = compiler.constVariable({\n        exportConst: true,\n        expression: compiler.arrowFunction({\n          async: true,\n          multiLine: true,\n          parameters: [\n            {\n              name: dataVariableName,\n              // TODO: parser - add types, generate types without transforms\n              type: compiler.keywordTypeNode({ keyword: 'any' }),\n            },\n          ],\n          returnType: compiler.typeReferenceNode({\n            typeArguments: [\n              compiler.typeReferenceNode({\n                typeName: identifierResponse.name,\n              }),\n            ],\n            typeName: 'Promise',\n          }),\n          statements: ensureStatements(nodes),\n        }),\n        name: identifierResponseTransformer.name,\n      });\n      file.add(responseTransformerNode);\n    } else {\n      // the created schema response transformer was empty, do not generate\n      // it and prevent any future attempts\n      identifierResponseTransformer = file.blockIdentifier({\n        $ref: operationTransformerIrRef({\n          id: operation.id,\n          type: 'response',\n        }),\n        namespace: 'value',\n      });\n    }\n  });\n};\n","import type { IR } from '../../../ir/types';\nimport type { Plugin } from '../../types';\nimport type { Config } from './types';\n\n// copy-pasted from @hey-api/client-core, minus export statement\ninterface Auth {\n  /**\n   * Which part of the request do we use to send the auth?\n   *\n   * @default 'header'\n   */\n  in?: 'header' | 'query' | 'cookie';\n  /**\n   * Header or query parameter name.\n   *\n   * @default 'Authorization'\n   */\n  name?: string;\n  scheme?: 'basic' | 'bearer';\n  type: 'apiKey' | 'http';\n}\n\n// TODO: parser - handle more security types\nconst securitySchemeObjectToAuthObject = ({\n  securitySchemeObject,\n}: {\n  securitySchemeObject: IR.SecurityObject;\n}): Auth | undefined => {\n  if (securitySchemeObject.type === 'openIdConnect') {\n    return {\n      scheme: 'bearer',\n      type: 'http',\n    };\n  }\n\n  if (securitySchemeObject.type === 'oauth2') {\n    if (\n      securitySchemeObject.flows.password ||\n      securitySchemeObject.flows.authorizationCode ||\n      securitySchemeObject.flows.clientCredentials ||\n      securitySchemeObject.flows.implicit\n    ) {\n      return {\n        scheme: 'bearer',\n        type: 'http',\n      };\n    }\n\n    return;\n  }\n\n  if (securitySchemeObject.type === 'apiKey') {\n    if (securitySchemeObject.in === 'header') {\n      return {\n        name: securitySchemeObject.name,\n        type: 'apiKey',\n      };\n    }\n\n    if (\n      securitySchemeObject.in === 'query' ||\n      securitySchemeObject.in == 'cookie'\n    ) {\n      return {\n        in: securitySchemeObject.in,\n        name: securitySchemeObject.name,\n        type: 'apiKey',\n      };\n    }\n\n    return;\n  }\n\n  if (securitySchemeObject.type === 'http') {\n    const scheme = securitySchemeObject.scheme.toLowerCase();\n    if (scheme === 'bearer' || scheme === 'basic') {\n      return {\n        scheme: scheme as 'bearer' | 'basic',\n        type: 'http',\n      };\n    }\n\n    return;\n  }\n};\n\nexport const operationAuth = ({\n  operation,\n  plugin,\n}: {\n  context: IR.Context;\n  operation: IR.OperationObject;\n  plugin: Plugin.Instance<Config>;\n}): Array<Auth> => {\n  if (!operation.security || !plugin.auth) {\n    return [];\n  }\n\n  const auth: Array<Auth> = [];\n\n  for (const securitySchemeObject of operation.security) {\n    const authObject = securitySchemeObjectToAuthObject({\n      securitySchemeObject,\n    });\n    if (authObject) {\n      auth.push(authObject);\n    } else {\n      console.warn(\n        `❗️ SDK warning: unsupported security scheme. Please open an issue if you'd like it added https://github.com/hey-api/openapi-ts/issues\\n${JSON.stringify(securitySchemeObject, null, 2)}`,\n      );\n    }\n  }\n\n  return auth;\n};\n","import { compiler } from '../../compiler';\n\nexport const identifiers = {\n  /**\n   * {@link https://valibot.dev/api/#actions Actions}\n   */\n  actions: {\n    args: compiler.identifier({ text: 'args' }),\n    base64: compiler.identifier({ text: 'base64' }),\n    bic: compiler.identifier({ text: 'bic' }),\n    brand: compiler.identifier({ text: 'brand' }),\n    bytes: compiler.identifier({ text: 'bytes' }),\n    check: compiler.identifier({ text: 'check' }),\n    checkItems: compiler.identifier({ text: 'checkItems' }),\n    creditCard: compiler.identifier({ text: 'creditCard' }),\n    cuid2: compiler.identifier({ text: 'cuid2' }),\n    decimal: compiler.identifier({ text: 'decimal' }),\n    description: compiler.identifier({ text: 'description' }),\n    digits: compiler.identifier({ text: 'digits' }),\n    email: compiler.identifier({ text: 'email' }),\n    emoji: compiler.identifier({ text: 'emoji' }),\n    empty: compiler.identifier({ text: 'empty' }),\n    endsWith: compiler.identifier({ text: 'endsWith' }),\n    entries: compiler.identifier({ text: 'entries' }),\n    everyItem: compiler.identifier({ text: 'everyItem' }),\n    excludes: compiler.identifier({ text: 'excludes' }),\n    filterItems: compiler.identifier({ text: 'filterItems' }),\n    findItem: compiler.identifier({ text: 'findItem' }),\n    finite: compiler.identifier({ text: 'finite' }),\n    flavor: compiler.identifier({ text: 'flavor' }),\n    graphemes: compiler.identifier({ text: 'graphemes' }),\n    gtValue: compiler.identifier({ text: 'gtValue' }),\n    hash: compiler.identifier({ text: 'hash' }),\n    hexColor: compiler.identifier({ text: 'hexColor' }),\n    hexadecimal: compiler.identifier({ text: 'hexadecimal' }),\n    imei: compiler.identifier({ text: 'imei' }),\n    includes: compiler.identifier({ text: 'includes' }),\n    integer: compiler.identifier({ text: 'integer' }),\n    ip: compiler.identifier({ text: 'ip' }),\n    ipv4: compiler.identifier({ text: 'ipv4' }),\n    ipv6: compiler.identifier({ text: 'ipv6' }),\n    isoDate: compiler.identifier({ text: 'isoDate' }),\n    isoDateTime: compiler.identifier({ text: 'isoDateTime' }),\n    isoTime: compiler.identifier({ text: 'isoTime' }),\n    isoTimeSecond: compiler.identifier({ text: 'isoTimeSecond' }),\n    isoTimestamp: compiler.identifier({ text: 'isoTimestamp' }),\n    isoWeek: compiler.identifier({ text: 'isoWeek' }),\n    length: compiler.identifier({ text: 'length' }),\n    ltValue: compiler.identifier({ text: 'ltValue' }),\n    mac: compiler.identifier({ text: 'mac' }),\n    mac48: compiler.identifier({ text: 'mac48' }),\n    mac64: compiler.identifier({ text: 'mac64' }),\n    mapItems: compiler.identifier({ text: 'mapItems' }),\n    maxBytes: compiler.identifier({ text: 'maxBytes' }),\n    maxEntries: compiler.identifier({ text: 'maxEntries' }),\n    maxGraphemes: compiler.identifier({ text: 'maxGraphemes' }),\n    maxLength: compiler.identifier({ text: 'maxLength' }),\n    maxSize: compiler.identifier({ text: 'maxSize' }),\n    maxValue: compiler.identifier({ text: 'maxValue' }),\n    maxWords: compiler.identifier({ text: 'maxWords' }),\n    metadata: compiler.identifier({ text: 'metadata' }),\n    mimeType: compiler.identifier({ text: 'mimeType' }),\n    minBytes: compiler.identifier({ text: 'minBytes' }),\n    minEntries: compiler.identifier({ text: 'minEntries' }),\n    minGraphemes: compiler.identifier({ text: 'minGraphemes' }),\n    minLength: compiler.identifier({ text: 'minLength' }),\n    minSize: compiler.identifier({ text: 'minSize' }),\n    minValue: compiler.identifier({ text: 'minValue' }),\n    minWords: compiler.identifier({ text: 'minWords' }),\n    multipleOf: compiler.identifier({ text: 'multipleOf' }),\n    nanoid: compiler.identifier({ text: 'nanoid' }),\n    nonEmpty: compiler.identifier({ text: 'nonEmpty' }),\n    normalize: compiler.identifier({ text: 'normalize' }),\n    notBytes: compiler.identifier({ text: 'notBytes' }),\n    notEntries: compiler.identifier({ text: 'notEntries' }),\n    notGraphemes: compiler.identifier({ text: 'notGraphemes' }),\n    notLength: compiler.identifier({ text: 'notLength' }),\n    notSize: compiler.identifier({ text: 'notSize' }),\n    notValue: compiler.identifier({ text: 'notValue' }),\n    notValues: compiler.identifier({ text: 'notValues' }),\n    notWords: compiler.identifier({ text: 'notWords' }),\n    octal: compiler.identifier({ text: 'octal' }),\n    parseJson: compiler.identifier({ text: 'parseJson' }),\n    partialCheck: compiler.identifier({ text: 'partialCheck' }),\n    rawCheck: compiler.identifier({ text: 'rawCheck' }),\n    rawTransform: compiler.identifier({ text: 'rawTransform' }),\n    readonly: compiler.identifier({ text: 'readonly' }),\n    reduceItems: compiler.identifier({ text: 'reduceItems' }),\n    regex: compiler.identifier({ text: 'regex' }),\n    returns: compiler.identifier({ text: 'returns' }),\n    rfcEmail: compiler.identifier({ text: 'rfcEmail' }),\n    safeInteger: compiler.identifier({ text: 'safeInteger' }),\n    size: compiler.identifier({ text: 'size' }),\n    slug: compiler.identifier({ text: 'slug' }),\n    someItem: compiler.identifier({ text: 'someItem' }),\n    sortItems: compiler.identifier({ text: 'sortItems' }),\n    startsWith: compiler.identifier({ text: 'startsWith' }),\n    stringifyJson: compiler.identifier({ text: 'stringifyJson' }),\n    title: compiler.identifier({ text: 'title' }),\n    toLowerCase: compiler.identifier({ text: 'toLowerCase' }),\n    toMaxValue: compiler.identifier({ text: 'toMaxValue' }),\n    toMinValue: compiler.identifier({ text: 'toMinValue' }),\n    toUpperCase: compiler.identifier({ text: 'toUpperCase' }),\n    transform: compiler.identifier({ text: 'transform' }),\n    trim: compiler.identifier({ text: 'trim' }),\n    trimEnd: compiler.identifier({ text: 'trimEnd' }),\n    trimStart: compiler.identifier({ text: 'trimStart' }),\n    ulid: compiler.identifier({ text: 'ulid' }),\n    url: compiler.identifier({ text: 'url' }),\n    uuid: compiler.identifier({ text: 'uuid' }),\n    value: compiler.identifier({ text: 'value' }),\n    values: compiler.identifier({ text: 'values' }),\n    words: compiler.identifier({ text: 'words' }),\n  },\n  /**\n   * {@link https://valibot.dev/api/#async Async}\n   */\n  async: {\n    // TODO: implement if necessary\n  },\n  /**\n   * {@link https://valibot.dev/api/#methods Methods}\n   */\n  methods: {\n    assert: compiler.identifier({ text: 'assert' }),\n    config: compiler.identifier({ text: 'config' }),\n    fallback: compiler.identifier({ text: 'fallback' }),\n    flatten: compiler.identifier({ text: 'flatten' }),\n    forward: compiler.identifier({ text: 'forward' }),\n    getDefault: compiler.identifier({ text: 'getDefault' }),\n    getDefaults: compiler.identifier({ text: 'getDefaults' }),\n    getDescription: compiler.identifier({ text: 'getDescription' }),\n    getFallback: compiler.identifier({ text: 'getFallback' }),\n    getFallbacks: compiler.identifier({ text: 'getFallbacks' }),\n    getMetadata: compiler.identifier({ text: 'getMetadata' }),\n    getTitle: compiler.identifier({ text: 'getTitle' }),\n    is: compiler.identifier({ text: 'is' }),\n    keyof: compiler.identifier({ text: 'keyof' }),\n    message: compiler.identifier({ text: 'message' }),\n    omit: compiler.identifier({ text: 'omit' }),\n    parse: compiler.identifier({ text: 'parse' }),\n    parser: compiler.identifier({ text: 'parser' }),\n    partial: compiler.identifier({ text: 'partial' }),\n    pick: compiler.identifier({ text: 'pick' }),\n    pipe: compiler.identifier({ text: 'pipe' }),\n    required: compiler.identifier({ text: 'required' }),\n    safeParse: compiler.identifier({ text: 'safeParse' }),\n    safeParser: compiler.identifier({ text: 'safeParser' }),\n    summarize: compiler.identifier({ text: 'summarize' }),\n    unwrap: compiler.identifier({ text: 'unwrap' }),\n  },\n  /**\n   * {@link https://valibot.dev/api/#schemas Schemas}\n   */\n  schemas: {\n    any: compiler.identifier({ text: 'any' }),\n    array: compiler.identifier({ text: 'array' }),\n    bigInt: compiler.identifier({ text: 'bigint' }),\n    blob: compiler.identifier({ text: 'blob' }),\n    boolean: compiler.identifier({ text: 'boolean' }),\n    custom: compiler.identifier({ text: 'custom' }),\n    date: compiler.identifier({ text: 'date' }),\n    enum: compiler.identifier({ text: 'enum' }),\n    exactOptional: compiler.identifier({ text: 'exactOptional' }),\n    file: compiler.identifier({ text: 'file' }),\n    function: compiler.identifier({ text: 'function' }),\n    instance: compiler.identifier({ text: 'instance' }),\n    intersect: compiler.identifier({ text: 'intersect' }),\n    lazy: compiler.identifier({ text: 'lazy' }),\n    literal: compiler.identifier({ text: 'literal' }),\n    looseObject: compiler.identifier({ text: 'looseObject' }),\n    looseTuple: compiler.identifier({ text: 'looseTuple' }),\n    map: compiler.identifier({ text: 'map' }),\n    nan: compiler.identifier({ text: 'nan' }),\n    never: compiler.identifier({ text: 'never' }),\n    nonNullable: compiler.identifier({ text: 'nonNullable' }),\n    nonNullish: compiler.identifier({ text: 'nonNullish' }),\n    nonOptional: compiler.identifier({ text: 'nonOptional' }),\n    null: compiler.identifier({ text: 'null' }),\n    nullable: compiler.identifier({ text: 'nullable' }),\n    nullish: compiler.identifier({ text: 'nullish' }),\n    number: compiler.identifier({ text: 'number' }),\n    object: compiler.identifier({ text: 'object' }),\n    objectWithRest: compiler.identifier({ text: 'objectWithRest' }),\n    optional: compiler.identifier({ text: 'optional' }),\n    picklist: compiler.identifier({ text: 'picklist' }),\n    promise: compiler.identifier({ text: 'promise' }),\n    record: compiler.identifier({ text: 'record' }),\n    set: compiler.identifier({ text: 'set' }),\n    strictObject: compiler.identifier({ text: 'strictObject' }),\n    strictTuple: compiler.identifier({ text: 'strictTuple' }),\n    string: compiler.identifier({ text: 'string' }),\n    symbol: compiler.identifier({ text: 'symbol' }),\n    tuple: compiler.identifier({ text: 'tuple' }),\n    tupleWithRest: compiler.identifier({ text: 'tupleWithRest' }),\n    undefined: compiler.identifier({ text: 'undefined' }),\n    undefinedable: compiler.identifier({ text: 'undefinedable' }),\n    union: compiler.identifier({ text: 'union' }),\n    unknown: compiler.identifier({ text: 'unknown' }),\n    variant: compiler.identifier({ text: 'variant' }),\n    void: compiler.identifier({ text: 'void' }),\n  },\n  /**\n   * {@link https://valibot.dev/api/#storages Storages}\n   */\n  storages: {\n    // TODO: implement if necessary\n  },\n  /**\n   * {@link https://valibot.dev/api/#types Types}\n   */\n  types: {\n    // TODO: implement if necessary\n    GenericSchema: compiler.identifier({ text: 'GenericSchema' }),\n  },\n  /**\n   * {@link https://valibot.dev/api/#utils Utils}\n   */\n  utils: {\n    // TODO: implement if necessary\n  },\n  v: compiler.identifier({ text: 'v' }),\n};\n\nexport const valibotId = 'valibot';\n","import ts from 'typescript';\n\nimport { compiler } from '../../compiler';\nimport { operationResponsesMap } from '../../ir/operation';\nimport { deduplicateSchema } from '../../ir/schema';\nimport type { IR } from '../../ir/types';\nimport { numberRegExp } from '../../utils/regexp';\nimport { operationIrRef } from '../shared/utils/ref';\nimport { createSchemaComment } from '../shared/utils/schema';\nimport type { Plugin } from '../types';\nimport type { Config } from './types';\n\ninterface SchemaWithType<T extends Required<IR.SchemaObject>['type']>\n  extends Omit<IR.SchemaObject, 'type'> {\n  type: Extract<Required<IR.SchemaObject>['type'], T>;\n}\n\ninterface Result {\n  circularReferenceTracker: Set<string>;\n  hasCircularReference: boolean;\n}\n\nexport const zodId = 'zod';\n\n// frequently used identifiers\nconst andIdentifier = compiler.identifier({ text: 'and' });\nconst coerceIdentifier = compiler.identifier({ text: 'coerce' });\nconst defaultIdentifier = compiler.identifier({ text: 'default' });\nconst intersectionIdentifier = compiler.identifier({ text: 'intersection' });\nconst lazyIdentifier = compiler.identifier({ text: 'lazy' });\nconst lengthIdentifier = compiler.identifier({ text: 'length' });\nconst literalIdentifier = compiler.identifier({ text: 'literal' });\nconst maxIdentifier = compiler.identifier({ text: 'max' });\nconst minIdentifier = compiler.identifier({ text: 'min' });\nconst objectIdentifier = compiler.identifier({ text: 'object' });\nconst optionalIdentifier = compiler.identifier({ text: 'optional' });\nconst readonlyIdentifier = compiler.identifier({ text: 'readonly' });\nconst regexIdentifier = compiler.identifier({ text: 'regex' });\nconst unionIdentifier = compiler.identifier({ text: 'union' });\nconst zIdentifier = compiler.identifier({ text: 'z' });\n\nconst nameTransformer = (name: string) => `z-${name}`;\n\nconst arrayTypeToZodSchema = ({\n  context,\n  plugin,\n  result,\n  schema,\n}: {\n  context: IR.Context;\n  plugin: Plugin.Instance<Config>;\n  result: Result;\n  schema: SchemaWithType<'array'>;\n}): ts.CallExpression => {\n  const functionName = compiler.propertyAccessExpression({\n    expression: zIdentifier,\n    name: compiler.identifier({ text: 'array' }),\n  });\n\n  let arrayExpression: ts.CallExpression | undefined;\n\n  if (!schema.items) {\n    arrayExpression = compiler.callExpression({\n      functionName,\n      parameters: [\n        unknownTypeToZodSchema({\n          context,\n          schema: {\n            type: 'unknown',\n          },\n        }),\n      ],\n    });\n  } else {\n    schema = deduplicateSchema({ schema });\n\n    // at least one item is guaranteed\n    const itemExpressions = schema.items!.map((item) =>\n      schemaToZodSchema({\n        context,\n        plugin,\n        result,\n        schema: item,\n      }),\n    );\n\n    if (itemExpressions.length === 1) {\n      arrayExpression = compiler.callExpression({\n        functionName,\n        parameters: itemExpressions,\n      });\n    } else {\n      if (schema.logicalOperator === 'and') {\n        // TODO: parser - handle intersection\n        // return compiler.typeArrayNode(\n        //   compiler.typeIntersectionNode({ types: itemExpressions }),\n        // );\n      }\n\n      // TODO: parser - handle union\n      // return compiler.typeArrayNode(compiler.typeUnionNode({ types: itemExpressions }));\n\n      arrayExpression = compiler.callExpression({\n        functionName,\n        parameters: [\n          unknownTypeToZodSchema({\n            context,\n            schema: {\n              type: 'unknown',\n            },\n          }),\n        ],\n      });\n    }\n  }\n\n  if (schema.minItems === schema.maxItems && schema.minItems !== undefined) {\n    arrayExpression = compiler.callExpression({\n      functionName: compiler.propertyAccessExpression({\n        expression: arrayExpression,\n        name: lengthIdentifier,\n      }),\n      parameters: [compiler.valueToExpression({ value: schema.minItems })],\n    });\n  } else {\n    if (schema.minItems !== undefined) {\n      arrayExpression = compiler.callExpression({\n        functionName: compiler.propertyAccessExpression({\n          expression: arrayExpression,\n          name: minIdentifier,\n        }),\n        parameters: [compiler.valueToExpression({ value: schema.minItems })],\n      });\n    }\n\n    if (schema.maxItems !== undefined) {\n      arrayExpression = compiler.callExpression({\n        functionName: compiler.propertyAccessExpression({\n          expression: arrayExpression,\n          name: maxIdentifier,\n        }),\n        parameters: [compiler.valueToExpression({ value: schema.maxItems })],\n      });\n    }\n  }\n\n  return arrayExpression;\n};\n\nconst booleanTypeToZodSchema = ({\n  schema,\n}: {\n  context: IR.Context;\n  schema: SchemaWithType<'boolean'>;\n}) => {\n  if (typeof schema.const === 'boolean') {\n    const expression = compiler.callExpression({\n      functionName: compiler.propertyAccessExpression({\n        expression: zIdentifier,\n        name: literalIdentifier,\n      }),\n      parameters: [compiler.ots.boolean(schema.const)],\n    });\n    return expression;\n  }\n\n  const expression = compiler.callExpression({\n    functionName: compiler.propertyAccessExpression({\n      expression: zIdentifier,\n      name: compiler.identifier({ text: 'boolean' }),\n    }),\n  });\n  return expression;\n};\n\nconst enumTypeToZodSchema = ({\n  context,\n  schema,\n}: {\n  context: IR.Context;\n  schema: SchemaWithType<'enum'>;\n}): ts.CallExpression => {\n  const enumMembers: Array<ts.LiteralExpression> = [];\n\n  let isNullable = false;\n\n  for (const item of schema.items ?? []) {\n    // Zod supports only string enums\n    if (item.type === 'string' && typeof item.const === 'string') {\n      enumMembers.push(\n        compiler.stringLiteral({\n          text: item.const,\n        }),\n      );\n    } else if (item.type === 'null' || item.const === null) {\n      isNullable = true;\n    }\n  }\n\n  if (!enumMembers.length) {\n    return unknownTypeToZodSchema({\n      context,\n      schema: {\n        type: 'unknown',\n      },\n    });\n  }\n\n  let enumExpression = compiler.callExpression({\n    functionName: compiler.propertyAccessExpression({\n      expression: zIdentifier,\n      name: compiler.identifier({ text: 'enum' }),\n    }),\n    parameters: [\n      compiler.arrayLiteralExpression({\n        elements: enumMembers,\n        multiLine: false,\n      }),\n    ],\n  });\n\n  if (isNullable) {\n    enumExpression = compiler.callExpression({\n      functionName: compiler.propertyAccessExpression({\n        expression: enumExpression,\n        name: compiler.identifier({ text: 'nullable' }),\n      }),\n    });\n  }\n\n  return enumExpression;\n};\n\nconst neverTypeToZodSchema = ({\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  schema,\n}: {\n  context: IR.Context;\n  schema: SchemaWithType<'never'>;\n}) => {\n  const expression = compiler.callExpression({\n    functionName: compiler.propertyAccessExpression({\n      expression: zIdentifier,\n      name: compiler.identifier({ text: 'never' }),\n    }),\n  });\n  return expression;\n};\n\nconst nullTypeToZodSchema = ({\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  schema,\n}: {\n  context: IR.Context;\n  schema: SchemaWithType<'null'>;\n}) => {\n  const expression = compiler.callExpression({\n    functionName: compiler.propertyAccessExpression({\n      expression: zIdentifier,\n      name: compiler.identifier({ text: 'null' }),\n    }),\n  });\n  return expression;\n};\n\nconst numberParameter = ({\n  isBigInt,\n  value,\n}: {\n  isBigInt: boolean;\n  value: unknown;\n}) => {\n  const expression = compiler.valueToExpression({ value });\n\n  if (\n    isBigInt &&\n    (typeof value === 'bigint' ||\n      typeof value === 'number' ||\n      typeof value === 'string' ||\n      typeof value === 'boolean')\n  ) {\n    return compiler.callExpression({\n      functionName: 'BigInt',\n      parameters: [expression],\n    });\n  }\n\n  return expression;\n};\n\nconst numberTypeToZodSchema = ({\n  schema,\n}: {\n  context: IR.Context;\n  schema: SchemaWithType<'integer' | 'number'>;\n}) => {\n  const isBigInt = schema.type === 'integer' && schema.format === 'int64';\n\n  if (typeof schema.const === 'number') {\n    // TODO: parser - handle bigint constants\n    const expression = compiler.callExpression({\n      functionName: compiler.propertyAccessExpression({\n        expression: zIdentifier,\n        name: literalIdentifier,\n      }),\n      parameters: [compiler.ots.number(schema.const)],\n    });\n    return expression;\n  }\n\n  let numberExpression = compiler.callExpression({\n    functionName: isBigInt\n      ? compiler.propertyAccessExpression({\n          expression: compiler.propertyAccessExpression({\n            expression: zIdentifier,\n            name: coerceIdentifier,\n          }),\n          name: compiler.identifier({ text: 'bigint' }),\n        })\n      : compiler.propertyAccessExpression({\n          expression: zIdentifier,\n          name: compiler.identifier({ text: 'number' }),\n        }),\n  });\n\n  if (!isBigInt && schema.type === 'integer') {\n    numberExpression = compiler.callExpression({\n      functionName: compiler.propertyAccessExpression({\n        expression: numberExpression,\n        name: compiler.identifier({ text: 'int' }),\n      }),\n    });\n  }\n\n  if (schema.exclusiveMinimum !== undefined) {\n    numberExpression = compiler.callExpression({\n      functionName: compiler.propertyAccessExpression({\n        expression: numberExpression,\n        name: compiler.identifier({ text: 'gt' }),\n      }),\n      parameters: [\n        numberParameter({ isBigInt, value: schema.exclusiveMinimum }),\n      ],\n    });\n  } else if (schema.minimum !== undefined) {\n    numberExpression = compiler.callExpression({\n      functionName: compiler.propertyAccessExpression({\n        expression: numberExpression,\n        name: compiler.identifier({ text: 'gte' }),\n      }),\n      parameters: [numberParameter({ isBigInt, value: schema.minimum })],\n    });\n  }\n\n  if (schema.exclusiveMaximum !== undefined) {\n    numberExpression = compiler.callExpression({\n      functionName: compiler.propertyAccessExpression({\n        expression: numberExpression,\n        name: compiler.identifier({ text: 'lt' }),\n      }),\n      parameters: [\n        numberParameter({ isBigInt, value: schema.exclusiveMaximum }),\n      ],\n    });\n  } else if (schema.maximum !== undefined) {\n    numberExpression = compiler.callExpression({\n      functionName: compiler.propertyAccessExpression({\n        expression: numberExpression,\n        name: compiler.identifier({ text: 'lte' }),\n      }),\n      parameters: [numberParameter({ isBigInt, value: schema.maximum })],\n    });\n  }\n\n  return numberExpression;\n};\n\nconst objectTypeToZodSchema = ({\n  context,\n  plugin,\n  result,\n  schema,\n}: {\n  context: IR.Context;\n  plugin: Plugin.Instance<Config>;\n  result: Result;\n  schema: SchemaWithType<'object'>;\n}): {\n  anyType: string;\n  expression: ts.CallExpression;\n} => {\n  // TODO: parser - handle constants\n  const properties: Array<ts.PropertyAssignment> = [];\n\n  // let indexProperty: Property | undefined;\n  // const schemaProperties: Array<Property> = [];\n  // let indexPropertyItems: Array<IR.SchemaObject> = [];\n  const required = schema.required ?? [];\n  // let hasOptionalProperties = false;\n\n  for (const name in schema.properties) {\n    const property = schema.properties[name]!;\n    const isRequired = required.includes(name);\n\n    const propertyExpression = schemaToZodSchema({\n      context,\n      optional: !isRequired,\n      plugin,\n      result,\n      schema: property,\n    });\n\n    numberRegExp.lastIndex = 0;\n    let propertyName;\n    if (numberRegExp.test(name)) {\n      // For numeric literals, we'll handle negative numbers by using a string literal\n      // instead of trying to use a PrefixUnaryExpression\n      propertyName = name.startsWith('-')\n        ? ts.factory.createStringLiteral(name)\n        : ts.factory.createNumericLiteral(name);\n    } else {\n      propertyName = name;\n    }\n    // TODO: parser - abstract safe property name logic\n    if (\n      ((name.match(/^[0-9]/) && name.match(/\\D+/g)) || name.match(/\\W/g)) &&\n      !name.startsWith(\"'\") &&\n      !name.endsWith(\"'\")\n    ) {\n      propertyName = `'${name}'`;\n    }\n    properties.push(\n      compiler.propertyAssignment({\n        initializer: propertyExpression,\n        name: propertyName,\n      }),\n    );\n\n    // indexPropertyItems.push(property);\n    // if (!isRequired) {\n    //   hasOptionalProperties = true;\n    // }\n  }\n\n  // if (\n  //   schema.additionalProperties &&\n  //   (schema.additionalProperties.type !== 'never' || !indexPropertyItems.length)\n  // ) {\n  //   if (schema.additionalProperties.type === 'never') {\n  //     indexPropertyItems = [schema.additionalProperties];\n  //   } else {\n  //     indexPropertyItems.unshift(schema.additionalProperties);\n  //   }\n\n  //   if (hasOptionalProperties) {\n  //     indexPropertyItems.push({\n  //       type: 'undefined',\n  //     });\n  //   }\n\n  //   indexProperty = {\n  //     isRequired: true,\n  //     name: 'key',\n  //     type: schemaToZodSchema({\n  //       context,\n  //       schema:\n  //         indexPropertyItems.length === 1\n  //           ? indexPropertyItems[0]\n  //           : {\n  //               items: indexPropertyItems,\n  //               logicalOperator: 'or',\n  //             },\n  //     }),\n  //   };\n  // }\n\n  // return compiler.typeInterfaceNode({\n  //   indexProperty,\n  //   properties: schemaProperties,\n  //   useLegacyResolution: false,\n  // });\n  const expression = compiler.callExpression({\n    functionName: compiler.propertyAccessExpression({\n      expression: zIdentifier,\n      name: objectIdentifier,\n    }),\n    parameters: [ts.factory.createObjectLiteralExpression(properties, true)],\n  });\n  return {\n    anyType: 'AnyZodObject',\n    expression,\n  };\n};\n\nconst stringTypeToZodSchema = ({\n  schema,\n}: {\n  context: IR.Context;\n  schema: SchemaWithType<'string'>;\n}) => {\n  if (typeof schema.const === 'string') {\n    const expression = compiler.callExpression({\n      functionName: compiler.propertyAccessExpression({\n        expression: zIdentifier,\n        name: literalIdentifier,\n      }),\n      parameters: [compiler.ots.string(schema.const)],\n    });\n    return expression;\n  }\n\n  let stringExpression = compiler.callExpression({\n    functionName: compiler.propertyAccessExpression({\n      expression: zIdentifier,\n      name: compiler.identifier({ text: 'string' }),\n    }),\n  });\n\n  if (schema.format) {\n    switch (schema.format) {\n      case 'date-time':\n        stringExpression = compiler.callExpression({\n          functionName: compiler.propertyAccessExpression({\n            expression: stringExpression,\n            name: compiler.identifier({ text: 'datetime' }),\n          }),\n        });\n        break;\n      case 'ipv4':\n      case 'ipv6':\n        stringExpression = compiler.callExpression({\n          functionName: compiler.propertyAccessExpression({\n            expression: stringExpression,\n            name: compiler.identifier({ text: 'ip' }),\n          }),\n        });\n        break;\n      case 'uri':\n        stringExpression = compiler.callExpression({\n          functionName: compiler.propertyAccessExpression({\n            expression: stringExpression,\n            name: compiler.identifier({ text: 'url' }),\n          }),\n        });\n        break;\n      case 'date':\n      case 'email':\n      case 'time':\n      case 'uuid':\n        stringExpression = compiler.callExpression({\n          functionName: compiler.propertyAccessExpression({\n            expression: stringExpression,\n            name: compiler.identifier({ text: schema.format }),\n          }),\n        });\n        break;\n    }\n  }\n\n  if (schema.minLength === schema.maxLength && schema.minLength !== undefined) {\n    stringExpression = compiler.callExpression({\n      functionName: compiler.propertyAccessExpression({\n        expression: stringExpression,\n        name: lengthIdentifier,\n      }),\n      parameters: [compiler.valueToExpression({ value: schema.minLength })],\n    });\n  } else {\n    if (schema.minLength !== undefined) {\n      stringExpression = compiler.callExpression({\n        functionName: compiler.propertyAccessExpression({\n          expression: stringExpression,\n          name: minIdentifier,\n        }),\n        parameters: [compiler.valueToExpression({ value: schema.minLength })],\n      });\n    }\n\n    if (schema.maxLength !== undefined) {\n      stringExpression = compiler.callExpression({\n        functionName: compiler.propertyAccessExpression({\n          expression: stringExpression,\n          name: maxIdentifier,\n        }),\n        parameters: [compiler.valueToExpression({ value: schema.maxLength })],\n      });\n    }\n  }\n\n  if (schema.pattern) {\n    stringExpression = compiler.callExpression({\n      functionName: compiler.propertyAccessExpression({\n        expression: stringExpression,\n        name: regexIdentifier,\n      }),\n      parameters: [compiler.regularExpressionLiteral({ text: schema.pattern })],\n    });\n  }\n\n  return stringExpression;\n};\n\nconst tupleTypeToZodSchema = ({\n  context,\n  schema,\n}: {\n  context: IR.Context;\n  schema: SchemaWithType<'tuple'>;\n}) => {\n  if (schema.const && Array.isArray(schema.const)) {\n    const tupleElements = schema.const.map((value) =>\n      compiler.callExpression({\n        functionName: compiler.propertyAccessExpression({\n          expression: zIdentifier,\n          name: literalIdentifier,\n        }),\n        parameters: [compiler.valueToExpression({ value })],\n      }),\n    );\n    const expression = compiler.callExpression({\n      functionName: compiler.propertyAccessExpression({\n        expression: zIdentifier,\n        name: compiler.identifier({ text: 'tuple' }),\n      }),\n      parameters: [\n        compiler.arrayLiteralExpression({\n          elements: tupleElements,\n        }),\n      ],\n    });\n    return expression;\n  }\n\n  // TODO: parser - handle tuple items\n  // const itemTypes: Array<ts.TypeNode> = [];\n\n  // for (const item of schema.items ?? []) {\n  //   itemTypes.push(\n  //     schemaToType({\n  //       context,\n  //       namespace,\n  //       plugin,\n  //       schema: item,\n  //     }),\n  //   );\n  // }\n\n  // return compiler.typeTupleNode({\n  //   types: itemTypes,\n  // });\n\n  return unknownTypeToZodSchema({\n    context,\n    schema: {\n      type: 'unknown',\n    },\n  });\n};\n\nconst undefinedTypeToZodSchema = ({\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  schema,\n}: {\n  context: IR.Context;\n  schema: SchemaWithType<'undefined'>;\n}) => {\n  const expression = compiler.callExpression({\n    functionName: compiler.propertyAccessExpression({\n      expression: zIdentifier,\n      name: compiler.identifier({ text: 'undefined' }),\n    }),\n  });\n  return expression;\n};\n\nconst unknownTypeToZodSchema = ({\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  schema,\n}: {\n  context: IR.Context;\n  schema: SchemaWithType<'unknown'>;\n}) => {\n  const expression = compiler.callExpression({\n    functionName: compiler.propertyAccessExpression({\n      expression: zIdentifier,\n      name: compiler.identifier({ text: 'unknown' }),\n    }),\n  });\n  return expression;\n};\n\nconst voidTypeToZodSchema = ({\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  schema,\n}: {\n  context: IR.Context;\n  schema: SchemaWithType<'void'>;\n}) => {\n  const expression = compiler.callExpression({\n    functionName: compiler.propertyAccessExpression({\n      expression: zIdentifier,\n      name: compiler.identifier({ text: 'void' }),\n    }),\n  });\n  return expression;\n};\n\nconst schemaTypeToZodSchema = ({\n  context,\n  plugin,\n  result,\n  schema,\n}: {\n  context: IR.Context;\n  plugin: Plugin.Instance<Config>;\n  result: Result;\n  schema: IR.SchemaObject;\n}): {\n  anyType?: string;\n  expression: ts.Expression;\n} => {\n  switch (schema.type as Required<IR.SchemaObject>['type']) {\n    case 'array':\n      return {\n        expression: arrayTypeToZodSchema({\n          context,\n          plugin,\n          result,\n          schema: schema as SchemaWithType<'array'>,\n        }),\n      };\n    case 'boolean':\n      return {\n        expression: booleanTypeToZodSchema({\n          context,\n          schema: schema as SchemaWithType<'boolean'>,\n        }),\n      };\n    case 'enum':\n      return {\n        expression: enumTypeToZodSchema({\n          context,\n          schema: schema as SchemaWithType<'enum'>,\n        }),\n      };\n    case 'integer':\n    case 'number':\n      return {\n        expression: numberTypeToZodSchema({\n          context,\n          schema: schema as SchemaWithType<'integer' | 'number'>,\n        }),\n      };\n    case 'never':\n      return {\n        expression: neverTypeToZodSchema({\n          context,\n          schema: schema as SchemaWithType<'never'>,\n        }),\n      };\n    case 'null':\n      return {\n        expression: nullTypeToZodSchema({\n          context,\n          schema: schema as SchemaWithType<'null'>,\n        }),\n      };\n    case 'object':\n      return objectTypeToZodSchema({\n        context,\n        plugin,\n        result,\n        schema: schema as SchemaWithType<'object'>,\n      });\n    case 'string':\n      return {\n        expression: stringTypeToZodSchema({\n          context,\n          schema: schema as SchemaWithType<'string'>,\n        }),\n      };\n    case 'tuple':\n      return {\n        expression: tupleTypeToZodSchema({\n          context,\n          schema: schema as SchemaWithType<'tuple'>,\n        }),\n      };\n    case 'undefined':\n      return {\n        expression: undefinedTypeToZodSchema({\n          context,\n          schema: schema as SchemaWithType<'undefined'>,\n        }),\n      };\n    case 'unknown':\n      return {\n        expression: unknownTypeToZodSchema({\n          context,\n          schema: schema as SchemaWithType<'unknown'>,\n        }),\n      };\n    case 'void':\n      return {\n        expression: voidTypeToZodSchema({\n          context,\n          schema: schema as SchemaWithType<'void'>,\n        }),\n      };\n  }\n};\n\nconst operationToZodSchema = ({\n  context,\n  operation,\n  plugin,\n  result,\n}: {\n  context: IR.Context;\n  operation: IR.OperationObject;\n  plugin: Plugin.Instance<Config>;\n  result: Result;\n}) => {\n  if (operation.body) {\n    schemaToZodSchema({\n      $ref: operationIrRef({\n        case: 'camelCase',\n        config: context.config,\n        id: operation.id,\n        type: 'data',\n      }),\n      context,\n      plugin,\n      result,\n      schema: operation.body.schema,\n    });\n  }\n\n  if (operation.parameters) {\n    for (const type in operation.parameters) {\n      const group = operation.parameters[type as keyof IR.ParametersObject]!;\n      for (const key in group) {\n        const parameter = group[key]!;\n        schemaToZodSchema({\n          $ref: operationIrRef({\n            case: 'camelCase',\n            config: context.config,\n            id: operation.id,\n            parameterId: parameter.name,\n            type: 'parameter',\n          }),\n          context,\n          plugin,\n          result,\n          schema: parameter.schema,\n        });\n      }\n    }\n  }\n\n  if (operation.responses) {\n    const { response } = operationResponsesMap(operation);\n\n    if (response) {\n      schemaToZodSchema({\n        $ref: operationIrRef({\n          case: 'camelCase',\n          config: context.config,\n          id: operation.id,\n          type: 'response',\n        }),\n        context,\n        plugin,\n        result,\n        schema: response,\n      });\n    }\n  }\n};\n\nconst schemaToZodSchema = ({\n  $ref,\n  context,\n  optional,\n  plugin,\n  result,\n  schema,\n}: {\n  /**\n   * When $ref is supplied, a node will be emitted to the file.\n   */\n  $ref?: string;\n  context: IR.Context;\n  /**\n   * Accept `optional` to handle optional object properties. We can't handle\n   * this inside the object function because `.optional()` must come before\n   * `.default()` which is handled in this function.\n   */\n  optional?: boolean;\n  plugin: Plugin.Instance<Config>;\n  result: Result;\n  schema: IR.SchemaObject;\n}): ts.Expression => {\n  const file = context.file({ id: zodId })!;\n\n  let anyType: string | undefined;\n  let expression: ts.Expression | undefined;\n  let identifier: ReturnType<typeof file.identifier> | undefined;\n\n  if ($ref) {\n    result.circularReferenceTracker.add($ref);\n\n    identifier = file.identifier({\n      $ref,\n      create: true,\n      nameTransformer,\n      namespace: 'value',\n    });\n  }\n\n  if (schema.$ref) {\n    const isCircularReference = result.circularReferenceTracker.has(\n      schema.$ref,\n    );\n\n    // if $ref hasn't been processed yet, inline it to avoid the\n    // \"Block-scoped variable used before its declaration.\" error\n    // this could be (maybe?) fixed by reshuffling the generation order\n    let identifierRef = file.identifier({\n      $ref: schema.$ref,\n      nameTransformer,\n      namespace: 'value',\n    });\n\n    if (!identifierRef.name) {\n      const ref = context.resolveIrRef<IR.SchemaObject>(schema.$ref);\n      expression = schemaToZodSchema({\n        $ref: schema.$ref,\n        context,\n        plugin,\n        result,\n        schema: ref,\n      });\n\n      identifierRef = file.identifier({\n        $ref: schema.$ref,\n        nameTransformer,\n        namespace: 'value',\n      });\n    }\n\n    // if `identifierRef.name` is falsy, we already set expression above\n    if (identifierRef.name) {\n      const refIdentifier = compiler.identifier({ text: identifierRef.name });\n      if (isCircularReference) {\n        expression = compiler.callExpression({\n          functionName: compiler.propertyAccessExpression({\n            expression: zIdentifier,\n            name: lazyIdentifier,\n          }),\n          parameters: [\n            compiler.arrowFunction({\n              statements: [\n                compiler.returnStatement({\n                  expression: refIdentifier,\n                }),\n              ],\n            }),\n          ],\n        });\n        result.hasCircularReference = true;\n      } else {\n        expression = refIdentifier;\n      }\n    }\n  } else if (schema.type) {\n    const zodSchema = schemaTypeToZodSchema({\n      context,\n      plugin,\n      result,\n      schema,\n    });\n    anyType = zodSchema.anyType;\n    expression = zodSchema.expression;\n  } else if (schema.items) {\n    schema = deduplicateSchema({ schema });\n\n    if (schema.items) {\n      const itemTypes = schema.items.map((item) =>\n        schemaToZodSchema({\n          context,\n          plugin,\n          result,\n          schema: item,\n        }),\n      );\n\n      if (schema.logicalOperator === 'and') {\n        const firstSchema = schema.items[0]!;\n        // we want to add an intersection, but not every schema can use the same API.\n        // if the first item contains another array or not an object, we cannot use\n        // `.merge()` as that does not exist on `.union()` and non-object schemas.\n        if (\n          firstSchema.logicalOperator === 'or' ||\n          (firstSchema.type && firstSchema.type !== 'object')\n        ) {\n          expression = compiler.callExpression({\n            functionName: compiler.propertyAccessExpression({\n              expression: zIdentifier,\n              name: intersectionIdentifier,\n            }),\n            parameters: itemTypes,\n          });\n        } else {\n          expression = itemTypes[0];\n          itemTypes.slice(1).forEach((item) => {\n            expression = compiler.callExpression({\n              functionName: compiler.propertyAccessExpression({\n                expression: expression!,\n                name: andIdentifier,\n              }),\n              parameters: [item],\n            });\n          });\n        }\n      } else {\n        expression = compiler.callExpression({\n          functionName: compiler.propertyAccessExpression({\n            expression: zIdentifier,\n            name: unionIdentifier,\n          }),\n          parameters: [\n            compiler.arrayLiteralExpression({\n              elements: itemTypes,\n            }),\n          ],\n        });\n      }\n    } else {\n      expression = schemaToZodSchema({\n        context,\n        plugin,\n        result,\n        schema,\n      });\n    }\n  } else {\n    // catch-all fallback for failed schemas\n    const zodSchema = schemaTypeToZodSchema({\n      context,\n      plugin,\n      result,\n      schema: {\n        type: 'unknown',\n      },\n    });\n    anyType = zodSchema.anyType;\n    expression = zodSchema.expression;\n  }\n\n  if ($ref) {\n    result.circularReferenceTracker.delete($ref);\n  }\n\n  if (expression) {\n    if (schema.accessScope === 'read') {\n      expression = compiler.callExpression({\n        functionName: compiler.propertyAccessExpression({\n          expression,\n          name: readonlyIdentifier,\n        }),\n      });\n    }\n\n    if (optional) {\n      expression = compiler.callExpression({\n        functionName: compiler.propertyAccessExpression({\n          expression,\n          name: optionalIdentifier,\n        }),\n      });\n    }\n\n    if (schema.default !== undefined) {\n      const isBigInt = schema.type === 'integer' && schema.format === 'int64';\n      const callParameter = numberParameter({\n        isBigInt,\n        value: schema.default,\n      });\n      if (callParameter) {\n        expression = compiler.callExpression({\n          functionName: compiler.propertyAccessExpression({\n            expression,\n            name: defaultIdentifier,\n          }),\n          parameters: [callParameter],\n        });\n      }\n    }\n  }\n\n  // emit nodes only if $ref points to a reusable component\n  if (identifier && identifier.name && identifier.created) {\n    const statement = compiler.constVariable({\n      comment: plugin.comments ? createSchemaComment({ schema }) : undefined,\n      exportConst: true,\n      expression: expression!,\n      name: identifier.name,\n      typeName: result.hasCircularReference\n        ? (compiler.propertyAccessExpression({\n            expression: zIdentifier,\n            name: anyType || 'ZodTypeAny',\n          }) as unknown as ts.TypeNode)\n        : undefined,\n    });\n    file.add(statement);\n  }\n\n  return expression!;\n};\n\nexport const handler: Plugin.Handler<Config> = ({ context, plugin }) => {\n  const file = context.createFile({\n    exportFromIndex: plugin.exportFromIndex,\n    id: zodId,\n    identifierCase: 'camelCase',\n    path: plugin.output,\n  });\n\n  file.import({\n    module: 'zod',\n    name: 'z',\n  });\n\n  context.subscribe('operation', ({ operation }) => {\n    const result: Result = {\n      circularReferenceTracker: new Set(),\n      hasCircularReference: false,\n    };\n\n    operationToZodSchema({\n      context,\n      operation,\n      plugin,\n      result,\n    });\n  });\n\n  context.subscribe('parameter', ({ $ref, parameter }) => {\n    const result: Result = {\n      circularReferenceTracker: new Set(),\n      hasCircularReference: false,\n    };\n\n    schemaToZodSchema({\n      $ref,\n      context,\n      plugin,\n      result,\n      schema: parameter.schema,\n    });\n  });\n\n  context.subscribe('requestBody', ({ $ref, requestBody }) => {\n    const result: Result = {\n      circularReferenceTracker: new Set(),\n      hasCircularReference: false,\n    };\n\n    schemaToZodSchema({\n      $ref,\n      context,\n      plugin,\n      result,\n      schema: requestBody.schema,\n    });\n  });\n\n  context.subscribe('schema', ({ $ref, schema }) => {\n    const result: Result = {\n      circularReferenceTracker: new Set(),\n      hasCircularReference: false,\n    };\n\n    schemaToZodSchema({\n      $ref,\n      context,\n      plugin,\n      result,\n      schema,\n    });\n  });\n};\n","import type { Comments } from '../../../compiler';\nimport type { IR } from '../../../ir/types';\nimport { escapeComment } from '../../../utils/escape';\n\nexport const createSchemaComment = ({\n  schema,\n}: {\n  schema: IR.SchemaObject;\n}): Comments | undefined => {\n  const comments: Array<string> = [];\n\n  if (schema.title) {\n    comments.push(escapeComment(schema.title));\n  }\n\n  if (schema.description) {\n    comments.push(escapeComment(schema.description));\n  }\n\n  if (schema.deprecated) {\n    comments.push('@deprecated');\n  }\n\n  return comments.length ? comments : undefined;\n};\n","import { compiler } from '../../../compiler';\nimport type { IR } from '../../../ir/types';\nimport { operationIrRef } from '../../shared/utils/ref';\nimport type { Plugin } from '../../types';\nimport { valibotId } from '../../valibot/constants';\nimport { zodId } from '../../zod/plugin';\nimport { sdkId } from './constants';\nimport type { Config } from './types';\n\nconst identifiers = {\n  data: compiler.identifier({ text: 'data' }),\n  parseAsync: compiler.identifier({ text: 'parseAsync' }),\n  v: compiler.identifier({ text: 'v' }),\n};\n\nconst valibotResponseValidator = ({\n  context,\n  operation,\n}: {\n  context: IR.Context;\n  operation: IR.OperationObject;\n}) => {\n  const file = context.file({ id: sdkId })!;\n\n  const identifierSchema = context.file({ id: valibotId })!.identifier({\n    $ref: operationIrRef({\n      case: 'camelCase',\n      config: context.config,\n      id: operation.id,\n      type: 'response',\n    }),\n    namespace: 'value',\n  });\n\n  if (!identifierSchema.name) {\n    return;\n  }\n\n  file.import({\n    module: file.relativePathToFile({\n      context,\n      id: valibotId,\n    }),\n    name: identifierSchema.name,\n  });\n\n  file.import({\n    alias: identifiers.v.text,\n    module: 'valibot',\n    name: '*',\n  });\n\n  return compiler.arrowFunction({\n    async: true,\n    parameters: [\n      {\n        name: 'data',\n      },\n    ],\n    statements: [\n      compiler.returnStatement({\n        expression: compiler.awaitExpression({\n          expression: compiler.callExpression({\n            functionName: compiler.propertyAccessExpression({\n              expression: identifiers.v,\n              name: identifiers.parseAsync,\n            }),\n            parameters: [\n              compiler.identifier({ text: identifierSchema.name }),\n              identifiers.data,\n            ],\n          }),\n        }),\n      }),\n    ],\n  });\n};\n\nconst zodResponseValidator = ({\n  context,\n  operation,\n}: {\n  context: IR.Context;\n  operation: IR.OperationObject;\n}) => {\n  const file = context.file({ id: sdkId })!;\n\n  const identifierSchema = context.file({ id: zodId })!.identifier({\n    $ref: operationIrRef({\n      case: 'camelCase',\n      config: context.config,\n      id: operation.id,\n      type: 'response',\n    }),\n    namespace: 'value',\n  });\n\n  if (!identifierSchema.name) {\n    return;\n  }\n\n  file.import({\n    module: file.relativePathToFile({\n      context,\n      id: zodId,\n    }),\n    name: identifierSchema.name,\n  });\n\n  return compiler.arrowFunction({\n    async: true,\n    parameters: [\n      {\n        name: 'data',\n      },\n    ],\n    statements: [\n      compiler.returnStatement({\n        expression: compiler.awaitExpression({\n          expression: compiler.callExpression({\n            functionName: compiler.propertyAccessExpression({\n              expression: compiler.identifier({ text: identifierSchema.name }),\n              name: identifiers.parseAsync,\n            }),\n            parameters: [identifiers.data],\n          }),\n        }),\n      }),\n    ],\n  });\n};\n\nexport const createResponseValidator = ({\n  context,\n  operation,\n  plugin,\n}: {\n  context: IR.Context;\n  operation: IR.OperationObject;\n  plugin: Plugin.Instance<Config>;\n}) => {\n  switch (plugin.validator) {\n    case 'valibot':\n      return valibotResponseValidator({ context, operation });\n    case 'zod':\n      return zodResponseValidator({ context, operation });\n    default:\n      return;\n  }\n};\n","import type ts from 'typescript';\n\nimport { compiler } from '../../../compiler';\nimport type { ObjectValue } from '../../../compiler/types';\nimport { clientApi, clientModulePath } from '../../../generate/client';\nimport type { TypeScriptFile } from '../../../generate/files';\nimport { statusCodeToGroup } from '../../../ir/operation';\nimport type { IR } from '../../../ir/types';\nimport { sanitizeNamespaceIdentifier } from '../../../openApi';\nimport { reservedJavaScriptKeywordsRegExp } from '../../../utils/regexp';\nimport { stringCase } from '../../../utils/stringCase';\nimport { transformClassName } from '../../../utils/transform';\nimport type { Plugin } from '../../types';\nimport { clientId, getClientPlugin } from '../client-core/utils';\nimport {\n  operationTransformerIrRef,\n  transformersId,\n} from '../transformers/plugin';\nimport { importIdentifier } from '../typescript/ref';\nimport { operationAuth } from './auth';\nimport { nuxtTypeComposable, nuxtTypeDefault, sdkId } from './constants';\nimport type { Config } from './types';\nimport { createResponseValidator } from './validator';\n\ninterface ClassNameEntry {\n  /**\n   * Name of the class where this function appears.\n   */\n  className: string;\n  /**\n   * Name of the function within the class.\n   */\n  methodName: string;\n  /**\n   * JSONPath-like array to class location.\n   */\n  path: ReadonlyArray<string>;\n}\n\nconst operationClassName = ({\n  context,\n  value,\n}: {\n  context: IR.Context;\n  value: string;\n}) => {\n  const name = stringCase({\n    case: 'PascalCase',\n    value: sanitizeNamespaceIdentifier(value),\n  });\n  return transformClassName({\n    config: context.config,\n    name,\n  });\n};\n\nconst getOperationMethodName = ({\n  operation,\n  plugin,\n}: {\n  operation: IR.OperationObject;\n  plugin: Pick<Plugin.Instance<Config>, 'asClass' | 'methodNameBuilder'>;\n}) => {\n  if (plugin.methodNameBuilder) {\n    return plugin.methodNameBuilder(operation);\n  }\n\n  const handleIllegal = !plugin.asClass;\n  if (handleIllegal && operation.id.match(reservedJavaScriptKeywordsRegExp)) {\n    return `${operation.id}_`;\n  }\n\n  return operation.id;\n};\n\n/**\n * Returns a list of classes where this operation appears in the generated SDK.\n */\nexport const operationClasses = ({\n  context,\n  operation,\n  plugin,\n}: {\n  context: IR.Context;\n  operation: IR.OperationObject;\n  plugin: Pick<\n    Plugin.Instance<Config>,\n    'asClass' | 'classStructure' | 'instance'\n  >;\n}): Map<string, ClassNameEntry> => {\n  const classNames = new Map<string, ClassNameEntry>();\n\n  let className: string | undefined;\n  let methodName: string | undefined;\n  let classCandidates: Array<string> = [];\n\n  if (plugin.classStructure === 'auto' && operation.operationId) {\n    classCandidates = operation.operationId.split(/[./]/).filter(Boolean);\n    if (classCandidates.length > 1) {\n      const methodCandidate = classCandidates.pop()!;\n      methodName = stringCase({\n        case: 'camelCase',\n        value: sanitizeNamespaceIdentifier(methodCandidate),\n      });\n      className = classCandidates.pop()!;\n    }\n  }\n\n  const rootClasses = plugin.instance\n    ? [plugin.instance as string]\n    : (operation.tags ?? ['default']);\n\n  for (const rootClass of rootClasses) {\n    const finalClassName = operationClassName({\n      context,\n      value: className || rootClass,\n    });\n    classNames.set(rootClass, {\n      className: finalClassName,\n      methodName: methodName || getOperationMethodName({ operation, plugin }),\n      path: (className\n        ? [rootClass, ...classCandidates, className]\n        : [rootClass]\n      ).map((value) =>\n        operationClassName({\n          context,\n          value,\n        }),\n      ),\n    });\n  }\n\n  return classNames;\n};\n\nexport const operationOptionsType = ({\n  context,\n  file,\n  operation,\n  throwOnError,\n}: {\n  context: IR.Context;\n  file: TypeScriptFile;\n  operation: IR.OperationObject;\n  throwOnError?: string;\n}) => {\n  const client = getClientPlugin(context.config);\n  const isNuxtClient = client.name === '@hey-api/client-nuxt';\n\n  const identifierData = importIdentifier({\n    context,\n    file,\n    operation,\n    type: 'data',\n  });\n  const identifierResponse = importIdentifier({\n    context,\n    file,\n    operation,\n    type: isNuxtClient ? 'response' : 'responses',\n  });\n\n  const optionsName = clientApi.Options.name;\n\n  if (isNuxtClient) {\n    return `${optionsName}<${nuxtTypeComposable}, ${identifierData.name || 'unknown'}, ${identifierResponse.name || 'unknown'}, ${nuxtTypeDefault}>`;\n  }\n\n  // TODO: refactor this to be more generic, works for now\n  if (throwOnError) {\n    return `${optionsName}<${identifierData.name || 'unknown'}, ${throwOnError}>`;\n  }\n  return identifierData.name\n    ? `${optionsName}<${identifierData.name}>`\n    : optionsName;\n};\n\n/**\n * Infers `responseType` value from provided response content type. This is\n * an adapted version of `getParseAs()` from the Fetch API client.\n *\n * From Axios documentation:\n * `responseType` indicates the type of data that the server will respond with\n * options are: 'arraybuffer', 'document', 'json', 'text', 'stream'\n * browser only: 'blob'\n */\nconst getResponseType = (\n  contentType: string | null | undefined,\n):\n  | 'arraybuffer'\n  | 'blob'\n  | 'document'\n  | 'json'\n  | 'stream'\n  | 'text'\n  | undefined => {\n  if (!contentType) {\n    return;\n  }\n\n  const cleanContent = contentType.split(';')[0]?.trim();\n\n  if (!cleanContent) {\n    return;\n  }\n\n  if (\n    cleanContent.startsWith('application/json') ||\n    cleanContent.endsWith('+json')\n  ) {\n    return 'json';\n  }\n\n  // Axios does not handle form data out of the box\n  // if (cleanContent === 'multipart/form-data') {\n  //   return 'formData';\n  // }\n\n  if (\n    ['application/', 'audio/', 'image/', 'video/'].some((type) =>\n      cleanContent.startsWith(type),\n    )\n  ) {\n    return 'blob';\n  }\n\n  if (cleanContent.startsWith('text/')) {\n    return 'text';\n  }\n};\n\nexport const operationStatements = ({\n  context,\n  isRequiredOptions,\n  operation,\n  plugin,\n}: {\n  context: IR.Context;\n  isRequiredOptions: boolean;\n  operation: IR.OperationObject;\n  plugin: Plugin.Instance<Config>;\n}): Array<ts.Statement> => {\n  const file = context.file({ id: sdkId })!;\n  const sdkOutput = file.nameWithoutExtension();\n\n  const client = getClientPlugin(context.config);\n  const isNuxtClient = client.name === '@hey-api/client-nuxt';\n\n  const identifierError = importIdentifier({\n    context,\n    file,\n    operation,\n    type: isNuxtClient ? 'error' : 'errors',\n  });\n  const identifierResponse = importIdentifier({\n    context,\n    file,\n    operation,\n    type: isNuxtClient ? 'response' : 'responses',\n  });\n\n  // TODO: transform parameters\n  // const query = {\n  //   BarBaz: options.query.bar_baz,\n  //   qux_quux: options.query.qux_quux,\n  //   fooBar: options.query.foo_bar,\n  // };\n\n  // if (operation.parameters) {\n  //   for (const name in operation.parameters.query) {\n  //     const parameter = operation.parameters.query[name]\n  //     if (parameter.name !== fieldName({ context, name: parameter.name })) {\n  //       console.warn(parameter.name)\n  //     }\n  //   }\n  // }\n\n  const requestOptions: ObjectValue[] = [];\n\n  if (operation.body) {\n    switch (operation.body.type) {\n      case 'form-data':\n        requestOptions.push({ spread: 'formDataBodySerializer' });\n        file.import({\n          module: clientModulePath({\n            config: context.config,\n            sourceOutput: sdkOutput,\n          }),\n          name: 'formDataBodySerializer',\n        });\n        break;\n      case 'json':\n        // jsonBodySerializer is the default, no need to specify\n        break;\n      case 'text':\n      case 'octet-stream':\n        // ensure we don't use any serializer by default\n        requestOptions.push({\n          key: 'bodySerializer',\n          value: null,\n        });\n        break;\n      case 'url-search-params':\n        requestOptions.push({ spread: 'urlSearchParamsBodySerializer' });\n        file.import({\n          module: clientModulePath({\n            config: context.config,\n            sourceOutput: sdkOutput,\n          }),\n          name: 'urlSearchParamsBodySerializer',\n        });\n        break;\n    }\n  }\n\n  if (client.name === '@hey-api/client-axios') {\n    // try to infer `responseType` option for Axios. We don't need this in\n    // Fetch API client because it automatically detects the correct response\n    // during runtime.\n    for (const statusCode in operation.responses) {\n      // this doesn't handle default status code for now\n      if (statusCodeToGroup({ statusCode }) === '2XX') {\n        const response = operation.responses[statusCode];\n        const responseType = getResponseType(response?.mediaType);\n        if (responseType) {\n          requestOptions.push({\n            key: 'responseType',\n            value: responseType,\n          });\n          break;\n        }\n      }\n    }\n  }\n\n  // TODO: parser - set parseAs to skip inference if every response has the same\n  // content type. currently impossible because successes do not contain\n  // header information\n\n  const auth = operationAuth({ context, operation, plugin });\n  if (auth.length) {\n    requestOptions.push({\n      key: 'security',\n      value: compiler.arrayLiteralExpression({ elements: auth }),\n    });\n  }\n\n  for (const name in operation.parameters?.query) {\n    const parameter = operation.parameters.query[name]!;\n    if (\n      (parameter.schema.type === 'array' ||\n        parameter.schema.type === 'tuple') &&\n      (parameter.style !== 'form' || !parameter.explode)\n    ) {\n      // override the default settings for `querySerializer`\n      requestOptions.push({\n        key: 'querySerializer',\n        value: [\n          {\n            key: 'array',\n            value: [\n              {\n                key: 'explode',\n                value: false,\n              },\n              {\n                key: 'style',\n                value: 'form',\n              },\n            ],\n          },\n        ],\n      });\n      break;\n    }\n  }\n\n  if (plugin.transformer === '@hey-api/transformers') {\n    const identifierTransformer = context\n      .file({ id: transformersId })!\n      .identifier({\n        $ref: operationTransformerIrRef({ id: operation.id, type: 'response' }),\n        namespace: 'value',\n      });\n\n    if (identifierTransformer.name) {\n      file.import({\n        module: file.relativePathToFile({\n          context,\n          id: transformersId,\n        }),\n        name: identifierTransformer.name,\n      });\n\n      requestOptions.push({\n        key: 'responseTransformer',\n        value: identifierTransformer.name,\n      });\n    }\n  }\n\n  const responseValidator = createResponseValidator({\n    context,\n    operation,\n    plugin,\n  });\n  if (responseValidator) {\n    requestOptions.push({\n      key: 'responseValidator',\n      value: responseValidator,\n    });\n  }\n\n  if (plugin.responseStyle === 'data') {\n    requestOptions.push({\n      key: 'responseStyle',\n      value: plugin.responseStyle,\n    });\n  }\n\n  requestOptions.push({\n    key: 'url',\n    value: operation.path,\n  });\n\n  // options must go last to allow overriding parameters above\n  requestOptions.push({ spread: 'options' });\n\n  if (operation.body) {\n    const parameterContentType = operation.parameters?.header?.['content-type'];\n    const hasRequiredContentType = Boolean(parameterContentType?.required);\n    // spreading required Content-Type on generated header would throw a TypeScript error\n    if (!hasRequiredContentType) {\n      const spread = compiler.propertyAccessExpression({\n        expression: compiler.identifier({ text: 'options' }),\n        isOptional: !isRequiredOptions,\n        name: 'headers',\n      });\n      requestOptions.push({\n        key: 'headers',\n        value: [\n          {\n            key: parameterContentType?.name ?? 'Content-Type',\n            // form-data does not need Content-Type header, browser will set it automatically\n            value:\n              operation.body.type === 'form-data'\n                ? null\n                : operation.body.mediaType,\n          },\n          {\n            spread,\n          },\n        ],\n      });\n    }\n  }\n\n  const responseType = identifierResponse.name || 'unknown';\n  const errorType = identifierError.name || 'unknown';\n\n  const heyApiClient = plugin.client\n    ? file.import({\n        alias: '_heyApiClient',\n        module: file.relativePathToFile({\n          context,\n          id: clientId,\n        }),\n        name: 'client',\n      })\n    : undefined;\n\n  const optionsClient = compiler.propertyAccessExpression({\n    expression: compiler.identifier({ text: 'options' }),\n    isOptional: !isRequiredOptions,\n    name: 'client',\n  });\n\n  let clientExpression: ts.Expression;\n\n  if (plugin.instance) {\n    clientExpression = compiler.binaryExpression({\n      left: optionsClient,\n      operator: '??',\n      right: compiler.propertyAccessExpression({\n        expression: compiler.this(),\n        name: '_client',\n      }),\n    });\n  } else if (heyApiClient?.name) {\n    clientExpression = compiler.binaryExpression({\n      left: optionsClient,\n      operator: '??',\n      right: compiler.identifier({ text: heyApiClient.name }),\n    });\n  } else {\n    clientExpression = optionsClient;\n  }\n\n  const types: Array<string | ts.StringLiteral> = [];\n  if (isNuxtClient) {\n    types.push(\n      nuxtTypeComposable,\n      `${responseType} | ${nuxtTypeDefault}`,\n      errorType,\n      nuxtTypeDefault,\n    );\n  } else {\n    types.push(responseType, errorType, 'ThrowOnError');\n  }\n\n  if (plugin.responseStyle === 'data') {\n    types.push(compiler.stringLiteral({ text: plugin.responseStyle }));\n  }\n\n  return [\n    compiler.returnFunctionCall({\n      args: [\n        compiler.objectExpression({\n          identifiers: ['responseTransformer'],\n          obj: requestOptions,\n        }),\n      ],\n      name: compiler.propertyAccessExpression({\n        expression: clientExpression,\n        name: compiler.identifier({ text: operation.method }),\n      }),\n      types,\n    }),\n  ];\n};\n","import type ts from 'typescript';\n\nimport type { Comments, FunctionParameter } from '../../../compiler';\nimport { compiler } from '../../../compiler';\nimport type {\n  FunctionTypeParameter,\n  ObjectValue,\n} from '../../../compiler/types';\nimport { clientApi, clientModulePath } from '../../../generate/client';\nimport { TypeScriptFile } from '../../../generate/files';\nimport type { IR } from '../../../ir/types';\nimport { isOperationParameterRequired } from '../../../openApi';\nimport type {\n  Client,\n  Model,\n  Operation,\n  OperationParameter,\n  Service,\n} from '../../../types/client';\nimport type { Config as ClientConfig } from '../../../types/config';\nimport {\n  getConfig,\n  isLegacyClient,\n  legacyNameFromConfig,\n} from '../../../utils/config';\nimport { escapeComment, escapeName } from '../../../utils/escape';\nimport { reservedJavaScriptKeywordsRegExp } from '../../../utils/regexp';\nimport { stringCase } from '../../../utils/stringCase';\nimport { transformClassName } from '../../../utils/transform';\nimport { setUniqueTypeName } from '../../../utils/type';\nimport { unique } from '../../../utils/unique';\nimport type { Plugin } from '../../types';\nimport { getClientPlugin } from '../client-core/utils';\nimport type { Config } from './types';\n\ntype OnNode = (node: ts.Node) => void;\ntype OnImport = (name: string) => void;\n\nexport const generateImport = ({\n  meta,\n  onImport,\n  ...setUniqueTypeNameArgs\n}: Pick<Parameters<typeof setUniqueTypeName>[0], 'client' | 'nameTransformer'> &\n  Pick<Model, 'meta'> & {\n    onImport: OnImport;\n  }) => {\n  // generate imports only for top-level models\n  if (!meta) {\n    // TODO: this used to return undefined. We could refactor this function to\n    // return undefined again, but we will need to improve types so we can safely\n    // do `const { name } = generateImport({ meta: ... })` (note when meta is defined\n    // we guarantee the response to be an object). For now, nothing relies on this\n    // response shape except for plugins, so it was acceptable to patch it that way\n    return { created: false, name: '' };\n  }\n\n  const { created, name } = setUniqueTypeName({\n    meta,\n    ...setUniqueTypeNameArgs,\n  });\n  if (name) {\n    onImport(name);\n  }\n  return { created, name };\n};\n\nexport const modelResponseTransformerTypeName = (name: string) =>\n  `${name}ModelResponseTransformer`;\n\nexport const operationDataTypeName = (name: string) =>\n  `${stringCase({\n    case: 'PascalCase',\n    value: name,\n  })}Data`;\n\nexport const operationErrorTypeName = (name: string) =>\n  `${stringCase({\n    case: 'PascalCase',\n    value: name,\n  })}Error`;\n\n// operation response type ends with \"Response\", it's enough to append \"Transformer\"\nexport const operationResponseTransformerTypeName = (name: string) =>\n  `${name}Transformer`;\n\nexport const operationResponseTypeName = (name: string) =>\n  `${stringCase({\n    case: 'PascalCase',\n    value: name,\n  })}Response`;\n\n/**\n * @param importedType unique type name returned from `setUniqueTypeName()`\n * @returns options type\n */\nexport const operationOptionsLegacyParserType = ({\n  importedType,\n  throwOnError,\n}: {\n  importedType?: string | false;\n  throwOnError?: string;\n}) => {\n  const optionsName = clientApi.OptionsLegacyParser.name;\n  // TODO: refactor this to be more generic, works for now\n  if (throwOnError) {\n    return `${optionsName}<${importedType || 'unknown'}, ${throwOnError}>`;\n  }\n  return importedType ? `${optionsName}<${importedType}>` : optionsName;\n};\n\nconst toOperationParamType = (\n  client: Client,\n  operation: Operation,\n): FunctionParameter[] => {\n  const config = getConfig();\n\n  const { name: importedType } = setUniqueTypeName({\n    client,\n    meta: {\n      // TODO: this should be exact ref to operation for consistency,\n      // but name should work too as operation ID is unique\n      $ref: operation.name,\n      name: operation.name,\n    },\n    nameTransformer: operationDataTypeName,\n  });\n\n  const isRequired = isOperationParameterRequired(operation.parameters);\n\n  if (!isLegacyClient(config)) {\n    return [\n      {\n        isRequired,\n        name: 'options',\n        type: operationOptionsLegacyParserType({\n          importedType,\n          throwOnError: 'ThrowOnError',\n        }),\n      },\n    ];\n  }\n\n  if (!operation.parameters.length) {\n    return [];\n  }\n\n  const getDefaultPrintable = (\n    p: OperationParameter | Model,\n  ): string | undefined => {\n    if (p.default === undefined) {\n      return undefined;\n    }\n    return JSON.stringify(p.default, null, 4);\n  };\n\n  // legacy configuration\n  if (!config.useOptions) {\n    return operation.parameters.map((p) => {\n      const typePath = `${importedType}['${p.name}']`;\n      return {\n        default: p?.default,\n        isRequired:\n          (!p.isRequired && !getDefaultPrintable(p) ? '?' : '') === '',\n        name: p.name,\n        type: typePath,\n      };\n    });\n  }\n\n  return [\n    {\n      default: isRequired ? undefined : {},\n      name: 'data',\n      type: importedType,\n    },\n  ];\n};\n\nconst toOperationReturnType = (client: Client, operation: Operation) => {\n  const config = getConfig();\n\n  let returnType = compiler.typeNode('void');\n\n  const successResponses = operation.responses.filter((response) =>\n    response.responseTypes.includes('success'),\n  );\n\n  // TODO: we should return nothing when successes don't exist\n  // can't remove this logic without removing request/name config\n  // as it complicates things\n  if (successResponses.length) {\n    const { name: importedType } = setUniqueTypeName({\n      client,\n      meta: {\n        // TODO: this should be exact ref to operation for consistency,\n        // but name should work too as operation ID is unique\n        $ref: operation.name,\n        name: operation.name,\n      },\n      nameTransformer: operationResponseTypeName,\n    });\n    returnType = compiler.typeUnionNode({\n      types: [importedType],\n    });\n  }\n\n  if (\n    config.useOptions &&\n    config.plugins['@hey-api/sdk']?.response === 'response'\n  ) {\n    returnType = compiler.typeNode('ApiResult', [returnType]);\n  }\n\n  const clientPlugin = getClientPlugin(config);\n  if (clientPlugin.name === 'legacy/angular') {\n    returnType = compiler.typeNode('Observable', [returnType]);\n  } else {\n    returnType = compiler.typeNode('CancelablePromise', [returnType]);\n  }\n\n  return returnType;\n};\n\nconst toOperationComment = (operation: Operation): Comments => {\n  const config = getConfig();\n\n  if (!isLegacyClient(config)) {\n    const comment = [\n      operation.deprecated && '@deprecated',\n      operation.summary && escapeComment(operation.summary),\n      operation.description && escapeComment(operation.description),\n    ];\n    return comment;\n  }\n\n  let params: string[] = [];\n\n  if (operation.parameters.length) {\n    if (config.useOptions) {\n      params = [\n        '@param data The data for the request.',\n        ...operation.parameters.map(\n          (parameter) =>\n            `@param data.${parameter.name} ${parameter.description ? escapeComment(parameter.description) : ''}`,\n        ),\n      ];\n    } else {\n      params = operation.parameters.map(\n        (parameter) =>\n          `@param ${parameter.name} ${parameter.description ? escapeComment(parameter.description) : ''}`,\n      );\n    }\n  }\n\n  const successResponses = operation.responses.filter((response) =>\n    response.responseTypes.includes('success'),\n  );\n\n  const comment = [\n    operation.deprecated && '@deprecated',\n    operation.summary && escapeComment(operation.summary),\n    operation.description && escapeComment(operation.description),\n    ...params,\n    ...successResponses.map(\n      (response) =>\n        `@returns ${response.type} ${response.description ? escapeComment(response.description) : ''}`,\n    ),\n    '@throws ApiError',\n  ];\n  return comment;\n};\n\nconst toRequestOptions = ({\n  client,\n  onClientImport,\n  onImport,\n  operation,\n}: {\n  client: Client;\n  onClientImport: OnImport | undefined;\n  onImport: OnImport;\n  operation: Operation;\n}) => {\n  const config = getConfig();\n\n  const name = operationResponseTypeName(operation.name);\n  const { name: responseTransformerName } = setUniqueTypeName({\n    client,\n    meta: {\n      $ref: `transformers/${name}`,\n      name,\n    },\n    nameTransformer: operationResponseTransformerTypeName,\n  });\n\n  if (responseTransformerName) {\n    onImport(responseTransformerName);\n  }\n\n  if (!isLegacyClient(config)) {\n    let obj: ObjectValue[] = [\n      {\n        spread: 'options',\n      },\n    ];\n\n    const bodyParameters = operation.parameters.filter(\n      (parameter) => parameter.in === 'body' || parameter.in === 'formData',\n    );\n    const contents = bodyParameters\n      .map(\n        (parameter) =>\n          parameter.mediaType ||\n          (parameter.in === 'formData' ? 'multipart/form-data' : undefined),\n      )\n      .filter(Boolean)\n      .filter(unique);\n    if (contents.length === 1) {\n      if (contents[0] === 'multipart/form-data') {\n        obj = [\n          ...obj,\n          {\n            spread: 'formDataBodySerializer',\n          },\n          {\n            key: 'headers',\n            value: [\n              {\n                // no need for Content-Type header, browser will set it automatically\n                key: 'Content-Type',\n                value: null,\n              },\n              {\n                spread: 'options?.headers',\n              },\n            ],\n          },\n        ];\n        onClientImport?.('formDataBodySerializer');\n      }\n\n      if (contents[0] === 'application/x-www-form-urlencoded') {\n        obj = [\n          ...obj,\n          {\n            spread: 'urlSearchParamsBodySerializer',\n          },\n          {\n            key: 'headers',\n            value: [\n              {\n                key: 'Content-Type',\n                value: contents[0],\n              },\n              {\n                spread: 'options?.headers',\n              },\n            ],\n          },\n        ];\n        onClientImport?.('urlSearchParamsBodySerializer');\n      }\n    }\n\n    // TODO: set parseAs to skip inference if every result has the same\n    // content type. currently impossible because successes do not contain\n    // header information\n\n    obj = [\n      ...obj,\n      {\n        key: 'url',\n        value: operation.path,\n      },\n    ];\n\n    if (responseTransformerName) {\n      obj = [\n        ...obj,\n        {\n          key: 'responseTransformer',\n          value: responseTransformerName,\n        },\n      ];\n    }\n\n    return compiler.objectExpression({\n      identifiers: ['responseTransformer'],\n      obj,\n    });\n  }\n\n  const toObj = (parameters: OperationParameter[]) =>\n    parameters.reduce(\n      (prev, curr) => {\n        const key = curr.prop;\n        const value = config.useOptions ? `data.${curr.name}` : curr.name;\n        if (key === value) {\n          prev[key] = key;\n        } else if (escapeName(key) === key) {\n          prev[key] = value;\n        } else {\n          prev[`'${key}'`] = value;\n        }\n        return prev;\n      },\n      {} as Record<string, unknown>,\n    );\n\n  const obj: Record<string, any> = {\n    method: operation.method,\n    url: operation.path,\n  };\n\n  if (operation.parametersPath.length) {\n    obj.path = toObj(operation.parametersPath);\n  }\n\n  if (operation.parametersCookie.length) {\n    obj.cookies = toObj(operation.parametersCookie);\n  }\n\n  if (operation.parametersHeader.length) {\n    obj.headers = toObj(operation.parametersHeader);\n  }\n\n  if (operation.parametersQuery.length) {\n    obj.query = toObj(operation.parametersQuery);\n  }\n\n  if (operation.parametersForm.length) {\n    obj.formData = toObj(operation.parametersForm);\n  }\n\n  if (operation.parametersBody) {\n    if (operation.parametersBody.in === 'formData') {\n      if (config.useOptions) {\n        obj.formData = `data.${operation.parametersBody.name}`;\n      } else {\n        obj.formData = operation.parametersBody.name;\n      }\n    }\n    if (operation.parametersBody.in === 'body') {\n      if (config.useOptions) {\n        obj.body = `data.${operation.parametersBody.name}`;\n      } else {\n        obj.body = operation.parametersBody.name;\n      }\n    }\n  }\n\n  if (operation.parametersBody?.mediaType) {\n    obj.mediaType = operation.parametersBody?.mediaType;\n  }\n\n  if (operation.responseHeader) {\n    obj.responseHeader = operation.responseHeader;\n  }\n\n  if (responseTransformerName) {\n    obj.responseTransformer = responseTransformerName;\n  }\n\n  const errorResponses = operation.responses.filter((response) =>\n    response.responseTypes.includes('error'),\n  );\n  if (errorResponses.length > 0) {\n    const errors: Record<number | string, string> = {};\n    errorResponses.forEach((response) => {\n      errors[response.code] = response.description ?? '';\n    });\n    obj.errors = errors;\n  }\n\n  return compiler.objectExpression({\n    identifiers: [\n      'body',\n      'cookies',\n      'formData',\n      'headers',\n      'path',\n      'query',\n      'responseTransformer',\n    ],\n    obj,\n    shorthand: true,\n  });\n};\n\nexport const serviceFunctionIdentifier = ({\n  config,\n  handleIllegal,\n  id,\n  operation,\n}: {\n  config: ClientConfig;\n  handleIllegal?: boolean;\n  id: string;\n  operation: IR.OperationObject | Operation;\n}) => {\n  if (config.plugins['@hey-api/sdk']?.methodNameBuilder) {\n    return config.plugins['@hey-api/sdk'].methodNameBuilder(operation);\n  }\n\n  if (handleIllegal && id.match(reservedJavaScriptKeywordsRegExp)) {\n    return `${id}_`;\n  }\n\n  return id;\n};\n\nconst toOperationStatements = ({\n  client,\n  onClientImport,\n  onImport,\n  operation,\n}: {\n  client: Client;\n  onClientImport?: OnImport;\n  onImport: OnImport;\n  operation: Operation;\n}) => {\n  const config = getConfig();\n\n  const options = toRequestOptions({\n    client,\n    onClientImport,\n    onImport,\n    operation,\n  });\n\n  if (!isLegacyClient(config)) {\n    const errorType = setUniqueTypeName({\n      client,\n      meta: {\n        // TODO: this should be exact ref to operation for consistency,\n        // but name should work too as operation ID is unique\n        $ref: operation.name,\n        name: operation.name,\n      },\n      nameTransformer: operationErrorTypeName,\n    }).name;\n    const successResponses = operation.responses.filter((response) =>\n      response.responseTypes.includes('success'),\n    );\n    const responseType = successResponses.length\n      ? setUniqueTypeName({\n          client,\n          meta: {\n            // TODO: this should be exact ref to operation for consistency,\n            // but name should work too as operation ID is unique\n            $ref: operation.name,\n            name: operation.name,\n          },\n          nameTransformer: operationResponseTypeName,\n        }).name\n      : 'void';\n    return [\n      compiler.returnFunctionCall({\n        args: [options],\n        name: `(options?.client ?? client).${operation.method.toLocaleLowerCase()}`,\n        types:\n          errorType && responseType\n            ? [responseType, errorType, 'ThrowOnError']\n            : errorType\n              ? ['unknown', errorType, 'ThrowOnError']\n              : responseType\n                ? [responseType, 'unknown', 'ThrowOnError']\n                : [],\n      }),\n    ];\n  }\n\n  if (legacyNameFromConfig(config)) {\n    return [\n      compiler.returnFunctionCall({\n        args: [options],\n        name: 'this.httpRequest.request',\n      }),\n    ];\n  }\n\n  const clientPlugin = getClientPlugin(config);\n  if (clientPlugin.name === 'legacy/angular') {\n    return [\n      compiler.returnFunctionCall({\n        args: ['OpenAPI', 'this.http', options],\n        name: '__request',\n      }),\n    ];\n  }\n\n  return [\n    compiler.returnFunctionCall({\n      args: ['OpenAPI', options],\n      name: '__request',\n    }),\n  ];\n};\n\nconst processService = ({\n  client,\n  onClientImport,\n  onImport,\n  onNode,\n  service,\n}: {\n  client: Client;\n  onClientImport: OnImport;\n  onImport: OnImport;\n  onNode: OnNode;\n  service: Service;\n}) => {\n  const config = getConfig();\n\n  const clientPlugin = getClientPlugin(config);\n  const isLegacy = isLegacyClient(config);\n\n  for (const operation of service.operations) {\n    if (operation.parameters.length) {\n      generateImport({\n        client,\n        meta: {\n          // TODO: this should be exact ref to operation for consistency,\n          // but name should work too as operation ID is unique\n          $ref: operation.name,\n          name: operation.name,\n        },\n        nameTransformer: operationDataTypeName,\n        onImport,\n      });\n    }\n\n    if (!isLegacy) {\n      generateImport({\n        client,\n        meta: {\n          // TODO: this should be exact ref to operation for consistency,\n          // but name should work too as operation ID is unique\n          $ref: operation.name,\n          name: operation.name,\n        },\n        nameTransformer: operationErrorTypeName,\n        onImport,\n      });\n    }\n\n    const successResponses = operation.responses.filter((response) =>\n      response.responseTypes.includes('success'),\n    );\n    if (successResponses.length) {\n      generateImport({\n        client,\n        meta: {\n          // TODO: this should be exact ref to operation for consistency,\n          // but name should work too as operation ID is unique\n          $ref: operation.name,\n          name: operation.name,\n        },\n        nameTransformer: operationResponseTypeName,\n        onImport,\n      });\n    }\n  }\n\n  const throwOnErrorTypeGeneric: FunctionTypeParameter = {\n    default:\n      ('throwOnError' in clientPlugin ? clientPlugin.throwOnError : false) ??\n      false,\n    extends: 'boolean',\n    name: 'ThrowOnError',\n  };\n\n  if (\n    !config.plugins['@hey-api/sdk']?.asClass &&\n    !legacyNameFromConfig(config)\n  ) {\n    for (const operation of service.operations) {\n      const compileFunctionParams = {\n        parameters: toOperationParamType(client, operation),\n        returnType: !isLegacy\n          ? undefined\n          : toOperationReturnType(client, operation),\n        statements: toOperationStatements({\n          client,\n          onClientImport,\n          onImport,\n          operation,\n        }),\n        types: !isLegacy ? [throwOnErrorTypeGeneric] : undefined,\n      };\n      const expression =\n        clientPlugin.name === 'legacy/angular'\n          ? compiler.anonymousFunction(compileFunctionParams)\n          : compiler.arrowFunction(compileFunctionParams);\n      const statement = compiler.constVariable({\n        comment: toOperationComment(operation),\n        exportConst: true,\n        expression,\n        name: serviceFunctionIdentifier({\n          config,\n          handleIllegal: true,\n          id: operation.name,\n          operation,\n        }),\n      });\n      onNode(statement);\n    }\n    return;\n  }\n\n  let members: ts.ClassElement[] = service.operations.map((operation) => {\n    const node = compiler.methodDeclaration({\n      accessLevel: 'public',\n      comment: toOperationComment(operation),\n      isStatic:\n        legacyNameFromConfig(config) === undefined &&\n        clientPlugin.name !== 'legacy/angular',\n      name: serviceFunctionIdentifier({\n        config,\n        id: operation.name,\n        operation,\n      }),\n      parameters: toOperationParamType(client, operation),\n      returnType: !isLegacy\n        ? undefined\n        : toOperationReturnType(client, operation),\n      statements: toOperationStatements({\n        client,\n        onClientImport,\n        onImport,\n        operation,\n      }),\n      types: !isLegacy ? [throwOnErrorTypeGeneric] : undefined,\n    });\n    return node;\n  });\n\n  if (!members.length) {\n    return;\n  }\n\n  // Push constructor to front if needed\n  if (legacyNameFromConfig(config)) {\n    members = [\n      compiler.constructorDeclaration({\n        multiLine: false,\n        parameters: [\n          {\n            accessLevel: 'public',\n            isReadOnly: true,\n            name: 'httpRequest',\n            type: 'BaseHttpRequest',\n          },\n        ],\n      }),\n      ...members,\n    ];\n  } else if (clientPlugin.name === 'legacy/angular') {\n    members = [\n      compiler.constructorDeclaration({\n        multiLine: false,\n        parameters: [\n          {\n            accessLevel: 'public',\n            isReadOnly: true,\n            name: 'http',\n            type: 'HttpClient',\n          },\n        ],\n      }),\n      ...members,\n    ];\n  }\n\n  const _members: Array<ts.ClassElement> = [];\n  members.forEach((member, index) => {\n    // add newline between each class member\n    if (index) {\n      // @ts-expect-error\n      _members.push(compiler.identifier({ text: '\\n' }));\n    }\n\n    _members.push(member);\n  });\n\n  const statement = compiler.classDeclaration({\n    decorator:\n      clientPlugin.name === 'legacy/angular'\n        ? { args: [{ providedIn: 'root' }], name: 'Injectable' }\n        : undefined,\n    exportClass: true,\n    name: transformClassName({\n      config,\n      name: service.name,\n    }),\n    nodes: _members,\n  });\n  onNode(statement);\n};\n\nexport const handlerLegacy: Plugin.LegacyHandler<Config> = ({\n  client,\n  files,\n  plugin,\n}) => {\n  const config = getConfig();\n\n  const isLegacy = isLegacyClient(config);\n\n  const sdkOutput = 'sdk';\n\n  files.sdk = new TypeScriptFile({\n    dir: config.output.path,\n    exportFromIndex: plugin.exportFromIndex,\n    id: 'sdk',\n    name: `${sdkOutput}.ts`,\n  });\n\n  // Import required packages and core files.\n  if (!isLegacy) {\n    files.sdk.import({\n      module: clientModulePath({ config, sourceOutput: sdkOutput }),\n      name: 'createClient',\n    });\n    files.sdk.import({\n      module: clientModulePath({ config, sourceOutput: sdkOutput }),\n      name: 'createConfig',\n    });\n    files.sdk.import({\n      ...clientApi.OptionsLegacyParser,\n      module: clientModulePath({ config, sourceOutput: sdkOutput }),\n    });\n  } else {\n    const clientPlugin = getClientPlugin(config);\n    if (clientPlugin.name === 'legacy/angular') {\n      files.sdk.import({\n        module: '@angular/core',\n        name: 'Injectable',\n      });\n\n      if (!legacyNameFromConfig(config)) {\n        files.sdk.import({\n          module: '@angular/common/http',\n          name: 'HttpClient',\n        });\n      }\n\n      files.sdk.import({\n        asType: true,\n        module: 'rxjs',\n        name: 'Observable',\n      });\n    } else {\n      files.sdk.import({\n        asType: true,\n        module: './core/CancelablePromise',\n        name: 'CancelablePromise',\n      });\n    }\n\n    if (config.plugins['@hey-api/sdk']?.response === 'response') {\n      files.sdk.import({\n        asType: true,\n        module: './core/ApiResult',\n        name: 'ApiResult',\n      });\n    }\n\n    if (legacyNameFromConfig(config)) {\n      const clientPlugin = getClientPlugin(config);\n      files.sdk.import({\n        asType: clientPlugin.name !== 'legacy/angular',\n        module: './core/BaseHttpRequest',\n        name: 'BaseHttpRequest',\n      });\n    } else {\n      files.sdk.import({\n        module: './core/OpenAPI',\n        name: 'OpenAPI',\n      });\n      files.sdk.import({\n        alias: '__request',\n        module: './core/request',\n        name: 'request',\n      });\n    }\n  }\n\n  // define client first\n  if (!isLegacy) {\n    const clientPlugin = getClientPlugin(config);\n    const statement = compiler.constVariable({\n      exportConst: true,\n      expression: compiler.callExpression({\n        functionName: 'createClient',\n        parameters: [\n          compiler.callExpression({\n            functionName: 'createConfig',\n            parameters: [\n              'throwOnError' in clientPlugin && clientPlugin.throwOnError\n                ? compiler.objectExpression({\n                    obj: [\n                      {\n                        key: 'throwOnError',\n                        value: true,\n                      },\n                    ],\n                  })\n                : undefined,\n            ],\n          }),\n        ],\n      }),\n      name: 'client',\n    });\n    files.sdk.add(statement);\n  }\n\n  for (const service of client.services) {\n    processService({\n      client,\n      onClientImport: (imported) => {\n        files.sdk!.import({\n          module: clientModulePath({ config, sourceOutput: sdkOutput }),\n          name: imported,\n        });\n      },\n      onImport: (imported) => {\n        files.sdk!.import({\n          // this detection could be done safer, but it shouldn't cause any issues\n          asType: !imported.endsWith('Transformer'),\n          module: `./${files.types!.nameWithoutExtension()}`,\n          name: imported,\n        });\n      },\n      onNode: (node) => {\n        files.sdk!.add(node);\n      },\n      service,\n    });\n  }\n};\n","import { compiler } from '../../../compiler';\nimport { clientModulePath } from '../../../generate/client';\nimport type { FileImportResult } from '../../../generate/files';\nimport type { IR } from '../../../ir/types';\nimport type { Plugin } from '../../types';\nimport { getClientPlugin } from '../client-core/utils';\nimport { nuxtTypeDefault, nuxtTypeResponse, sdkId } from './constants';\nimport type { Config } from './types';\n\nexport const createTypeOptions = ({\n  clientOptions,\n  context,\n  plugin,\n}: {\n  clientOptions: FileImportResult;\n  context: IR.Context;\n  plugin: Plugin.Instance<Config>;\n}) => {\n  const file = context.file({ id: sdkId })!;\n  const client = getClientPlugin(context.config);\n  const isNuxtClient = client.name === '@hey-api/client-nuxt';\n\n  const clientModule = clientModulePath({\n    config: context.config,\n    sourceOutput: file.nameWithoutExtension(),\n  });\n  const tDataShape = file.import({\n    asType: true,\n    module: clientModule,\n    name: 'TDataShape',\n  });\n  const clientType = file.import({\n    asType: true,\n    module: clientModule,\n    name: 'Client',\n  });\n\n  const typeOptions = compiler.typeAliasDeclaration({\n    exportType: true,\n    name: 'Options',\n    type: compiler.typeIntersectionNode({\n      types: [\n        compiler.typeReferenceNode({\n          typeArguments: isNuxtClient\n            ? [\n                compiler.typeReferenceNode({ typeName: 'TComposable' }),\n                compiler.typeReferenceNode({ typeName: 'TData' }),\n                compiler.typeReferenceNode({ typeName: nuxtTypeResponse }),\n                compiler.typeReferenceNode({ typeName: nuxtTypeDefault }),\n              ]\n            : [\n                compiler.typeReferenceNode({ typeName: 'TData' }),\n                compiler.typeReferenceNode({ typeName: 'ThrowOnError' }),\n              ],\n          typeName: clientOptions.name,\n        }),\n        compiler.typeInterfaceNode({\n          properties: [\n            {\n              comment: [\n                'You can provide a client instance returned by `createClient()` instead of',\n                'individual options. This might be also useful if you want to implement a',\n                'custom client.',\n              ],\n              isRequired: !plugin.client,\n              name: 'client',\n              type: compiler.typeReferenceNode({ typeName: clientType.name }),\n            },\n            {\n              comment: [\n                'You can pass arbitrary values through the `meta` object. This can be',\n                \"used to access values that aren't defined as part of the SDK function.\",\n              ],\n              isRequired: false,\n              name: 'meta',\n              type: compiler.typeReferenceNode({\n                typeArguments: [\n                  compiler.keywordTypeNode({ keyword: 'string' }),\n                  compiler.keywordTypeNode({ keyword: 'unknown' }),\n                ],\n                typeName: 'Record',\n              }),\n            },\n          ],\n          useLegacyResolution: false,\n        }),\n      ],\n    }),\n    typeParameters: isNuxtClient\n      ? [\n          compiler.typeParameterDeclaration({\n            constraint: compiler.typeReferenceNode({ typeName: 'Composable' }),\n            name: 'TComposable',\n          }),\n          compiler.typeParameterDeclaration({\n            constraint: compiler.typeReferenceNode({\n              typeName: tDataShape.name,\n            }),\n            defaultType: compiler.typeReferenceNode({\n              typeName: tDataShape.name,\n            }),\n            name: 'TData',\n          }),\n          compiler.typeParameterDeclaration({\n            defaultType: compiler.keywordTypeNode({ keyword: 'unknown' }),\n            name: nuxtTypeResponse,\n          }),\n          compiler.typeParameterDeclaration({\n            defaultType: compiler.keywordTypeNode({ keyword: 'undefined' }),\n            name: nuxtTypeDefault,\n          }),\n        ]\n      : [\n          compiler.typeParameterDeclaration({\n            constraint: compiler.typeReferenceNode({\n              typeName: tDataShape.name,\n            }),\n            defaultType: compiler.typeReferenceNode({\n              typeName: tDataShape.name,\n            }),\n            name: 'TData',\n          }),\n          compiler.typeParameterDeclaration({\n            constraint: compiler.keywordTypeNode({ keyword: 'boolean' }),\n            defaultType: compiler.keywordTypeNode({ keyword: 'boolean' }),\n            name: 'ThrowOnError',\n          }),\n        ],\n  });\n\n  file.add(typeOptions);\n};\n","import ts from 'typescript';\n\nimport { compiler } from '../../../compiler';\nimport { clientApi, clientModulePath } from '../../../generate/client';\nimport type { IR } from '../../../ir/types';\nimport { stringCase } from '../../../utils/stringCase';\nimport {\n  createOperationComment,\n  isOperationOptionsRequired,\n} from '../../shared/utils/operation';\nimport type { Plugin } from '../../types';\nimport { getClientPlugin } from '../client-core/utils';\nimport { importIdentifier } from '../typescript/ref';\nimport { nuxtTypeComposable, nuxtTypeDefault, sdkId } from './constants';\nimport {\n  operationClasses,\n  operationOptionsType,\n  operationStatements,\n} from './operation';\nimport { serviceFunctionIdentifier } from './plugin-legacy';\nimport { createTypeOptions } from './typeOptions';\nimport type { Config } from './types';\n\nconst createClientClassNodes = ({\n  plugin,\n}: {\n  plugin: Plugin.Instance<Config>;\n}): ReadonlyArray<ts.ClassElement> => {\n  const clientAssignmentStatement = compiler.expressionToStatement({\n    expression: compiler.binaryExpression({\n      left: compiler.propertyAccessExpression({\n        expression: compiler.this(),\n        name: '_client',\n      }),\n      operator: '=',\n      right: compiler.propertyAccessExpression({\n        expression: compiler.identifier({ text: 'args' }),\n        name: 'client',\n      }),\n    }),\n  });\n\n  return [\n    compiler.propertyDeclaration({\n      initializer: plugin.client\n        ? compiler.identifier({ text: '_heyApiClient' })\n        : undefined,\n      modifier: 'protected',\n      name: '_client',\n      type: ts.factory.createTypeReferenceNode('Client'),\n    }),\n    // @ts-expect-error\n    compiler.identifier({ text: '\\n' }),\n    compiler.constructorDeclaration({\n      multiLine: true,\n      parameters: [\n        {\n          isRequired: !plugin.client,\n          name: 'args',\n          type: compiler.typeInterfaceNode({\n            properties: [\n              {\n                isRequired: !plugin.client,\n                name: 'client',\n                type: 'Client',\n              },\n            ],\n            useLegacyResolution: false,\n          }),\n        },\n      ],\n      statements: [\n        !plugin.client\n          ? clientAssignmentStatement\n          : compiler.ifStatement({\n              expression: compiler.propertyAccessExpression({\n                expression: compiler.identifier({ text: 'args' }),\n                isOptional: true,\n                name: 'client',\n              }),\n              thenStatement: compiler.block({\n                statements: [clientAssignmentStatement],\n              }),\n            }),\n      ],\n    }),\n  ];\n};\n\ninterface SdkClassEntry {\n  /**\n   * Name of the class.\n   */\n  className: string;\n  /**\n   * Child classes located inside this class.\n   */\n  classes: Set<string>;\n  /**\n   * Track unique added method nodes.\n   */\n  methods: Set<string>;\n  /**\n   * List of class nodes containing methods.\n   */\n  nodes: Array<ts.ClassElement>;\n  /**\n   * Is this a root class?\n   */\n  root: boolean;\n}\n\nconst generateClassSdk = ({\n  context,\n  plugin,\n}: {\n  context: IR.Context;\n  plugin: Plugin.Instance<Config>;\n}) => {\n  const client = getClientPlugin(context.config);\n  const isNuxtClient = client.name === '@hey-api/client-nuxt';\n  const file = context.file({ id: sdkId })!;\n  const sdkClasses = new Map<string, SdkClassEntry>();\n  /**\n   * Track unique added classes.\n   */\n  const generatedClasses = new Set<string>();\n\n  const clientClassNodes = plugin.instance\n    ? createClientClassNodes({ plugin })\n    : [];\n\n  context.subscribe('operation', ({ operation }) => {\n    const isRequiredOptions = isOperationOptionsRequired({\n      context,\n      operation,\n    });\n    const identifierResponse = importIdentifier({\n      context,\n      file,\n      operation,\n      type: 'response',\n    });\n\n    const classes = operationClasses({ context, operation, plugin });\n\n    for (const entry of classes.values()) {\n      entry.path.forEach((currentClassName, index) => {\n        if (!sdkClasses.has(currentClassName)) {\n          sdkClasses.set(currentClassName, {\n            className: currentClassName,\n            classes: new Set(),\n            methods: new Set(),\n            nodes: [],\n            root: !index,\n          });\n        }\n\n        const parentClassName = entry.path[index - 1];\n        if (parentClassName) {\n          const parentClass = sdkClasses.get(parentClassName)!;\n          parentClass.classes.add(currentClassName);\n          sdkClasses.set(parentClassName, parentClass);\n        }\n\n        const isLast = entry.path.length === index + 1;\n        // add methods only to the last class\n        if (!isLast) {\n          return;\n        }\n\n        const currentClass = sdkClasses.get(currentClassName)!;\n\n        // avoid duplicate methods\n        if (currentClass.methods.has(entry.methodName)) {\n          return;\n        }\n\n        const functionNode = compiler.methodDeclaration({\n          accessLevel: 'public',\n          comment: createOperationComment({ operation }),\n          isStatic: !plugin.instance,\n          name: entry.methodName,\n          parameters: [\n            {\n              isRequired: isRequiredOptions,\n              name: 'options',\n              type: operationOptionsType({\n                context,\n                file,\n                operation,\n                throwOnError: isNuxtClient ? undefined : 'ThrowOnError',\n              }),\n            },\n          ],\n          returnType: undefined,\n          statements: operationStatements({\n            context,\n            isRequiredOptions,\n            operation,\n            plugin,\n          }),\n          types: isNuxtClient\n            ? [\n                {\n                  // default: compiler.ots.string('$fetch'),\n                  extends: compiler.typeNode('Composable'),\n                  name: nuxtTypeComposable,\n                },\n                {\n                  default: identifierResponse.name\n                    ? compiler.typeReferenceNode({\n                        typeName: identifierResponse.name,\n                      })\n                    : compiler.typeNode('undefined'),\n                  extends: identifierResponse.name\n                    ? compiler.typeReferenceNode({\n                        typeName: identifierResponse.name,\n                      })\n                    : undefined,\n                  name: nuxtTypeDefault,\n                },\n              ]\n            : [\n                {\n                  default:\n                    ('throwOnError' in client ? client.throwOnError : false) ??\n                    false,\n                  extends: 'boolean',\n                  name: 'ThrowOnError',\n                },\n              ],\n        });\n\n        if (!currentClass.nodes.length) {\n          currentClass.nodes.push(functionNode);\n        } else {\n          currentClass.nodes.push(\n            // @ts-expect-error\n            compiler.identifier({ text: '\\n' }),\n            functionNode,\n          );\n        }\n\n        currentClass.methods.add(entry.methodName);\n\n        sdkClasses.set(currentClassName, currentClass);\n      });\n    }\n  });\n\n  const generateClass = (currentClass: SdkClassEntry) => {\n    if (generatedClasses.has(currentClass.className)) {\n      return;\n    }\n\n    if (currentClass.classes.size) {\n      for (const childClassName of currentClass.classes) {\n        const childClass = sdkClasses.get(childClassName)!;\n        generateClass(childClass);\n\n        currentClass.nodes.push(\n          compiler.propertyDeclaration({\n            initializer: plugin.instance\n              ? compiler.newExpression({\n                  argumentsArray: plugin.instance\n                    ? [\n                        compiler.objectExpression({\n                          multiLine: false,\n                          obj: [\n                            {\n                              key: 'client',\n                              value: compiler.propertyAccessExpression({\n                                expression: compiler.this(),\n                                name: '_client',\n                              }),\n                            },\n                          ],\n                        }),\n                      ]\n                    : [],\n                  expression: compiler.identifier({\n                    text: childClass.className,\n                  }),\n                })\n              : compiler.identifier({ text: childClass.className }),\n            modifier: plugin.instance ? undefined : 'static',\n            name: stringCase({\n              case: 'camelCase',\n              value: childClass.className,\n            }),\n          }),\n        );\n      }\n    }\n\n    const node = compiler.classDeclaration({\n      exportClass: currentClass.root,\n      extendedClasses: plugin.instance ? ['_HeyApiClient'] : undefined,\n      name: currentClass.className,\n      nodes: currentClass.nodes,\n    });\n    file.add(node);\n    generatedClasses.add(currentClass.className);\n  };\n\n  context.subscribe('after', () => {\n    if (clientClassNodes.length) {\n      const node = compiler.classDeclaration({\n        exportClass: false,\n        name: '_HeyApiClient',\n        nodes: clientClassNodes,\n      });\n      file.add(node);\n    }\n\n    for (const sdkClass of sdkClasses.values()) {\n      generateClass(sdkClass);\n    }\n  });\n};\n\nconst generateFlatSdk = ({\n  context,\n  plugin,\n}: {\n  context: IR.Context;\n  plugin: Plugin.Instance<Config>;\n}) => {\n  const client = getClientPlugin(context.config);\n  const isNuxtClient = client.name === '@hey-api/client-nuxt';\n  const file = context.file({ id: sdkId })!;\n\n  context.subscribe('operation', ({ operation }) => {\n    const isRequiredOptions = isOperationOptionsRequired({\n      context,\n      operation,\n    });\n    const identifierResponse = importIdentifier({\n      context,\n      file,\n      operation,\n      type: 'response',\n    });\n    const node = compiler.constVariable({\n      comment: createOperationComment({ operation }),\n      exportConst: true,\n      expression: compiler.arrowFunction({\n        parameters: [\n          {\n            isRequired: isRequiredOptions,\n            name: 'options',\n            type: operationOptionsType({\n              context,\n              file,\n              operation,\n              throwOnError: isNuxtClient ? undefined : 'ThrowOnError',\n            }),\n          },\n        ],\n        returnType: undefined,\n        statements: operationStatements({\n          context,\n          isRequiredOptions,\n          operation,\n          plugin,\n        }),\n        types: isNuxtClient\n          ? [\n              {\n                // default: compiler.ots.string('$fetch'),\n                extends: compiler.typeNode('Composable'),\n                name: nuxtTypeComposable,\n              },\n              {\n                default: identifierResponse.name\n                  ? compiler.typeReferenceNode({\n                      typeName: identifierResponse.name,\n                    })\n                  : compiler.typeNode('undefined'),\n                extends: identifierResponse.name\n                  ? compiler.typeReferenceNode({\n                      typeName: identifierResponse.name,\n                    })\n                  : undefined,\n                name: nuxtTypeDefault,\n              },\n            ]\n          : [\n              {\n                default:\n                  ('throwOnError' in client ? client.throwOnError : false) ??\n                  false,\n                extends: 'boolean',\n                name: 'ThrowOnError',\n              },\n            ],\n      }),\n      name: serviceFunctionIdentifier({\n        config: context.config,\n        handleIllegal: true,\n        id: operation.id,\n        operation,\n      }),\n    });\n    file.add(node);\n  });\n};\n\nexport const handler: Plugin.Handler<Config> = ({ context, plugin }) => {\n  const file = context.createFile({\n    exportFromIndex: plugin.exportFromIndex,\n    id: sdkId,\n    path: plugin.output,\n  });\n\n  // import required packages and core files\n  const clientModule = clientModulePath({\n    config: context.config,\n    sourceOutput: file.nameWithoutExtension(),\n  });\n  const clientOptions = file.import({\n    ...clientApi.Options,\n    alias: 'ClientOptions',\n    module: clientModule,\n  });\n\n  const client = getClientPlugin(context.config);\n  const isNuxtClient = client.name === '@hey-api/client-nuxt';\n  if (isNuxtClient) {\n    file.import({\n      asType: true,\n      module: clientModule,\n      name: 'Composable',\n    });\n  }\n\n  createTypeOptions({\n    clientOptions,\n    context,\n    plugin,\n  });\n\n  if (plugin.asClass) {\n    generateClassSdk({ context, plugin });\n  } else {\n    generateFlatSdk({ context, plugin });\n  }\n};\n","import type { Plugin } from '../../types';\nimport { handler } from './plugin';\nimport { handlerLegacy } from './plugin-legacy';\nimport type { Config } from './types';\n\nexport const defaultConfig: Plugin.Config<Config> = {\n  _dependencies: ['@hey-api/typescript'],\n  _handler: handler,\n  _handlerLegacy: handlerLegacy,\n  _infer: (config, context) => {\n    if (config.client) {\n      if (typeof config.client === 'boolean') {\n        config.client = context.pluginByTag(\n          'client',\n          '🚫 client needs to be set to generate SDKs - which HTTP client do you want to use?',\n        ) as unknown as typeof config.client;\n      }\n\n      context.ensureDependency(config.client);\n    }\n\n    if (config.transformer) {\n      if (typeof config.transformer === 'boolean') {\n        config.transformer = context.pluginByTag(\n          'transformer',\n        ) as unknown as typeof config.transformer;\n      }\n\n      context.ensureDependency(config.transformer);\n    }\n\n    if (config.validator) {\n      if (typeof config.validator === 'boolean') {\n        config.validator = context.pluginByTag(\n          'validator',\n        ) as unknown as typeof config.validator;\n      }\n\n      context.ensureDependency(config.validator);\n    }\n\n    if (config.instance) {\n      if (typeof config.instance !== 'string') {\n        config.instance = 'Sdk';\n      }\n\n      config.asClass = true;\n    }\n\n    // TODO: add responseStyle field to all clients\n    if (config.client !== '@hey-api/client-fetch') {\n      config.responseStyle = 'fields';\n    }\n  },\n  asClass: false,\n  auth: true,\n  classStructure: 'auto',\n  client: true,\n  exportFromIndex: true,\n  instance: false,\n  name: '@hey-api/sdk',\n  operationId: true,\n  output: 'sdk',\n  response: 'body',\n  responseStyle: 'fields',\n};\n\n/**\n * Type helper for `@hey-api/sdk` plugin, returns {@link Plugin.Config} object\n */\nexport const defineConfig: Plugin.DefineConfig<Config> = (config) => ({\n  ...defaultConfig,\n  ...config,\n});\n","import type ts from 'typescript';\n\nimport { type Comments, compiler } from '../../../compiler';\nimport { TypeScriptFile } from '../../../generate/files';\nimport { isOperationParameterRequired } from '../../../openApi';\nimport type {\n  Client,\n  Method,\n  Model,\n  OperationParameter,\n} from '../../../types/client';\nimport { getConfig, isLegacyClient } from '../../../utils/config';\nimport { enumEntry, enumUnionType } from '../../../utils/enum';\nimport { escapeComment } from '../../../utils/escape';\nimport { sortByName, sorterByName } from '../../../utils/sort';\nimport {\n  setUniqueTypeName,\n  type SetUniqueTypeNameResult,\n  toType,\n} from '../../../utils/type';\nimport type { Plugin } from '../../types';\nimport {\n  operationDataTypeName,\n  operationErrorTypeName,\n  operationResponseTypeName,\n} from '../sdk/plugin-legacy';\nimport type { Config } from './types';\n\nexport interface TypesProps {\n  client: Client;\n  model: Model;\n  onNode: (node: ts.Node) => void;\n  onRemoveNode?: VoidFunction;\n}\n\nconst treeName = '$OpenApiTs';\n\nexport const emptyModel: Model = {\n  $refs: [],\n  base: '',\n  description: null,\n  enum: [],\n  enums: [],\n  export: 'interface',\n  imports: [],\n  in: '',\n  isDefinition: false,\n  isNullable: false,\n  isReadOnly: false,\n  isRequired: false,\n  link: null,\n  name: '',\n  properties: [],\n  template: null,\n  type: '',\n};\n\nconst generateEnum = ({\n  comments,\n  leadingComment,\n  meta,\n  obj,\n  onNode,\n  ...setUniqueTypeNameArgs\n}: Omit<Parameters<typeof compiler.enumDeclaration>[0], 'name'> &\n  Pick<Parameters<typeof setUniqueTypeName>[0], 'client' | 'nameTransformer'> &\n  Pick<Model, 'meta'> &\n  Pick<TypesProps, 'onNode'>) => {\n  // generate types only for top-level models\n  if (!meta) {\n    return;\n  }\n\n  const { created, name } = setUniqueTypeName({\n    create: true,\n    meta,\n    ...setUniqueTypeNameArgs,\n  });\n  if (created) {\n    const node = compiler.enumDeclaration({\n      comments,\n      leadingComment,\n      name,\n      obj,\n    });\n    onNode(node);\n  }\n};\n\nexport const generateType = ({\n  comment,\n  meta,\n  onCreated,\n  onNode,\n  type,\n  ...setUniqueTypeNameArgs\n}: Omit<Parameters<typeof compiler.typeAliasDeclaration>[0], 'name'> &\n  Pick<Parameters<typeof setUniqueTypeName>[0], 'client' | 'nameTransformer'> &\n  Pick<Model, 'meta'> &\n  Pick<TypesProps, 'onNode'> & {\n    onCreated?: (name: string) => void;\n  }): SetUniqueTypeNameResult => {\n  // generate types only for top-level models\n  if (!meta) {\n    return {\n      created: false,\n      name: '',\n    };\n  }\n\n  const result = setUniqueTypeName({\n    create: true,\n    meta,\n    ...setUniqueTypeNameArgs,\n  });\n  const { created, name } = result;\n  if (created) {\n    const node = compiler.typeAliasDeclaration({\n      comment,\n      exportType: true,\n      name,\n      type,\n    });\n    onNode(node);\n\n    onCreated?.(name);\n  }\n  return result;\n};\n\nconst processComposition = (props: TypesProps) => {\n  const config = getConfig();\n\n  const enumDeclarations = [] as ts.EnumDeclaration[];\n\n  processType(props);\n\n  props.model.enums.forEach((enumerator) => {\n    if (\n      config.plugins['@hey-api/typescript']?.enums !== 'typescript+namespace'\n    ) {\n      return processEnum({\n        ...props,\n        model: enumerator,\n      });\n    }\n\n    return processScopedEnum({\n      ...props,\n      model: enumerator,\n      onNode: (node) => {\n        enumDeclarations.push(node as ts.EnumDeclaration);\n      },\n    });\n  });\n\n  if (enumDeclarations.length) {\n    props.onNode(\n      compiler.namespaceDeclaration({\n        name: props.model.name,\n        statements: enumDeclarations,\n      }),\n    );\n  }\n};\n\nconst processEnum = ({ client, model, onNode }: TypesProps) => {\n  const config = getConfig();\n\n  const properties: Record<string | number, unknown> = {};\n  const comments: Record<string | number, Comments> = {};\n  model.enum.forEach((enumerator) => {\n    const { key, value } = enumEntry(enumerator);\n    properties[key] = value;\n    const comment = enumerator.customDescription || enumerator.description;\n    if (comment) {\n      comments[key] = [escapeComment(comment)];\n    }\n  });\n\n  const comment = [\n    model.description && escapeComment(model.description),\n    model.deprecated && '@deprecated',\n  ];\n\n  if (\n    config.plugins['@hey-api/typescript']?.enums === 'typescript' ||\n    config.plugins['@hey-api/typescript']?.enums === 'typescript+namespace'\n  ) {\n    generateEnum({\n      client,\n      comments,\n      leadingComment: comment,\n      meta: model.meta,\n      obj: properties,\n      onNode,\n    });\n    return;\n  }\n\n  generateType({\n    client,\n    comment,\n    meta: model.meta,\n    onCreated: (name) => {\n      // create a separate JavaScript object export\n      if (config.plugins['@hey-api/typescript']?.enums === 'javascript') {\n        const expression = compiler.objectExpression({\n          multiLine: true,\n          obj: Object.entries(properties).map(([key, value]) => ({\n            comments: comments[key],\n            key,\n            value,\n          })),\n          unescape: true,\n        });\n        const node = compiler.constVariable({\n          assertion: 'const',\n          comment,\n          exportConst: true,\n          expression,\n          name,\n        });\n        onNode(node);\n      }\n    },\n    onNode,\n    type: enumUnionType(model.enum),\n  });\n};\n\nconst processScopedEnum = ({ model, onNode }: TypesProps) => {\n  const properties: Record<string | number, unknown> = {};\n  const comments: Record<string | number, Comments> = {};\n  model.enum.forEach((enumerator) => {\n    const { key, value } = enumEntry(enumerator);\n    properties[key] = value;\n    const comment = enumerator.customDescription || enumerator.description;\n    if (comment) {\n      comments[key] = [escapeComment(comment)];\n    }\n  });\n  onNode(\n    compiler.enumDeclaration({\n      comments,\n      leadingComment: [\n        model.description && escapeComment(model.description),\n        model.deprecated && '@deprecated',\n      ],\n      name: model.meta?.name || model.name,\n      obj: properties,\n    }),\n  );\n};\n\nconst processType = ({ client, model, onNode }: TypesProps) => {\n  generateType({\n    client,\n    comment: [\n      model.description && escapeComment(model.description),\n      model.deprecated && '@deprecated',\n    ],\n    meta: model.meta,\n    onNode,\n    type: toType(model),\n  });\n};\n\nconst processModel = (props: TypesProps) => {\n  switch (props.model.export) {\n    case 'all-of':\n    case 'any-of':\n    case 'one-of':\n    case 'interface':\n      return processComposition(props);\n    case 'enum':\n      return processEnum(props);\n    default:\n      return processType(props);\n  }\n};\n\ninterface MethodMap {\n  $ref?: string;\n  req?: OperationParameter[];\n  res?: Record<number | string, Model>;\n}\n\ntype PathMap = {\n  [method in Method]?: MethodMap;\n};\n\ntype PathsMap = Record<string, PathMap>;\n\nconst processServiceTypes = ({\n  client,\n  onNode,\n}: Pick<TypesProps, 'client' | 'onNode'>) => {\n  const pathsMap: PathsMap = {};\n\n  const config = getConfig();\n\n  if (\n    !config.plugins['@hey-api/sdk'] &&\n    !config.plugins['@hey-api/typescript']?.tree\n  ) {\n    return;\n  }\n\n  const isLegacy = isLegacyClient(config);\n\n  for (const service of client.services) {\n    for (const operation of service.operations) {\n      if (!operation.parameters.length && !operation.responses.length) {\n        continue;\n      }\n\n      if (!pathsMap[operation.path]) {\n        pathsMap[operation.path] = {};\n      }\n      const pathMap = pathsMap[operation.path]!;\n\n      if (!pathMap[operation.method]) {\n        pathMap[operation.method] = {};\n      }\n      const methodMap = pathMap[operation.method]!;\n      methodMap.$ref = operation.name;\n\n      if (operation.responses.length > 0) {\n        if (!methodMap.res) {\n          methodMap.res = {};\n        }\n\n        if (Array.isArray(methodMap.res)) {\n          continue;\n        }\n\n        operation.responses.forEach((response) => {\n          methodMap.res![response.code] = response;\n        });\n      }\n\n      if (operation.parameters.length > 0) {\n        let bodyParameters: OperationParameter = {\n          mediaType: null,\n          ...emptyModel,\n          in: 'body',\n          name: 'body',\n          prop: 'body',\n        };\n        let bodyParameter = operation.parameters.filter(\n          (parameter) => parameter.in === 'body',\n        );\n        if (!bodyParameter.length) {\n          bodyParameter = operation.parameters.filter(\n            (parameter) => parameter.in === 'formData',\n          );\n        }\n\n        if (bodyParameter.length === 1) {\n          bodyParameters = {\n            ...emptyModel,\n            ...bodyParameter[0]!,\n            in: 'body',\n            isRequired: bodyParameter[0]!.isRequired,\n            name: 'body',\n            prop: 'body',\n          };\n          // assume we have multiple formData parameters from Swagger 2.0\n        } else if (bodyParameter.length > 1) {\n          bodyParameters = {\n            ...emptyModel,\n            in: 'body',\n            isRequired: bodyParameter.some((parameter) => parameter.isRequired),\n            mediaType: 'multipart/form-data',\n            name: 'body',\n            prop: 'body',\n            properties: bodyParameter,\n          };\n        }\n\n        const headerParameters: OperationParameter = {\n          ...emptyModel,\n          in: 'header',\n          isRequired: isOperationParameterRequired(\n            operation.parameters.filter(\n              (parameter) => parameter.in === 'header',\n            ),\n          ),\n          mediaType: null,\n          name: isLegacy ? 'header' : 'headers',\n          prop: isLegacy ? 'header' : 'headers',\n          properties: operation.parameters\n            .filter((parameter) => parameter.in === 'header')\n            .sort(sorterByName),\n        };\n        const pathParameters: OperationParameter = {\n          ...emptyModel,\n          in: 'path',\n          isRequired: isOperationParameterRequired(\n            operation.parameters.filter((parameter) => parameter.in === 'path'),\n          ),\n          mediaType: null,\n          name: 'path',\n          prop: 'path',\n          properties: operation.parameters\n            .filter((parameter) => parameter.in === 'path')\n            .sort(sorterByName),\n        };\n        const queryParameters: OperationParameter = {\n          ...emptyModel,\n          in: 'query',\n          isRequired: isOperationParameterRequired(\n            operation.parameters.filter(\n              (parameter) => parameter.in === 'query',\n            ),\n          ),\n          mediaType: null,\n          name: 'query',\n          prop: 'query',\n          properties: operation.parameters\n            .filter((parameter) => parameter.in === 'query')\n            .sort(sorterByName),\n        };\n        const operationProperties = !isLegacy\n          ? [\n              bodyParameters,\n              headerParameters,\n              pathParameters,\n              queryParameters,\n            ].filter(\n              (param) =>\n                param.properties.length ||\n                param.$refs.length ||\n                param.mediaType,\n            )\n          : sortByName([...operation.parameters]);\n\n        methodMap.req = operationProperties;\n\n        // create type export for operation data\n        generateType({\n          client,\n          meta: {\n            // TODO: this should be exact ref to operation for consistency,\n            // but name should work too as operation ID is unique\n            $ref: operation.name,\n            name: operation.name,\n          },\n          nameTransformer: operationDataTypeName,\n          onNode,\n          type: toType({\n            ...emptyModel,\n            isRequired: true,\n            properties: operationProperties,\n          }),\n        });\n      }\n\n      const successResponses = operation.responses.filter((response) =>\n        response.responseTypes.includes('success'),\n      );\n\n      if (successResponses.length > 0) {\n        // create type export for operation response\n        generateType({\n          client,\n          meta: {\n            // TODO: this should be exact ref to operation for consistency,\n            // but name should work too as operation ID is unique\n            $ref: operation.name,\n            name: operation.name,\n          },\n          nameTransformer: operationResponseTypeName,\n          onNode,\n          type: toType({\n            ...emptyModel,\n            export: 'any-of',\n            isRequired: true,\n            properties: successResponses,\n          }),\n        });\n\n        const errorResponses = operation.responses.filter((response) =>\n          response.responseTypes.includes('error'),\n        );\n\n        if (!isLegacy) {\n          // create type export for operation error\n          generateType({\n            client,\n            meta: {\n              // TODO: this should be exact ref to operation for consistency,\n              // but name should work too as operation ID is unique\n              $ref: operation.name,\n              name: operation.name,\n            },\n            nameTransformer: operationErrorTypeName,\n            onNode,\n            type: toType(\n              errorResponses.length\n                ? {\n                    ...emptyModel,\n                    export: 'one-of',\n                    isRequired: true,\n                    properties: errorResponses,\n                  }\n                : {\n                    ...emptyModel,\n                    base: 'unknown',\n                    isRequired: true,\n                    type: 'unknown',\n                  },\n            ),\n          });\n        }\n      }\n    }\n  }\n\n  const properties = Object.entries(pathsMap).map(([path, pathMap]) => {\n    const pathParameters = Object.entries(pathMap)\n      .map(([_method, methodMap]) => {\n        const method = _method as Method;\n\n        let methodParameters: Model[] = [];\n\n        if (methodMap.req) {\n          const operationName = methodMap.$ref!;\n          const { name: base } = setUniqueTypeName({\n            client,\n            meta: {\n              // TODO: this should be exact ref to operation for consistency,\n              // but name should work too as operation ID is unique\n              $ref: operationName,\n              name: operationName,\n            },\n            nameTransformer: operationDataTypeName,\n          });\n          const reqKey: Model = {\n            ...emptyModel,\n            base,\n            export: 'reference',\n            isRequired: true,\n            name: 'req',\n            properties: [],\n            type: base,\n          };\n          methodParameters = [...methodParameters, reqKey];\n        }\n\n        if (methodMap.res) {\n          const reqResParameters = Object.entries(methodMap.res).map(\n            ([code, base]) => {\n              // TODO: move query params into separate query key\n              const value: Model = {\n                ...emptyModel,\n                ...base,\n                isRequired: true,\n                name: String(code),\n              };\n              return value;\n            },\n          );\n\n          const resKey: Model = {\n            ...emptyModel,\n            isRequired: true,\n            name: 'res',\n            properties: reqResParameters,\n          };\n          methodParameters = [...methodParameters, resKey];\n        }\n\n        const methodKey: Model = {\n          ...emptyModel,\n          isRequired: true,\n          name: method.toLocaleLowerCase(),\n          properties: methodParameters,\n        };\n        return methodKey;\n      })\n      .filter(Boolean);\n    const pathKey: Model = {\n      ...emptyModel,\n      isRequired: true,\n      name: `'${path}'`,\n      properties: pathParameters as Model[],\n    };\n    return pathKey;\n  });\n\n  if (config.plugins['@hey-api/typescript']?.tree) {\n    generateType({\n      client,\n      meta: {\n        $ref: '@hey-api/openapi-ts',\n        name: treeName,\n      },\n      onNode,\n      type: toType({\n        ...emptyModel,\n        properties,\n      }),\n    });\n  }\n};\n\nexport const handlerLegacy: Plugin.LegacyHandler<Config> = ({\n  client,\n  files,\n  plugin,\n}) => {\n  const config = getConfig();\n\n  files.types = new TypeScriptFile({\n    dir: config.output.path,\n    exportFromIndex: plugin.exportFromIndex,\n    id: 'types',\n    name: 'types.ts',\n  });\n\n  const onNode: TypesProps['onNode'] = (node) => {\n    files.types?.add(node);\n  };\n\n  for (const model of client.models) {\n    processModel({ client, model, onNode });\n  }\n\n  processServiceTypes({ client, onNode });\n};\n","import type ts from 'typescript';\n\nimport { compiler } from '../../../compiler';\nimport { createOperationKey } from '../../../ir/operation';\nimport type { ModelMeta, OperationResponse } from '../../../types/client';\nimport { getConfig } from '../../../utils/config';\nimport { isModelDate, unsetUniqueTypeName } from '../../../utils/type';\nimport type { Plugin } from '../../types';\nimport {\n  modelResponseTransformerTypeName,\n  operationResponseTransformerTypeName,\n  operationResponseTypeName,\n} from '../sdk/plugin-legacy';\nimport { generateType, type TypesProps } from '../typescript/plugin-legacy';\nimport type { Config } from './types';\n\ninterface ModelProps extends TypesProps {\n  meta?: ModelMeta;\n  path: Array<string>;\n}\n\nconst dataVariableName = 'data';\n\nconst isVoidResponse = (response: OperationResponse) =>\n  response.base === 'unknown' &&\n  response.export === 'generic' &&\n  response.type === 'unknown';\n\nconst getRefModels = ({\n  client,\n  model,\n}: Pick<TypesProps, 'client' | 'model'>) => {\n  const refModels = model.$refs.map((ref) => {\n    const refModel = client.models.find((model) => model.meta?.$ref === ref);\n    if (!refModel) {\n      throw new Error(\n        `Ref ${ref} could not be found. Transformers cannot be generated without having access to all refs.`,\n      );\n    }\n    return refModel;\n  });\n  return refModels;\n};\n\nconst ensureModelResponseTransformerExists = (\n  props: Omit<ModelProps, 'path'>,\n) => {\n  const modelName = props.model.meta!.name;\n\n  const { name } = generateType({\n    ...props,\n    meta: {\n      $ref: `transformers/${modelName}`,\n      name: modelName,\n    },\n    nameTransformer: modelResponseTransformerTypeName,\n    onCreated: (name) => {\n      const statements = processModel({\n        ...props,\n        meta: {\n          $ref: `transformers/${modelName}`,\n          name,\n        },\n        path: [dataVariableName],\n      });\n      generateResponseTransformer({\n        ...props,\n        async: false,\n        name,\n        statements,\n      });\n    },\n    type: `(${dataVariableName}: any) => ${modelName}`,\n  });\n\n  const result = {\n    created: Boolean(props.client.types[name]),\n    name,\n  };\n  return result;\n};\n\nconst processArray = (props: ModelProps) => {\n  const { model } = props;\n  const refModels = getRefModels(props);\n\n  if (refModels.length === 1) {\n    const { created, name: nameModelResponseTransformer } =\n      ensureModelResponseTransformerExists({ ...props, model: refModels[0]! });\n\n    if (!created) {\n      return [];\n    }\n\n    return [\n      compiler.transformArrayMutation({\n        path: props.path,\n        transformerName: nameModelResponseTransformer,\n      }),\n    ];\n  }\n\n  if (\n    isModelDate(model) ||\n    (model.link &&\n      !Array.isArray(model.link) &&\n      model.link.export === 'any-of' &&\n      model.link.properties.find((property) => isModelDate(property)))\n  ) {\n    return [\n      compiler.transformArrayMap({\n        path: props.path,\n        transformExpression: compiler.conditionalExpression({\n          condition: compiler.identifier({ text: 'item' }),\n          whenFalse: compiler.identifier({ text: 'item' }),\n          whenTrue: compiler.transformNewDate({\n            parameterName: 'item',\n          }),\n        }),\n      }),\n    ];\n  }\n\n  // Not transform for this type\n  return [];\n};\n\nconst processProperty = (props: ModelProps) => {\n  const { model } = props;\n  const path = [...props.path, model.name];\n\n  if (\n    model.type === 'string' &&\n    model.export !== 'array' &&\n    isModelDate(model)\n  ) {\n    return [compiler.transformDateMutation({ path })];\n  }\n\n  // otherwise we recurse in case it's an object/array, and if it's not that will just bail with []\n  return processModel({\n    ...props,\n    model,\n    path,\n  });\n};\n\nconst processModel = (props: ModelProps): ts.Statement[] => {\n  const { model } = props;\n\n  switch (model.export) {\n    case 'array':\n      return processArray(props);\n    case 'interface':\n      return model.properties.flatMap((property) =>\n        processProperty({ ...props, model: property }),\n      );\n    case 'reference': {\n      if (model.$refs.length !== 1) {\n        return [];\n      }\n      const refModels = getRefModels(props);\n\n      const { created, name: nameModelResponseTransformer } =\n        ensureModelResponseTransformerExists({\n          ...props,\n          model: refModels[0]!,\n        });\n\n      if (!created) {\n        return [];\n      }\n\n      return model.in === 'response'\n        ? [\n            compiler.expressionToStatement({\n              expression: compiler.callExpression({\n                functionName: nameModelResponseTransformer,\n                parameters: [dataVariableName],\n              }),\n            }),\n          ]\n        : compiler.transformFunctionMutation({\n            path: props.path,\n            transformerName: nameModelResponseTransformer,\n          });\n    }\n    // unsupported\n    default:\n      return [];\n  }\n};\n\nconst generateResponseTransformer = ({\n  async,\n  client,\n  name,\n  onNode,\n  onRemoveNode,\n  statements,\n}: Pick<TypesProps, 'client' | 'onNode' | 'onRemoveNode'> & {\n  async: boolean;\n  name: string;\n  statements: Array<ts.Statement>;\n}) => {\n  const result = {\n    created: false,\n    name,\n  };\n\n  if (!statements.length) {\n    // clean up created type for response transformer if it turns out\n    // the transformer was never generated\n    unsetUniqueTypeName({\n      client,\n      name,\n    });\n    onRemoveNode?.();\n    return result;\n  }\n\n  const expression = compiler.arrowFunction({\n    async,\n    multiLine: true,\n    parameters: [\n      {\n        name: dataVariableName,\n      },\n    ],\n    statements: [\n      ...statements,\n      compiler.returnVariable({\n        expression: dataVariableName,\n      }),\n    ],\n  });\n  const statement = compiler.constVariable({\n    exportConst: true,\n    expression,\n    name,\n    typeName: name,\n  });\n  onNode(statement);\n\n  return {\n    created: true,\n    name,\n  };\n};\n\n// handles only response transformers for now\nexport const handlerLegacy: Plugin.LegacyHandler<Config> = ({\n  client,\n  files,\n}) => {\n  const config = getConfig();\n\n  const onNode: TypesProps['onNode'] = (node) => {\n    files.types?.add(node);\n  };\n  const onRemoveNode: TypesProps['onRemoveNode'] = () => {\n    files.types?.removeNode();\n  };\n\n  for (const service of client.services) {\n    for (const operation of service.operations) {\n      const successResponses = operation.responses.filter((response) =>\n        response.responseTypes.includes('success'),\n      );\n\n      if (!successResponses.length) {\n        continue;\n      }\n\n      const nonVoidResponses = successResponses.filter(\n        (response) => !isVoidResponse(response),\n      );\n\n      if (!nonVoidResponses.length) {\n        continue;\n      }\n\n      if (nonVoidResponses.length > 1) {\n        if (config.logs.level === 'debug') {\n          console.warn(\n            `❗️ Transformers warning: route ${createOperationKey(operation)} has ${nonVoidResponses.length} non-void success responses. This is currently not handled and we will not generate a response transformer. Please open an issue if you'd like this feature https://github.com/hey-api/openapi-ts/issues`,\n          );\n        }\n        continue;\n      }\n\n      const name = operationResponseTypeName(operation.name);\n      generateType({\n        client,\n        meta: {\n          $ref: `transformers/${name}`,\n          name,\n        },\n        nameTransformer: operationResponseTransformerTypeName,\n        onCreated: (nameCreated) => {\n          const statements =\n            successResponses.length > 1\n              ? successResponses.flatMap((response) => {\n                  const statements = processModel({\n                    client,\n                    meta: {\n                      $ref: `transformers/${name}`,\n                      name,\n                    },\n                    model: response,\n                    onNode,\n                    onRemoveNode,\n                    path: [dataVariableName],\n                  });\n\n                  // assume unprocessed responses are void\n                  if (!statements.length) {\n                    return [];\n                  }\n\n                  return [\n                    compiler.ifStatement({\n                      expression: compiler.safeAccessExpression(['data']),\n                      thenStatement: compiler.block({ statements }),\n                    }),\n                  ];\n                })\n              : processModel({\n                  client,\n                  meta: {\n                    $ref: `transformers/${name}`,\n                    name,\n                  },\n                  model: successResponses[0]!,\n                  onNode,\n                  onRemoveNode,\n                  path: [dataVariableName],\n                });\n          generateResponseTransformer({\n            async: true,\n            client,\n            name: nameCreated,\n            onNode,\n            onRemoveNode,\n            statements,\n          });\n        },\n        onNode,\n        type: `(${dataVariableName}: any) => Promise<${name}>`,\n      });\n    }\n  }\n};\n","import type { Plugin } from '../../types';\nimport { handler } from './plugin';\nimport { handlerLegacy } from './plugin-legacy';\nimport type { Config } from './types';\n\nexport const defaultConfig: Plugin.Config<Config> = {\n  _dependencies: ['@hey-api/typescript'],\n  _handler: handler,\n  _handlerLegacy: handlerLegacy,\n  _tags: ['transformer'],\n  bigInt: true,\n  dates: true,\n  exportFromIndex: false,\n  name: '@hey-api/transformers',\n  output: 'transformers',\n};\n\n/**\n * Type helper for `@hey-api/transformers`, returns {@link Plugin.Config} object\n */\nexport const defineConfig: Plugin.DefineConfig<Config> = (config) => ({\n  ...defaultConfig,\n  ...config,\n});\n","import ts from 'typescript';\n\nimport type { IR } from '../../../ir/types';\nimport { numberRegExp } from '../../../utils/regexp';\nimport { stringCase } from '../../../utils/stringCase';\n\n/**\n * Returns final field name for object properties. This might differ from the\n * original value as applying case transform function might alter it.\n */\nexport const fieldName = ({\n  context,\n  name,\n}: {\n  context: IR.Context;\n  name: string;\n}) => {\n  numberRegExp.lastIndex = 0;\n  if (numberRegExp.test(name)) {\n    // For negative numbers, use string literals instead\n    if (name.startsWith('-')) {\n      return ts.factory.createStringLiteral(name);\n    }\n    return ts.factory.createNumericLiteral(name);\n  }\n\n  // if (typeof context.config.output.case === 'function') {\n  //   return context.config.output.case({ value: name });\n  // }\n\n  return stringCase({ case: context.config.output.case, value: name });\n};\n","import ts from 'typescript';\n\nimport { compiler } from '../../../compiler';\nimport type { Identifier } from '../../../generate/files';\nimport type { IR } from '../../../ir/types';\nimport { parseUrl } from '../../../utils/url';\nimport type { Plugin } from '../../types';\nimport { getClientBaseUrlKey, getClientPlugin } from '../client-core/utils';\nimport { typesId } from './ref';\nimport type { Config } from './types';\n\nconst stringType = compiler.keywordTypeNode({ keyword: 'string' });\n\nconst serverToBaseUrlType = ({ server }: { server: IR.ServerObject }) => {\n  const url = parseUrl(server.url);\n\n  if (url.protocol && url.host) {\n    return compiler.literalTypeNode({\n      literal: compiler.stringLiteral({ text: server.url }),\n    });\n  }\n\n  return compiler.templateLiteralType({\n    value: [\n      url.protocol || stringType,\n      '://',\n      url.host || stringType,\n      url.port ? `:${url.port}` : '',\n      url.path || '',\n    ],\n  });\n};\n\nexport const createClientOptions = ({\n  context,\n  identifier,\n  servers,\n}: {\n  context: IR.Context;\n  identifier: Identifier;\n  plugin: Plugin.Instance<Config>;\n  servers: ReadonlyArray<IR.ServerObject>;\n}) => {\n  const file = context.file({ id: typesId })!;\n\n  if (!identifier.name) {\n    return;\n  }\n\n  const client = getClientPlugin(context.config);\n\n  const types: Array<ts.TypeNode> = servers.map((server) =>\n    serverToBaseUrlType({ server }),\n  );\n\n  if (!servers.length) {\n    types.push(stringType);\n  } else if (!('strictBaseUrl' in client && client.strictBaseUrl)) {\n    types.push(\n      compiler.typeIntersectionNode({\n        types: [stringType, ts.factory.createTypeLiteralNode([])],\n      }),\n    );\n  }\n\n  const typeClientOptions = compiler.typeAliasDeclaration({\n    exportType: true,\n    name: identifier.name,\n    type: compiler.typeInterfaceNode({\n      properties: [\n        {\n          name: getClientBaseUrlKey(context.config),\n          type: compiler.typeUnionNode({ types }),\n        },\n      ],\n      useLegacyResolution: false,\n    }),\n  });\n\n  file.add(typeClientOptions);\n};\n","import ts from 'typescript';\n\nimport type { Property } from '../../../compiler';\nimport { compiler } from '../../../compiler';\nimport { operationResponsesMap } from '../../../ir/operation';\nimport { deduplicateSchema } from '../../../ir/schema';\nimport type { IR } from '../../../ir/types';\nimport { irRef, isRefOpenApiComponent, refToName } from '../../../utils/ref';\nimport { numberRegExp } from '../../../utils/regexp';\nimport { stringCase } from '../../../utils/stringCase';\nimport { fieldName } from '../../shared/utils/case';\nimport { operationIrRef } from '../../shared/utils/ref';\nimport { createSchemaComment } from '../../shared/utils/schema';\nimport type { Plugin } from '../../types';\nimport { createClientOptions } from './clientOptions';\nimport { typesId } from './ref';\nimport type { Config } from './types';\n\ninterface SchemaWithType<T extends Required<IR.SchemaObject>['type']>\n  extends Omit<IR.SchemaObject, 'type'> {\n  type: Extract<Required<IR.SchemaObject>['type'], T>;\n}\n\ninterface State {\n  /**\n   * If set, we keep the specified properties (read-only or write-only) and\n   * strip the other type.\n   */\n  accessScope?: 'read' | 'write';\n  /**\n   * Path to the currently processed field. This can be used to generate\n   * deduplicated inline types. For example, if two schemas define a different\n   * enum `foo`, we want to generate two unique types instead of one.\n   */\n  path: ReadonlyArray<string>;\n}\n\nconst scopeToRef = ({\n  $ref,\n  accessScope,\n  plugin,\n}: {\n  $ref: string;\n  accessScope?: 'both' | 'read' | 'write';\n  plugin: Plugin.Instance<Config>;\n}) => {\n  if (!accessScope || accessScope === 'both') {\n    return $ref;\n  }\n\n  const refParts = $ref.split('/');\n  const name = refParts.pop()!;\n  const nameBuilder =\n    accessScope === 'read'\n      ? plugin.readableNameBuilder\n      : plugin.writableNameBuilder;\n  const processedName = processNameBuilder({ name, nameBuilder });\n  refParts.push(processedName);\n  return refParts.join('/');\n};\n\nconst processNameBuilder = ({\n  name,\n  nameBuilder,\n}: {\n  name: string;\n  nameBuilder: string | undefined;\n}) => {\n  if (!nameBuilder) {\n    return name;\n  }\n\n  return nameBuilder.replace('{{name}}', name);\n};\n\nconst shouldSkipSchema = ({\n  schema,\n  state,\n}: {\n  schema: IR.SchemaObject;\n  state: State | undefined;\n}) => {\n  const stateAccessScope = state?.accessScope;\n\n  if (!stateAccessScope) {\n    return false;\n  }\n\n  if (schema.accessScope && stateAccessScope !== schema.accessScope) {\n    return true;\n  }\n\n  if (\n    schema.$ref &&\n    schema.accessScopes &&\n    !schema.accessScopes.includes(stateAccessScope) &&\n    !schema.accessScopes.includes('both')\n  ) {\n    return true;\n  }\n\n  if (\n    (schema.type === 'array' || schema.type === 'tuple') &&\n    schema.items &&\n    schema.items.every(\n      (item) =>\n        item.accessScopes &&\n        !item.accessScopes.includes(stateAccessScope) &&\n        !item.accessScopes.includes('both'),\n    )\n  ) {\n    return true;\n  }\n\n  return false;\n};\n\nconst addJavaScriptEnum = ({\n  $ref,\n  context,\n  plugin,\n  schema,\n}: {\n  $ref: string;\n  context: IR.Context;\n  plugin: Plugin.Instance<Config>;\n  schema: SchemaWithType<'enum'>;\n}) => {\n  const file = context.file({ id: typesId })!;\n  const identifier = file.identifier({\n    $ref,\n    create: true,\n    namespace: 'value',\n  });\n\n  // TODO: parser - this is the old parser behavior where we would NOT\n  // print nested enum identifiers if they already exist. This is a\n  // blocker for referencing these identifiers within the file as\n  // we cannot guarantee just because they have a duplicate identifier,\n  // they have a duplicate value.\n  if (!identifier.created) {\n    return;\n  }\n\n  const enumObject = schemaToEnumObject({ plugin, schema });\n\n  // JavaScript enums might want to ignore null values\n  if (\n    plugin.enumsConstantsIgnoreNull &&\n    enumObject.typeofItems.includes('object')\n  ) {\n    enumObject.obj = enumObject.obj.filter((item) => item.value !== null);\n  }\n\n  const expression = compiler.objectExpression({\n    multiLine: true,\n    obj: enumObject.obj,\n  });\n  const node = compiler.constVariable({\n    assertion: 'const',\n    comment: createSchemaComment({ schema }),\n    exportConst: true,\n    expression,\n    name: identifier.name || '',\n  });\n  return node;\n};\n\nconst schemaToEnumObject = ({\n  plugin,\n  schema,\n}: {\n  plugin: Plugin.Instance<Config>;\n  schema: IR.SchemaObject;\n}) => {\n  const typeofItems: Array<\n    | 'bigint'\n    | 'boolean'\n    | 'function'\n    | 'number'\n    | 'object'\n    | 'string'\n    | 'symbol'\n    | 'undefined'\n  > = [];\n\n  const obj = (schema.items ?? []).map((item, index) => {\n    const typeOfItemConst = typeof item.const;\n\n    if (!typeofItems.includes(typeOfItemConst)) {\n      // track types of enum values because some modes support\n      // only enums with string and number types\n      typeofItems.push(typeOfItemConst);\n    }\n\n    let key: string | undefined;\n    if (item.title) {\n      key = item.title;\n    } else if (typeOfItemConst === 'number' || typeOfItemConst === 'string') {\n      key = `${item.const}`;\n    } else if (typeOfItemConst === 'boolean') {\n      key = item.const ? 'true' : 'false';\n    } else if (item.const === null) {\n      key = 'null';\n    } else {\n      key = `${index}`;\n    }\n\n    if (key) {\n      key = stringCase({\n        case: plugin.enumsCase,\n        stripLeadingSeparators: false,\n        value: key,\n      });\n\n      numberRegExp.lastIndex = 0;\n      // TypeScript enum keys cannot be numbers\n      if (\n        numberRegExp.test(key) &&\n        (plugin.enums === 'typescript' ||\n          plugin.enums === 'typescript+namespace')\n      ) {\n        key = `_${key}`;\n      }\n    }\n\n    return {\n      comments: createSchemaComment({ schema: item }),\n      key,\n      value: item.const,\n    };\n  });\n\n  return {\n    obj,\n    typeofItems,\n  };\n};\n\nconst addTypeEnum = ({\n  $ref,\n  context,\n  plugin,\n  schema,\n  state,\n}: {\n  $ref: string;\n  context: IR.Context;\n  plugin: Plugin.Instance<Config>;\n  schema: SchemaWithType<'enum'>;\n  state: State | undefined;\n}): ts.TypeAliasDeclaration | undefined => {\n  const file = context.file({ id: typesId })!;\n  const identifier = file.identifier({\n    $ref,\n    create: true,\n    namespace: 'type',\n  });\n\n  // TODO: parser - this is the old parser behavior where we would NOT\n  // print nested enum identifiers if they already exist. This is a\n  // blocker for referencing these identifiers within the file as\n  // we cannot guarantee just because they have a duplicate identifier,\n  // they have a duplicate value.\n  if (\n    !identifier.created &&\n    !isRefOpenApiComponent($ref) &&\n    plugin.enums !== 'typescript+namespace'\n  ) {\n    return;\n  }\n\n  const type = schemaToType({\n    context,\n    plugin,\n    schema: {\n      ...schema,\n      type: undefined,\n    },\n    state,\n  });\n\n  if (type) {\n    const node = compiler.typeAliasDeclaration({\n      comment: createSchemaComment({ schema }),\n      exportType: true,\n      name: identifier.name || '',\n      type,\n    });\n    return node;\n  }\n};\n\nconst shouldCreateTypeScriptEnum = ({\n  plugin,\n  schema,\n}: {\n  plugin: Plugin.Instance<Config>;\n  schema: SchemaWithType<'enum'>;\n}) => {\n  const enumObject = schemaToEnumObject({ plugin, schema });\n  // TypeScript enums support only string and number values\n  return !enumObject.typeofItems.filter(\n    (type) => type !== 'number' && type !== 'string',\n  ).length;\n};\n\nconst addTypeScriptEnum = ({\n  $ref,\n  context,\n  plugin,\n  schema,\n  state,\n}: {\n  $ref: string;\n  context: IR.Context;\n  plugin: Plugin.Instance<Config>;\n  schema: SchemaWithType<'enum'>;\n  state: State | undefined;\n}) => {\n  const enumObject = schemaToEnumObject({ plugin, schema });\n\n  // fallback to types\n  if (!shouldCreateTypeScriptEnum({ plugin, schema })) {\n    const node = addTypeEnum({\n      $ref,\n      context,\n      plugin,\n      schema,\n      state,\n    });\n    return node;\n  }\n\n  const file = context.file({ id: typesId })!;\n  const identifier = file.identifier({\n    $ref,\n    create: true,\n    namespace: 'enum',\n  });\n  const node = compiler.enumDeclaration({\n    leadingComment: createSchemaComment({ schema }),\n    name: identifier.name || '',\n    obj: enumObject.obj,\n  });\n  return node;\n};\n\nconst arrayTypeToIdentifier = ({\n  context,\n  namespace,\n  plugin,\n  schema,\n  state,\n}: {\n  context: IR.Context;\n  namespace: Array<ts.Statement>;\n  plugin: Plugin.Instance<Config>;\n  schema: SchemaWithType<'array'>;\n  state: State | undefined;\n}): ts.TypeNode | undefined => {\n  if (!schema.items) {\n    return compiler.typeArrayNode(\n      compiler.keywordTypeNode({\n        keyword: 'unknown',\n      }),\n    );\n  }\n\n  schema = deduplicateSchema({ schema });\n\n  const itemTypes: Array<ts.TypeNode> = [];\n\n  for (const item of schema.items!) {\n    const type = schemaToType({\n      context,\n      namespace,\n      plugin,\n      schema: item,\n      state,\n    });\n\n    if (type) {\n      itemTypes.push(type);\n    }\n  }\n\n  if (!itemTypes.length) {\n    return;\n  }\n\n  if (itemTypes.length === 1) {\n    return compiler.typeArrayNode(itemTypes[0]!);\n  }\n\n  if (schema.logicalOperator === 'and') {\n    return compiler.typeArrayNode(\n      compiler.typeIntersectionNode({ types: itemTypes }),\n    );\n  }\n\n  return compiler.typeArrayNode(compiler.typeUnionNode({ types: itemTypes }));\n};\n\nconst booleanTypeToIdentifier = ({\n  schema,\n}: {\n  context: IR.Context;\n  namespace: Array<ts.Statement>;\n  schema: SchemaWithType<'boolean'>;\n}): ts.TypeNode => {\n  if (schema.const !== undefined) {\n    return compiler.literalTypeNode({\n      literal: compiler.ots.boolean(schema.const as boolean),\n    });\n  }\n\n  return compiler.keywordTypeNode({\n    keyword: 'boolean',\n  });\n};\n\nconst enumTypeToIdentifier = ({\n  $ref,\n  context,\n  namespace,\n  plugin,\n  schema,\n  state,\n}: {\n  $ref?: string;\n  context: IR.Context;\n  namespace: Array<ts.Statement>;\n  plugin: Plugin.Instance<Config>;\n  schema: SchemaWithType<'enum'>;\n  state: State | undefined;\n}): ts.TypeNode | undefined => {\n  const file = context.file({ id: typesId })!;\n  const isRefComponent = $ref ? isRefOpenApiComponent($ref) : false;\n  const shouldExportEnum = isRefComponent || Boolean(plugin.exportInlineEnums);\n\n  if ($ref && shouldExportEnum) {\n    // when enums are disabled (default), emit only reusable components\n    // as types, otherwise the output would be broken if we skipped all enums\n    if (!plugin.enums) {\n      const typeNode = addTypeEnum({\n        $ref,\n        context,\n        plugin,\n        schema,\n        state,\n      });\n      if (typeNode) {\n        file.add(typeNode);\n      }\n    }\n\n    if (plugin.enums === 'javascript') {\n      const typeNode = addTypeEnum({\n        $ref,\n        context,\n        plugin,\n        schema,\n        state,\n      });\n      if (typeNode) {\n        file.add(typeNode);\n      }\n\n      const objectNode = addJavaScriptEnum({\n        $ref,\n        context,\n        plugin,\n        schema,\n      });\n      if (objectNode) {\n        file.add(objectNode);\n      }\n    }\n\n    if (plugin.enums === 'typescript') {\n      const enumNode = addTypeScriptEnum({\n        $ref,\n        context,\n        plugin,\n        schema,\n        state,\n      });\n      if (enumNode) {\n        file.add(enumNode);\n      }\n    }\n\n    if (plugin.enums === 'typescript+namespace') {\n      const enumNode = addTypeScriptEnum({\n        $ref,\n        context,\n        plugin,\n        schema,\n        state,\n      });\n      if (enumNode) {\n        if (isRefComponent) {\n          file.add(enumNode);\n        } else {\n          // emit enum inside TypeScript namespace\n          namespace.push(enumNode);\n        }\n      }\n    }\n  }\n\n  const type = schemaToType({\n    context,\n    plugin,\n    schema: {\n      ...schema,\n      type: undefined,\n    },\n    state,\n  });\n  return type;\n};\n\nconst numberTypeToIdentifier = ({\n  context,\n  schema,\n}: {\n  context: IR.Context;\n  namespace: Array<ts.Statement>;\n  schema: SchemaWithType<'integer' | 'number'>;\n}): ts.TypeNode => {\n  if (schema.const !== undefined) {\n    return compiler.literalTypeNode({\n      literal: compiler.ots.number(schema.const as number),\n    });\n  }\n\n  if (schema.type === 'integer' && schema.format === 'int64') {\n    // TODO: parser - add ability to skip type transformers\n    if (context.config.plugins['@hey-api/transformers']?.bigInt) {\n      return compiler.typeReferenceNode({ typeName: 'bigint' });\n    }\n  }\n\n  return compiler.keywordTypeNode({\n    keyword: 'number',\n  });\n};\n\nconst objectTypeToIdentifier = ({\n  context,\n  namespace,\n  plugin,\n  schema,\n  state,\n}: {\n  context: IR.Context;\n  namespace: Array<ts.Statement>;\n  plugin: Plugin.Instance<Config>;\n  schema: SchemaWithType<'object'>;\n  state: State | undefined;\n}): ts.TypeNode | undefined => {\n  // TODO: parser - handle constants\n  let indexKey: string | undefined;\n  let indexProperty: Property | undefined;\n  const schemaProperties: Array<Property> = [];\n  let indexPropertyItems: Array<IR.SchemaObject> = [];\n  const required = schema.required ?? [];\n  let hasOptionalProperties = false;\n  let hasSkippedProperties = false;\n\n  for (const name in schema.properties) {\n    const property = schema.properties[name]!;\n\n    const skip = shouldSkipSchema({\n      schema: property,\n      state,\n    });\n\n    if (skip) {\n      hasSkippedProperties = true;\n      continue;\n    }\n\n    const propertyType = schemaToType({\n      $ref: state ? [...state.path, name].join('/') : `${irRef}${name}`,\n      context,\n      namespace,\n      plugin,\n      schema: property,\n      state,\n    });\n\n    if (!propertyType) {\n      continue;\n    }\n\n    const isRequired = required.includes(name);\n    schemaProperties.push({\n      comment: createSchemaComment({ schema: property }),\n      isReadOnly: property.accessScope === 'read',\n      isRequired,\n      name: fieldName({ context, name }),\n      type: propertyType,\n    });\n    indexPropertyItems.push(property);\n\n    if (!isRequired) {\n      hasOptionalProperties = true;\n    }\n  }\n\n  if (\n    schema.additionalProperties &&\n    (schema.additionalProperties.type !== 'never' || !indexPropertyItems.length)\n  ) {\n    if (schema.additionalProperties.type === 'never') {\n      indexPropertyItems = [schema.additionalProperties];\n    } else {\n      indexPropertyItems.unshift(schema.additionalProperties);\n    }\n\n    if (hasOptionalProperties) {\n      indexPropertyItems.push({\n        type: 'undefined',\n      });\n    }\n\n    indexProperty = {\n      isRequired: !schema.propertyNames,\n      name: 'key',\n      type: schemaToType({\n        context,\n        namespace,\n        plugin,\n        schema:\n          indexPropertyItems.length === 1\n            ? indexPropertyItems[0]!\n            : {\n                items: indexPropertyItems,\n                logicalOperator: 'or',\n              },\n        state,\n      }),\n    };\n\n    if (schema.propertyNames) {\n      if (schema.propertyNames.$ref) {\n        indexKey = refToName(schema.propertyNames.$ref);\n      }\n    }\n  }\n\n  if (hasSkippedProperties && !schemaProperties.length && !indexProperty) {\n    return;\n  }\n\n  return compiler.typeInterfaceNode({\n    indexKey,\n    indexProperty,\n    properties: schemaProperties,\n    useLegacyResolution: false,\n  });\n};\n\nconst stringTypeToIdentifier = ({\n  context,\n  schema,\n}: {\n  context: IR.Context;\n  namespace: Array<ts.Statement>;\n  schema: SchemaWithType<'string'>;\n}): ts.TypeNode => {\n  if (schema.const !== undefined) {\n    return compiler.literalTypeNode({\n      literal: compiler.stringLiteral({ text: schema.const as string }),\n    });\n  }\n\n  if (schema.format) {\n    if (schema.format === 'binary') {\n      return compiler.typeUnionNode({\n        types: [\n          compiler.typeReferenceNode({\n            typeName: 'Blob',\n          }),\n          compiler.typeReferenceNode({\n            typeName: 'File',\n          }),\n        ],\n      });\n    }\n\n    if (schema.format === 'date-time' || schema.format === 'date') {\n      // TODO: parser - add ability to skip type transformers\n      if (context.config.plugins['@hey-api/transformers']?.dates) {\n        return compiler.typeReferenceNode({ typeName: 'Date' });\n      }\n    }\n  }\n\n  return compiler.keywordTypeNode({\n    keyword: 'string',\n  });\n};\n\nconst tupleTypeToIdentifier = ({\n  context,\n  namespace,\n  plugin,\n  schema,\n  state,\n}: {\n  context: IR.Context;\n  namespace: Array<ts.Statement>;\n  plugin: Plugin.Instance<Config>;\n  schema: SchemaWithType<'tuple'>;\n  state: State | undefined;\n}): ts.TypeNode | undefined => {\n  let itemTypes: Array<ts.Expression | ts.TypeNode> = [];\n\n  if (schema.const && Array.isArray(schema.const)) {\n    itemTypes = schema.const.map((value) => {\n      const expression = compiler.valueToExpression({ value });\n      return expression ?? compiler.identifier({ text: 'unknown' });\n    });\n  } else if (schema.items) {\n    for (const item of schema.items) {\n      const type = schemaToType({\n        context,\n        namespace,\n        plugin,\n        schema: item,\n        state,\n      });\n\n      if (type) {\n        itemTypes.push(type);\n      }\n    }\n  }\n\n  if (!itemTypes.length) {\n    return;\n  }\n\n  return compiler.typeTupleNode({\n    types: itemTypes,\n  });\n};\n\nconst schemaTypeToIdentifier = ({\n  $ref,\n  context,\n  namespace,\n  plugin,\n  schema,\n  state,\n}: {\n  $ref?: string;\n  context: IR.Context;\n  namespace: Array<ts.Statement>;\n  plugin: Plugin.Instance<Config>;\n  schema: IR.SchemaObject;\n  state: State | undefined;\n}): ts.TypeNode | undefined => {\n  switch (schema.type as Required<IR.SchemaObject>['type']) {\n    case 'array':\n      return arrayTypeToIdentifier({\n        context,\n        namespace,\n        plugin,\n        schema: schema as SchemaWithType<'array'>,\n        state,\n      });\n    case 'boolean':\n      return booleanTypeToIdentifier({\n        context,\n        namespace,\n        schema: schema as SchemaWithType<'boolean'>,\n      });\n    case 'enum':\n      return enumTypeToIdentifier({\n        $ref,\n        context,\n        namespace,\n        plugin,\n        schema: schema as SchemaWithType<'enum'>,\n        state,\n      });\n    case 'integer':\n    case 'number':\n      return numberTypeToIdentifier({\n        context,\n        namespace,\n        schema: schema as SchemaWithType<'integer' | 'number'>,\n      });\n    case 'never':\n      return compiler.keywordTypeNode({\n        keyword: 'never',\n      });\n    case 'null':\n      return compiler.literalTypeNode({\n        literal: compiler.null(),\n      });\n    case 'object':\n      return objectTypeToIdentifier({\n        context,\n        namespace,\n        plugin,\n        schema: schema as SchemaWithType<'object'>,\n        state,\n      });\n    case 'string':\n      return stringTypeToIdentifier({\n        context,\n        namespace,\n        schema: schema as SchemaWithType<'string'>,\n      });\n    case 'tuple':\n      return tupleTypeToIdentifier({\n        context,\n        namespace,\n        plugin,\n        schema: schema as SchemaWithType<'tuple'>,\n        state,\n      });\n    case 'undefined':\n      return compiler.keywordTypeNode({\n        keyword: 'undefined',\n      });\n    case 'unknown':\n      return compiler.keywordTypeNode({\n        keyword: 'unknown',\n      });\n    case 'void':\n      return compiler.keywordTypeNode({\n        keyword: 'void',\n      });\n  }\n};\n\nconst irParametersToIrSchema = ({\n  parameters,\n}: {\n  parameters: Record<string, IR.ParameterObject>;\n}): IR.SchemaObject => {\n  const irSchema: IR.SchemaObject = {\n    type: 'object',\n  };\n\n  if (parameters) {\n    const properties: Record<string, IR.SchemaObject> = {};\n    const required: Array<string> = [];\n\n    for (const key in parameters) {\n      const parameter = parameters[key]!;\n\n      properties[parameter.name] = deduplicateSchema({\n        schema: parameter.schema,\n      });\n\n      if (parameter.required) {\n        required.push(parameter.name);\n      }\n    }\n\n    irSchema.properties = properties;\n\n    if (required.length) {\n      irSchema.required = required;\n    }\n  }\n\n  return irSchema;\n};\n\nconst operationToDataType = ({\n  context,\n  operation,\n  plugin,\n}: {\n  context: IR.Context;\n  operation: IR.OperationObject;\n  plugin: Plugin.Instance<Config>;\n}) => {\n  const file = context.file({ id: typesId })!;\n  const data: IR.SchemaObject = {\n    type: 'object',\n  };\n  const dataRequired: Array<string> = [];\n\n  if (!data.properties) {\n    data.properties = {};\n  }\n\n  if (operation.body) {\n    data.properties.body = operation.body.schema;\n\n    if (operation.body.required) {\n      dataRequired.push('body');\n    }\n  } else {\n    data.properties.body = {\n      type: 'never',\n    };\n  }\n\n  // TODO: parser - handle cookie parameters\n\n  // do not set headers to never so we can always pass arbitrary values\n  if (operation.parameters?.header) {\n    data.properties.headers = irParametersToIrSchema({\n      parameters: operation.parameters.header,\n    });\n\n    if (data.properties.headers.required) {\n      dataRequired.push('headers');\n    }\n  }\n\n  if (operation.parameters?.path) {\n    data.properties.path = irParametersToIrSchema({\n      parameters: operation.parameters.path,\n    });\n\n    if (data.properties.path.required) {\n      dataRequired.push('path');\n    }\n  } else {\n    data.properties.path = {\n      type: 'never',\n    };\n  }\n\n  if (operation.parameters?.query) {\n    data.properties.query = irParametersToIrSchema({\n      parameters: operation.parameters.query,\n    });\n\n    if (data.properties.query.required) {\n      dataRequired.push('query');\n    }\n  } else {\n    data.properties.query = {\n      type: 'never',\n    };\n  }\n\n  data.properties.url = {\n    const: operation.path,\n    type: 'string',\n  };\n  dataRequired.push('url');\n\n  data.required = dataRequired;\n\n  const identifier = file.identifier({\n    $ref: operationIrRef({\n      config: context.config,\n      id: operation.id,\n      type: 'data',\n    }),\n    create: true,\n    namespace: 'type',\n  });\n  const type = schemaToType({\n    context,\n    plugin,\n    schema: data,\n    state:\n      plugin.readOnlyWriteOnlyBehavior === 'off'\n        ? {\n            path: [operation.method, operation.path, 'data'],\n          }\n        : {\n            accessScope: 'write',\n            path: [operation.method, operation.path, 'data'],\n          },\n  });\n\n  if (type) {\n    const node = compiler.typeAliasDeclaration({\n      exportType: true,\n      name: identifier.name || '',\n      type,\n    });\n    file.add(node);\n  }\n};\n\nconst operationToType = ({\n  context,\n  operation,\n  plugin,\n}: {\n  context: IR.Context;\n  operation: IR.OperationObject;\n  plugin: Plugin.Instance<Config>;\n}) => {\n  operationToDataType({\n    context,\n    operation,\n    plugin,\n  });\n\n  const file = context.file({ id: typesId })!;\n\n  const { error, errors, response, responses } =\n    operationResponsesMap(operation);\n\n  if (errors) {\n    const identifierErrors = file.identifier({\n      $ref: operationIrRef({\n        config: context.config,\n        id: operation.id,\n        type: 'errors',\n      }),\n      create: true,\n      namespace: 'type',\n    });\n    if (identifierErrors.name) {\n      const type = schemaToType({\n        context,\n        plugin,\n        schema: errors,\n        state:\n          plugin.readOnlyWriteOnlyBehavior === 'off'\n            ? {\n                path: [operation.method, operation.path, 'errors'],\n              }\n            : {\n                accessScope: 'read',\n                path: [operation.method, operation.path, 'errors'],\n              },\n      });\n\n      if (type) {\n        const node = compiler.typeAliasDeclaration({\n          exportType: true,\n          name: identifierErrors.name,\n          type,\n        });\n        file.add(node);\n      }\n\n      if (error) {\n        const identifierError = file.identifier({\n          $ref: operationIrRef({\n            config: context.config,\n            id: operation.id,\n            type: 'error',\n          }),\n          create: true,\n          namespace: 'type',\n        });\n        if (identifierError.name) {\n          const errorsType = compiler.typeReferenceNode({\n            typeName: identifierErrors.name,\n          });\n          const keyofType = ts.factory.createTypeOperatorNode(\n            ts.SyntaxKind.KeyOfKeyword,\n            errorsType,\n          );\n          const node = compiler.typeAliasDeclaration({\n            exportType: true,\n            name: identifierError.name,\n            type: compiler.indexedAccessTypeNode({\n              indexType: keyofType,\n              objectType: errorsType,\n            }),\n          });\n          file.add(node);\n        }\n      }\n    }\n  }\n\n  if (responses) {\n    const identifierResponses = file.identifier({\n      $ref: operationIrRef({\n        config: context.config,\n        id: operation.id,\n        type: 'responses',\n      }),\n      create: true,\n      namespace: 'type',\n    });\n    if (identifierResponses.name) {\n      const type = schemaToType({\n        context,\n        plugin,\n        schema: responses,\n        state:\n          plugin.readOnlyWriteOnlyBehavior === 'off'\n            ? {\n                path: [operation.method, operation.path, 'responses'],\n              }\n            : {\n                accessScope: 'read',\n                path: [operation.method, operation.path, 'responses'],\n              },\n      });\n\n      if (type) {\n        const node = compiler.typeAliasDeclaration({\n          exportType: true,\n          name: identifierResponses.name,\n          type,\n        });\n        file.add(node);\n      }\n\n      if (response) {\n        const identifierResponse = file.identifier({\n          $ref: operationIrRef({\n            config: context.config,\n            id: operation.id,\n            type: 'response',\n          }),\n          create: true,\n          namespace: 'type',\n        });\n        if (identifierResponse.name) {\n          const responsesType = compiler.typeReferenceNode({\n            typeName: identifierResponses.name,\n          });\n          const keyofType = ts.factory.createTypeOperatorNode(\n            ts.SyntaxKind.KeyOfKeyword,\n            responsesType,\n          );\n          const node = compiler.typeAliasDeclaration({\n            exportType: true,\n            name: identifierResponse.name,\n            type: compiler.indexedAccessTypeNode({\n              indexType: keyofType,\n              objectType: responsesType,\n            }),\n          });\n          file.add(node);\n        }\n      }\n    }\n  }\n};\n\n/**\n * Is this schema split into a readable and writable variant? We won't split\n * schemas if they don't contain any read-only or write-only fields or if they\n * contain ONLY read-only or write-only fields. We split only when there's a\n * mix of different access scopes for the schema.\n */\nconst isSchemaSplit = ({ schema }: { schema: IR.SchemaObject }): boolean => {\n  const scopes = schema.accessScopes;\n  return scopes !== undefined && scopes.length > 1;\n};\n\nconst hasSchemaScope = ({\n  accessScope,\n  schema,\n}: {\n  accessScope: Required<State>['accessScope'];\n  schema: IR.SchemaObject;\n}): boolean => {\n  const scopes = schema.accessScopes;\n  return (\n    !scopes ||\n    (scopes !== undefined &&\n      (scopes.includes(accessScope) || scopes.includes('both')))\n  );\n};\n\nexport const schemaToType = ({\n  $ref,\n  context,\n  namespace = [],\n  plugin,\n  schema,\n  state,\n}: {\n  $ref?: string;\n  context: IR.Context;\n  namespace?: Array<ts.Statement>;\n  plugin: Plugin.Instance<Config>;\n  schema: IR.SchemaObject;\n  state: State | undefined;\n}): ts.TypeNode | undefined => {\n  const file = context.file({ id: typesId })!;\n\n  let type: ts.TypeNode | undefined;\n\n  if (schema.$ref) {\n    const refSchema = context.resolveIrRef<IR.SchemaObject>(schema.$ref);\n\n    if (\n      !state?.accessScope ||\n      hasSchemaScope({ accessScope: state.accessScope, schema: refSchema })\n    ) {\n      const finalRef = scopeToRef({\n        $ref: schema.$ref,\n        accessScope: isSchemaSplit({ schema: refSchema })\n          ? state?.accessScope\n          : undefined,\n        plugin,\n      });\n      const identifier = file.identifier({\n        $ref: finalRef,\n        create: true,\n        namespace:\n          refSchema.type === 'enum' &&\n          (plugin.enums === 'typescript' ||\n            plugin.enums === 'typescript+namespace') &&\n          shouldCreateTypeScriptEnum({\n            plugin,\n            schema: refSchema as SchemaWithType<'enum'>,\n          })\n            ? 'enum'\n            : 'type',\n      });\n      type = compiler.typeReferenceNode({\n        typeName: identifier.name || '',\n      });\n    }\n  } else if (schema.type) {\n    type = schemaTypeToIdentifier({\n      $ref,\n      context,\n      namespace,\n      plugin,\n      schema,\n      state,\n    });\n  } else if (schema.items) {\n    schema = deduplicateSchema({ schema });\n    if (schema.items) {\n      const itemTypes: Array<ts.TypeNode> = [];\n\n      for (const item of schema.items) {\n        // TODO: correctly populate state.path\n        const type = schemaToType({\n          context,\n          namespace,\n          plugin,\n          schema: item,\n          state,\n        });\n        if (type) {\n          itemTypes.push(type);\n        }\n      }\n\n      type =\n        schema.logicalOperator === 'and'\n          ? compiler.typeIntersectionNode({ types: itemTypes })\n          : compiler.typeUnionNode({ types: itemTypes });\n    } else {\n      // TODO: correctly populate state.path\n      type = schemaToType({\n        context,\n        namespace,\n        plugin,\n        schema,\n        state,\n      });\n    }\n  } else {\n    // catch-all fallback for failed schemas\n    type = schemaTypeToIdentifier({\n      context,\n      namespace,\n      plugin,\n      schema: {\n        type: 'unknown',\n      },\n      state,\n    });\n  }\n\n  // emit nodes only if $ref points to a reusable component\n  if ($ref && isRefOpenApiComponent($ref)) {\n    // emit namespace if it has any members\n    if (namespace.length) {\n      const identifier = file.identifier({\n        $ref,\n        create: true,\n        namespace: 'value',\n      });\n      const node = compiler.namespaceDeclaration({\n        name: identifier.name || '',\n        statements: namespace,\n      });\n      file.add(node);\n    }\n\n    // enum handler emits its own artifacts\n    if (schema.type !== 'enum' && type) {\n      const identifier = file.identifier({\n        $ref,\n        create: true,\n        namespace: 'type',\n      });\n      const node = compiler.typeAliasDeclaration({\n        comment: createSchemaComment({ schema }),\n        exportType: true,\n        name: identifier.name || '',\n        type,\n      });\n      file.add(node);\n    }\n  }\n\n  return type;\n};\n\nexport const handler: Plugin.Handler<Config> = ({ context, plugin }) => {\n  const file = context.createFile({\n    exportFromIndex: plugin.exportFromIndex,\n    id: typesId,\n    identifierCase: plugin.identifierCase,\n    path: plugin.output,\n  });\n\n  // reserve identifier for ClientOptions\n  const clientOptions = file.identifier({\n    $ref: 'ClientOptions',\n    create: true,\n    namespace: 'type',\n  });\n\n  context.subscribe('schema', ({ $ref, schema }) => {\n    if (\n      plugin.readOnlyWriteOnlyBehavior === 'off' ||\n      !isSchemaSplit({ schema })\n    ) {\n      schemaToType({\n        $ref,\n        context,\n        plugin,\n        schema,\n        state: {\n          // TODO: correctly populate state.path\n          path: [],\n        },\n      });\n      return;\n    }\n\n    if (hasSchemaScope({ accessScope: 'read', schema })) {\n      schemaToType({\n        $ref: scopeToRef({\n          $ref,\n          accessScope: 'read',\n          plugin,\n        }),\n        context,\n        plugin,\n        schema,\n        state: {\n          accessScope: 'read',\n          // TODO: correctly populate state.path\n          path: [],\n        },\n      });\n    }\n\n    if (hasSchemaScope({ accessScope: 'write', schema })) {\n      schemaToType({\n        $ref: scopeToRef({\n          $ref,\n          accessScope: 'write',\n          plugin,\n        }),\n        context,\n        plugin,\n        schema,\n        state: {\n          accessScope: 'write',\n          // TODO: correctly populate state.path\n          path: [],\n        },\n      });\n    }\n  });\n\n  context.subscribe('parameter', ({ $ref, parameter }) => {\n    schemaToType({\n      $ref,\n      context,\n      plugin,\n      schema: parameter.schema,\n      state: {\n        // TODO: correctly populate state.path\n        path: [],\n      },\n    });\n  });\n\n  context.subscribe('requestBody', ({ $ref, requestBody }) => {\n    schemaToType({\n      $ref,\n      context,\n      plugin,\n      schema: requestBody.schema,\n      state:\n        plugin.readOnlyWriteOnlyBehavior === 'off'\n          ? {\n              // TODO: correctly populate state.path\n              path: [],\n            }\n          : {\n              accessScope: 'write',\n              // TODO: correctly populate state.path\n              path: [],\n            },\n    });\n  });\n\n  context.subscribe('operation', ({ operation }) => {\n    operationToType({\n      context,\n      operation,\n      plugin,\n    });\n  });\n\n  const servers: Array<IR.ServerObject> = [];\n\n  context.subscribe('server', ({ server }) => {\n    servers.push(server);\n  });\n\n  context.subscribe('after', () => {\n    createClientOptions({\n      context,\n      identifier: clientOptions,\n      plugin,\n      servers,\n    });\n  });\n};\n","import type { Plugin } from '../../types';\nimport { handler } from './plugin';\nimport { handlerLegacy } from './plugin-legacy';\nimport type { Config } from './types';\n\nexport const defaultConfig: Plugin.Config<Config> = {\n  _handler: handler,\n  _handlerLegacy: handlerLegacy,\n  enums: false,\n  enumsCase: 'SCREAMING_SNAKE_CASE',\n  enumsConstantsIgnoreNull: false,\n  exportFromIndex: true,\n  exportInlineEnums: false,\n  identifierCase: 'PascalCase',\n  name: '@hey-api/typescript',\n  output: 'types',\n  readOnlyWriteOnlyBehavior: 'split',\n  readableNameBuilder: '{{name}}Readable',\n  style: 'preserve',\n  tree: false,\n  writableNameBuilder: '{{name}}Writable',\n};\n\n/**\n * Type helper for `@hey-api/typescript` plugin, returns {@link Plugin.Config} object\n */\nexport const defineConfig: Plugin.DefineConfig<Config> = (config) => ({\n  ...defaultConfig,\n  ...config,\n});\n","import ts from 'typescript';\n\nimport { compiler } from '../../../compiler';\nimport { tsNodeToString } from '../../../compiler/utils';\nimport { clientApi } from '../../../generate/client';\nimport { operationPagination } from '../../../ir/operation';\nimport type { IR } from '../../../ir/types';\nimport { serviceFunctionIdentifier } from '../../@hey-api/sdk/plugin-legacy';\nimport { schemaToType } from '../../@hey-api/typescript/plugin';\nimport {\n  createOperationComment,\n  isOperationOptionsRequired,\n} from '../../shared/utils/operation';\nimport {\n  createQueryKeyFunction,\n  createQueryKeyType,\n  queryKeyFunctionIdentifier,\n  queryKeyName,\n  queryKeyStatement,\n} from './queryKey';\nimport type { PluginInstance, PluginState } from './types';\nimport { useTypeData, useTypeError, useTypeResponse } from './useType';\n\nconst createInfiniteParamsFn = 'createInfiniteParams';\nconst infiniteQueryOptionsFn = 'infiniteQueryOptions';\n\nconst createInfiniteParamsFunction = ({\n  context,\n  plugin,\n}: {\n  context: IR.Context;\n  plugin: PluginInstance;\n}) => {\n  const file = context.file({ id: plugin.name })!;\n\n  const fn = compiler.constVariable({\n    expression: compiler.arrowFunction({\n      multiLine: true,\n      parameters: [\n        {\n          name: 'queryKey',\n          type: compiler.typeReferenceNode({\n            typeName: `QueryKey<${clientApi.Options.name}>`,\n          }),\n        },\n        {\n          name: 'page',\n          type: compiler.typeReferenceNode({ typeName: 'K' }),\n        },\n      ],\n      statements: [\n        compiler.constVariable({\n          expression: compiler.objectExpression({\n            obj: [\n              {\n                spread: compiler.propertyAccessExpression({\n                  expression: 'queryKey',\n                  name: 0,\n                }),\n              },\n            ],\n          }),\n          name: 'params',\n        }),\n        compiler.ifStatement({\n          expression: compiler.propertyAccessExpression({\n            expression: compiler.identifier({\n              text: 'page',\n            }),\n            name: compiler.identifier({ text: 'body' }),\n          }),\n          thenStatement: compiler.block({\n            statements: [\n              compiler.expressionToStatement({\n                expression: compiler.binaryExpression({\n                  left: compiler.propertyAccessExpression({\n                    expression: 'params',\n                    name: 'body',\n                  }),\n                  right: compiler.objectExpression({\n                    multiLine: true,\n                    obj: [\n                      {\n                        assertion: 'any',\n                        spread: 'queryKey[0].body',\n                      },\n                      {\n                        assertion: 'any',\n                        spread: 'page.body',\n                      },\n                    ],\n                  }),\n                }),\n              }),\n            ],\n          }),\n        }),\n        compiler.ifStatement({\n          expression: compiler.propertyAccessExpression({\n            expression: compiler.identifier({\n              text: 'page',\n            }),\n            name: compiler.identifier({ text: 'headers' }),\n          }),\n          thenStatement: compiler.block({\n            statements: [\n              compiler.expressionToStatement({\n                expression: compiler.binaryExpression({\n                  left: compiler.propertyAccessExpression({\n                    expression: 'params',\n                    name: 'headers',\n                  }),\n                  right: compiler.objectExpression({\n                    multiLine: true,\n                    obj: [\n                      {\n                        spread: 'queryKey[0].headers',\n                      },\n                      {\n                        spread: 'page.headers',\n                      },\n                    ],\n                  }),\n                }),\n              }),\n            ],\n          }),\n        }),\n        compiler.ifStatement({\n          expression: compiler.propertyAccessExpression({\n            expression: compiler.identifier({\n              text: 'page',\n            }),\n            name: compiler.identifier({ text: 'path' }),\n          }),\n          thenStatement: compiler.block({\n            statements: [\n              compiler.expressionToStatement({\n                expression: compiler.binaryExpression({\n                  left: compiler.propertyAccessExpression({\n                    expression: 'params',\n                    name: 'path',\n                  }),\n                  right: compiler.objectExpression({\n                    multiLine: true,\n                    obj: [\n                      {\n                        assertion: 'any',\n                        spread: 'queryKey[0].path',\n                      },\n                      {\n                        assertion: 'any',\n                        spread: 'page.path',\n                      },\n                    ],\n                  }),\n                }),\n              }),\n            ],\n          }),\n        }),\n        compiler.ifStatement({\n          expression: compiler.propertyAccessExpression({\n            expression: compiler.identifier({\n              text: 'page',\n            }),\n            name: compiler.identifier({ text: 'query' }),\n          }),\n          thenStatement: compiler.block({\n            statements: [\n              compiler.expressionToStatement({\n                expression: compiler.binaryExpression({\n                  left: compiler.propertyAccessExpression({\n                    expression: 'params',\n                    name: 'query',\n                  }),\n                  right: compiler.objectExpression({\n                    multiLine: true,\n                    obj: [\n                      {\n                        assertion: 'any',\n                        spread: 'queryKey[0].query',\n                      },\n                      {\n                        assertion: 'any',\n                        spread: 'page.query',\n                      },\n                    ],\n                  }),\n                }),\n              }),\n            ],\n          }),\n        }),\n        compiler.returnVariable({\n          expression: compiler.asExpression({\n            expression: compiler.asExpression({\n              expression: compiler.identifier({ text: 'params' }),\n              type: compiler.keywordTypeNode({ keyword: 'unknown' }),\n            }),\n            type: ts.factory.createTypeQueryNode(\n              compiler.identifier({ text: 'page' }),\n            ),\n          }),\n        }),\n      ],\n      types: [\n        {\n          extends: compiler.typeReferenceNode({\n            typeName: compiler.identifier({\n              text: `Pick<QueryKey<${clientApi.Options.name}>[0], 'body' | 'headers' | 'path' | 'query'>`,\n            }),\n          }),\n          name: 'K',\n        },\n      ],\n    }),\n    name: createInfiniteParamsFn,\n  });\n  file.add(fn);\n};\n\nconst infiniteQueryOptionsFunctionIdentifier = ({\n  context,\n  operation,\n}: {\n  context: IR.Context;\n  operation: IR.OperationObject;\n}) =>\n  `${serviceFunctionIdentifier({\n    config: context.config,\n    id: operation.id,\n    operation,\n  })}InfiniteOptions`;\n\nexport const createInfiniteQueryOptions = ({\n  context,\n  operation,\n  plugin,\n  queryFn,\n  state,\n}: {\n  context: IR.Context;\n  operation: IR.OperationObject;\n  plugin: PluginInstance;\n  queryFn: string;\n  state: PluginState;\n}) => {\n  if (\n    !plugin.infiniteQueryOptions ||\n    !(['get', 'post'] as (typeof operation.method)[]).includes(operation.method)\n  ) {\n    return state;\n  }\n\n  const pagination = operationPagination({ context, operation });\n\n  if (!pagination) {\n    return state;\n  }\n\n  const file = context.file({ id: plugin.name })!;\n  const isRequiredOptions = isOperationOptionsRequired({ context, operation });\n\n  if (!state.hasInfiniteQueries) {\n    state.hasInfiniteQueries = true;\n\n    if (!state.hasCreateQueryKeyParamsFunction) {\n      createQueryKeyType({ context, plugin });\n      createQueryKeyFunction({ context, plugin });\n      state.hasCreateQueryKeyParamsFunction = true;\n    }\n\n    if (!state.hasCreateInfiniteParamsFunction) {\n      createInfiniteParamsFunction({ context, plugin });\n      state.hasCreateInfiniteParamsFunction = true;\n    }\n\n    file.import({\n      module: plugin.name,\n      name: infiniteQueryOptionsFn,\n    });\n\n    state.typeInfiniteData = file.import({\n      asType: true,\n      module: plugin.name,\n      name: 'InfiniteData',\n    });\n  }\n\n  state.hasUsedQueryFn = true;\n\n  const typeData = useTypeData({ context, operation, plugin });\n  const typeError = useTypeError({ context, operation, plugin });\n  const typeResponse = useTypeResponse({ context, operation, plugin });\n\n  const typeQueryKey = `${queryKeyName}<${typeData}>`;\n  const typePageObjectParam = `Pick<${typeQueryKey}[0], 'body' | 'headers' | 'path' | 'query'>`;\n  // TODO: parser - this is a bit clunky, need to compile type to string because\n  // `compiler.returnFunctionCall()` accepts only strings, should be cleaned up\n  const type = schemaToType({\n    context,\n    plugin: context.config.plugins['@hey-api/typescript'] as Parameters<\n      typeof schemaToType\n    >[0]['plugin'],\n    schema: pagination.schema,\n    state: undefined,\n  });\n  const typePageParam = type\n    ? `${tsNodeToString({\n        node: type,\n        unescape: true,\n      })} | ${typePageObjectParam}`\n    : `${typePageObjectParam}`;\n\n  const node = queryKeyStatement({\n    context,\n    isInfinite: true,\n    operation,\n    plugin,\n    typeQueryKey,\n  });\n  file.add(node);\n\n  const infiniteQueryKeyName = queryKeyFunctionIdentifier({\n    context,\n    isInfinite: true,\n    operation,\n  });\n  const identifierQueryKey = file.identifier({\n    $ref: `#/queryKey/${infiniteQueryKeyName}`,\n    namespace: 'value',\n  });\n\n  const awaitSdkExpression = compiler.awaitExpression({\n    expression: compiler.callExpression({\n      functionName: queryFn,\n      parameters: [\n        compiler.objectExpression({\n          multiLine: true,\n          obj: [\n            {\n              spread: 'options',\n            },\n            {\n              spread: 'params',\n            },\n            {\n              key: 'signal',\n              shorthand: true,\n              value: compiler.identifier({\n                text: 'signal',\n              }),\n            },\n            {\n              key: 'throwOnError',\n              value: true,\n            },\n          ],\n        }),\n      ],\n    }),\n  });\n\n  const statements: Array<ts.Statement> = [\n    compiler.constVariable({\n      comment: [\n        {\n          jsdoc: false,\n          lines: ['@ts-ignore'],\n        },\n      ],\n      expression: compiler.conditionalExpression({\n        condition: compiler.binaryExpression({\n          left: compiler.typeOfExpression({\n            text: 'pageParam',\n          }),\n          operator: '===',\n          right: compiler.ots.string('object'),\n        }),\n        whenFalse: compiler.objectExpression({\n          multiLine: true,\n          obj: [\n            {\n              key: pagination.in,\n              value: compiler.objectExpression({\n                multiLine: true,\n                obj: [\n                  {\n                    key: pagination.name,\n                    value: compiler.identifier({\n                      text: 'pageParam',\n                    }),\n                  },\n                ],\n              }),\n            },\n          ],\n        }),\n        whenTrue: compiler.identifier({\n          text: 'pageParam',\n        }),\n      }),\n      name: 'page',\n      typeName: typePageObjectParam,\n    }),\n    compiler.constVariable({\n      expression: compiler.callExpression({\n        functionName: createInfiniteParamsFn,\n        parameters: ['queryKey', 'page'],\n      }),\n      name: 'params',\n    }),\n  ];\n\n  if (context.config.plugins['@hey-api/sdk']?.responseStyle === 'data') {\n    statements.push(\n      compiler.returnVariable({\n        expression: awaitSdkExpression,\n      }),\n    );\n  } else {\n    statements.push(\n      compiler.constVariable({\n        destructure: true,\n        expression: awaitSdkExpression,\n        name: 'data',\n      }),\n      compiler.returnVariable({\n        expression: 'data',\n      }),\n    );\n  }\n\n  const statement = compiler.constVariable({\n    comment: plugin.comments\n      ? createOperationComment({ operation })\n      : undefined,\n    exportConst: true,\n    expression: compiler.arrowFunction({\n      parameters: [\n        {\n          isRequired: isRequiredOptions,\n          name: 'options',\n          type: typeData,\n        },\n      ],\n      statements: [\n        compiler.returnFunctionCall({\n          args: [\n            compiler.objectExpression({\n              comments: [\n                {\n                  jsdoc: false,\n                  lines: ['@ts-ignore'],\n                },\n              ],\n              obj: [\n                {\n                  key: 'queryFn',\n                  value: compiler.arrowFunction({\n                    async: true,\n                    multiLine: true,\n                    parameters: [\n                      {\n                        destructure: [\n                          {\n                            name: 'pageParam',\n                          },\n                          {\n                            name: 'queryKey',\n                          },\n                          {\n                            name: 'signal',\n                          },\n                        ],\n                      },\n                    ],\n                    statements,\n                  }),\n                },\n                {\n                  key: 'queryKey',\n                  value: compiler.callExpression({\n                    functionName: identifierQueryKey.name || '',\n                    parameters: ['options'],\n                  }),\n                },\n              ],\n            }),\n          ],\n          name: infiniteQueryOptionsFn,\n          // TODO: better types syntax\n          types: [\n            typeResponse,\n            typeError.name,\n            `${typeof state.typeInfiniteData === 'string' ? state.typeInfiniteData : state.typeInfiniteData.name}<${typeResponse}>`,\n            typeQueryKey,\n            typePageParam,\n          ],\n        }),\n      ],\n    }),\n    name: infiniteQueryOptionsFunctionIdentifier({\n      context,\n      operation,\n    }),\n  });\n  file.add(statement);\n};\n","import type { ImportExportItemObject } from '../../../compiler/utils';\nimport type { IR } from '../../../ir/types';\nimport { getClientPlugin } from '../../@hey-api/client-core/utils';\nimport { operationOptionsType } from '../../@hey-api/sdk/operation';\nimport { importIdentifier } from '../../@hey-api/typescript/ref';\nimport type { PluginInstance } from './types';\n\nexport const useTypeData = ({\n  context,\n  operation,\n  plugin,\n}: {\n  context: IR.Context;\n  operation: IR.OperationObject;\n  plugin: PluginInstance;\n}) => {\n  const file = context.file({ id: plugin.name })!;\n\n  const typeData = operationOptionsType({\n    context,\n    file,\n    operation,\n  });\n  return typeData;\n};\n\nexport const useTypeError = ({\n  context,\n  operation,\n  plugin,\n}: {\n  context: IR.Context;\n  operation: IR.OperationObject;\n  plugin: PluginInstance;\n}) => {\n  const file = context.file({ id: plugin.name })!;\n  const identifierError = importIdentifier({\n    context,\n    file,\n    operation,\n    type: 'error',\n  });\n  let typeError: ImportExportItemObject = {\n    asType: true,\n    name: identifierError.name || '',\n  };\n  if (!typeError.name) {\n    typeError = file.import({\n      asType: true,\n      module: plugin.name,\n      name: 'DefaultError',\n    });\n  }\n  const client = getClientPlugin(context.config);\n  if (client.name === '@hey-api/client-axios') {\n    const axiosError = file.import({\n      asType: true,\n      module: 'axios',\n      name: 'AxiosError',\n    });\n    typeError = {\n      ...axiosError,\n      name: `${axiosError.name}<${typeError.name}>`,\n    };\n  }\n  return typeError;\n};\n\nexport const useTypeResponse = ({\n  context,\n  operation,\n  plugin,\n}: {\n  context: IR.Context;\n  operation: IR.OperationObject;\n  plugin: PluginInstance;\n}) => {\n  const file = context.file({ id: plugin.name })!;\n  const identifierResponse = importIdentifier({\n    context,\n    file,\n    operation,\n    type: 'response',\n  });\n  const typeResponse = identifierResponse.name || 'unknown';\n  return typeResponse;\n};\n","import { compiler, type Property } from '../../../compiler';\nimport { clientApi } from '../../../generate/client';\nimport { hasOperationDataRequired } from '../../../ir/operation';\nimport type { IR } from '../../../ir/types';\nimport { getClientBaseUrlKey } from '../../@hey-api/client-core/utils';\nimport { serviceFunctionIdentifier } from '../../@hey-api/sdk/plugin-legacy';\nimport type { PluginInstance } from './types';\nimport { useTypeData } from './useType';\n\nconst createQueryKeyFn = 'createQueryKey';\nexport const queryKeyName = 'QueryKey';\nconst TOptionsType = 'TOptions';\n\nconst infiniteIdentifier = compiler.identifier({ text: 'infinite' });\nconst optionsIdentifier = compiler.identifier({ text: 'options' });\n\nexport const createQueryKeyFunction = ({\n  context,\n  plugin,\n}: {\n  context: IR.Context;\n  plugin: PluginInstance;\n}) => {\n  const file = context.file({ id: plugin.name })!;\n\n  const identifierCreateQueryKey = file.identifier({\n    $ref: `#/ir/${createQueryKeyFn}`,\n    create: true,\n    namespace: 'value',\n  });\n\n  if (identifierCreateQueryKey.name) {\n    const returnType = compiler.indexedAccessTypeNode({\n      indexType: compiler.literalTypeNode({\n        literal: compiler.ots.number(0),\n      }),\n      objectType: compiler.typeReferenceNode({\n        typeArguments: [compiler.typeReferenceNode({ typeName: TOptionsType })],\n        typeName: queryKeyName,\n      }),\n    });\n\n    const fn = compiler.constVariable({\n      expression: compiler.arrowFunction({\n        multiLine: true,\n        parameters: [\n          {\n            name: 'id',\n            type: compiler.typeReferenceNode({ typeName: 'string' }),\n          },\n          {\n            isRequired: false,\n            name: 'options',\n            type: compiler.typeReferenceNode({ typeName: TOptionsType }),\n          },\n          {\n            isRequired: false,\n            name: 'infinite',\n            type: compiler.typeReferenceNode({ typeName: 'boolean' }),\n          },\n        ],\n        returnType: compiler.typeTupleNode({\n          types: [returnType],\n        }),\n        statements: [\n          compiler.constVariable({\n            assertion: returnType,\n            expression: compiler.objectExpression({\n              multiLine: false,\n              obj: [\n                {\n                  key: '_id',\n                  value: compiler.identifier({ text: 'id' }),\n                },\n                {\n                  key: getClientBaseUrlKey(context.config),\n                  value: compiler.identifier({\n                    text: `(options?.client ?? _heyApiClient).getConfig().${getClientBaseUrlKey(context.config)}`,\n                  }),\n                },\n              ],\n            }),\n            name: 'params',\n            typeName: returnType,\n          }),\n          compiler.ifStatement({\n            expression: infiniteIdentifier,\n            thenStatement: compiler.block({\n              statements: [\n                compiler.expressionToStatement({\n                  expression: compiler.binaryExpression({\n                    left: compiler.propertyAccessExpression({\n                      expression: 'params',\n                      name: '_infinite',\n                    }),\n                    right: infiniteIdentifier,\n                  }),\n                }),\n              ],\n            }),\n          }),\n          compiler.ifStatement({\n            expression: compiler.propertyAccessExpression({\n              expression: optionsIdentifier,\n              isOptional: true,\n              name: compiler.identifier({ text: 'body' }),\n            }),\n            thenStatement: compiler.block({\n              statements: [\n                compiler.expressionToStatement({\n                  expression: compiler.binaryExpression({\n                    left: compiler.propertyAccessExpression({\n                      expression: 'params',\n                      name: 'body',\n                    }),\n                    right: compiler.propertyAccessExpression({\n                      expression: 'options',\n                      name: 'body',\n                    }),\n                  }),\n                }),\n              ],\n            }),\n          }),\n          compiler.ifStatement({\n            expression: compiler.propertyAccessExpression({\n              expression: optionsIdentifier,\n              isOptional: true,\n              name: compiler.identifier({ text: 'headers' }),\n            }),\n            thenStatement: compiler.block({\n              statements: [\n                compiler.expressionToStatement({\n                  expression: compiler.binaryExpression({\n                    left: compiler.propertyAccessExpression({\n                      expression: 'params',\n                      name: 'headers',\n                    }),\n                    right: compiler.propertyAccessExpression({\n                      expression: 'options',\n                      name: 'headers',\n                    }),\n                  }),\n                }),\n              ],\n            }),\n          }),\n          compiler.ifStatement({\n            expression: compiler.propertyAccessExpression({\n              expression: optionsIdentifier,\n              isOptional: true,\n              name: compiler.identifier({ text: 'path' }),\n            }),\n            thenStatement: compiler.block({\n              statements: [\n                compiler.expressionToStatement({\n                  expression: compiler.binaryExpression({\n                    left: compiler.propertyAccessExpression({\n                      expression: 'params',\n                      name: 'path',\n                    }),\n                    right: compiler.propertyAccessExpression({\n                      expression: 'options',\n                      name: 'path',\n                    }),\n                  }),\n                }),\n              ],\n            }),\n          }),\n          compiler.ifStatement({\n            expression: compiler.propertyAccessExpression({\n              expression: optionsIdentifier,\n              isOptional: true,\n              name: compiler.identifier({ text: 'query' }),\n            }),\n            thenStatement: compiler.block({\n              statements: [\n                compiler.expressionToStatement({\n                  expression: compiler.binaryExpression({\n                    left: compiler.propertyAccessExpression({\n                      expression: 'params',\n                      name: 'query',\n                    }),\n                    right: compiler.propertyAccessExpression({\n                      expression: 'options',\n                      name: 'query',\n                    }),\n                  }),\n                }),\n              ],\n            }),\n          }),\n          compiler.returnStatement({\n            expression: compiler.arrayLiteralExpression({\n              elements: [compiler.identifier({ text: 'params' })],\n            }),\n          }),\n        ],\n        types: [\n          {\n            extends: compiler.typeReferenceNode({\n              typeName: compiler.identifier({\n                text: clientApi.Options.name,\n              }),\n            }),\n            name: TOptionsType,\n          },\n        ],\n      }),\n      name: identifierCreateQueryKey.name,\n    });\n    file.add(fn);\n  }\n};\n\nconst createQueryKeyLiteral = ({\n  context,\n  id,\n  isInfinite,\n  plugin,\n}: {\n  context: IR.Context;\n  id: string;\n  isInfinite?: boolean;\n  plugin: PluginInstance;\n}) => {\n  const file = context.file({ id: plugin.name })!;\n  const identifierCreateQueryKey = file.identifier({\n    $ref: `#/ir/${createQueryKeyFn}`,\n    namespace: 'value',\n  });\n  const createQueryKeyCallExpression = compiler.callExpression({\n    functionName: identifierCreateQueryKey.name || '',\n    parameters: [\n      compiler.ots.string(id),\n      'options',\n      isInfinite ? compiler.ots.boolean(true) : undefined,\n    ],\n  });\n  return createQueryKeyCallExpression;\n};\n\nexport const createQueryKeyType = ({\n  context,\n  plugin,\n}: {\n  context: IR.Context;\n  plugin: PluginInstance;\n}) => {\n  const file = context.file({ id: plugin.name })!;\n\n  const properties: Property[] = [\n    {\n      name: '_id',\n      type: compiler.keywordTypeNode({\n        keyword: 'string',\n      }),\n    },\n    {\n      isRequired: false,\n      name: '_infinite',\n      type: compiler.keywordTypeNode({\n        keyword: 'boolean',\n      }),\n    },\n  ];\n\n  const queryKeyType = compiler.typeAliasDeclaration({\n    exportType: true,\n    name: queryKeyName,\n    type: compiler.typeTupleNode({\n      types: [\n        compiler.typeIntersectionNode({\n          types: [\n            compiler.typeReferenceNode({\n              typeName: `Pick<${TOptionsType}, '${getClientBaseUrlKey(context.config)}' | 'body' | 'headers' | 'path' | 'query'>`,\n            }),\n            compiler.typeInterfaceNode({\n              properties,\n              useLegacyResolution: true,\n            }),\n          ],\n        }),\n      ],\n    }),\n    typeParameters: [\n      {\n        extends: compiler.typeReferenceNode({\n          typeName: compiler.identifier({\n            text: clientApi.Options.name,\n          }),\n        }),\n        name: TOptionsType,\n      },\n    ],\n  });\n  file.add(queryKeyType);\n};\n\nexport const queryKeyFunctionIdentifier = ({\n  context,\n  isInfinite,\n  operation,\n}: {\n  context: IR.Context;\n  isInfinite?: boolean;\n  operation: IR.OperationObject;\n}) =>\n  `${serviceFunctionIdentifier({\n    config: context.config,\n    id: operation.id,\n    operation,\n  })}${isInfinite ? 'Infinite' : ''}QueryKey`;\n\nexport const queryKeyStatement = ({\n  context,\n  isInfinite,\n  operation,\n  plugin,\n  typeQueryKey,\n}: {\n  context: IR.Context;\n  isInfinite: boolean;\n  operation: IR.OperationObject;\n  plugin: PluginInstance;\n  typeQueryKey?: string;\n}) => {\n  const file = context.file({ id: plugin.name })!;\n  const typeData = useTypeData({ context, operation, plugin });\n  const name = queryKeyFunctionIdentifier({\n    context,\n    isInfinite,\n    operation,\n  });\n  const identifierQueryKey = file.identifier({\n    $ref: `#/queryKey/${name}`,\n    create: true,\n    namespace: 'value',\n  });\n  const statement = compiler.constVariable({\n    exportConst: true,\n    expression: compiler.arrowFunction({\n      parameters: [\n        {\n          isRequired: hasOperationDataRequired(operation),\n          name: 'options',\n          type: typeData,\n        },\n      ],\n      returnType: isInfinite ? typeQueryKey : undefined,\n      statements: createQueryKeyLiteral({\n        context,\n        id: operation.id,\n        isInfinite,\n        plugin,\n      }),\n    }),\n    name: identifierQueryKey.name || '',\n  });\n  return statement;\n};\n","import type ts from 'typescript';\n\nimport { compiler } from '../../../compiler';\nimport type { IR } from '../../../ir/types';\nimport { serviceFunctionIdentifier } from '../../@hey-api/sdk/plugin-legacy';\nimport { createOperationComment } from '../../shared/utils/operation';\nimport type { PluginInstance, PluginState } from './types';\nimport { useTypeData, useTypeError, useTypeResponse } from './useType';\n\nconst mutationOptionsFn = 'mutationOptions';\n\nconst mutationOptionsFunctionIdentifier = ({\n  context,\n  operation,\n}: {\n  context: IR.Context;\n  operation: IR.OperationObject;\n}) =>\n  `${serviceFunctionIdentifier({\n    config: context.config,\n    id: operation.id,\n    operation,\n  })}Mutation`;\n\nexport const createMutationOptions = ({\n  context,\n  operation,\n  plugin,\n  queryFn,\n  state,\n}: {\n  context: IR.Context;\n  operation: IR.OperationObject;\n  plugin: PluginInstance;\n  queryFn: string;\n  state: PluginState;\n}) => {\n  if (\n    !plugin.mutationOptions ||\n    !(\n      ['delete', 'patch', 'post', 'put'] as (typeof operation.method)[]\n    ).includes(operation.method)\n  ) {\n    return state;\n  }\n\n  const mutationsType =\n    plugin.name === '@tanstack/angular-query-experimental' ||\n    plugin.name === '@tanstack/svelte-query' ||\n    plugin.name === '@tanstack/solid-query'\n      ? 'MutationOptions'\n      : 'UseMutationOptions';\n\n  const file = context.file({ id: plugin.name })!;\n\n  if (!state.hasMutations) {\n    state.hasMutations = true;\n\n    file.import({\n      asType: true,\n      module: plugin.name,\n      name: mutationsType,\n    });\n  }\n\n  state.hasUsedQueryFn = true;\n\n  const typeData = useTypeData({ context, operation, plugin });\n  const typeError = useTypeError({ context, operation, plugin });\n  const typeResponse = useTypeResponse({ context, operation, plugin });\n  // TODO: better types syntax\n  const mutationType = `${mutationsType}<${typeResponse}, ${typeError.name}, ${typeData}>`;\n\n  const awaitSdkExpression = compiler.awaitExpression({\n    expression: compiler.callExpression({\n      functionName: queryFn,\n      parameters: [\n        compiler.objectExpression({\n          multiLine: true,\n          obj: [\n            {\n              spread: 'options',\n            },\n            {\n              spread: 'localOptions',\n            },\n            {\n              key: 'throwOnError',\n              value: true,\n            },\n          ],\n        }),\n      ],\n    }),\n  });\n\n  const statements: Array<ts.Statement> = [];\n\n  if (context.config.plugins['@hey-api/sdk']?.responseStyle === 'data') {\n    statements.push(\n      compiler.returnVariable({\n        expression: awaitSdkExpression,\n      }),\n    );\n  } else {\n    statements.push(\n      compiler.constVariable({\n        destructure: true,\n        expression: awaitSdkExpression,\n        name: 'data',\n      }),\n      compiler.returnVariable({\n        expression: 'data',\n      }),\n    );\n  }\n\n  const expression = compiler.arrowFunction({\n    parameters: [\n      {\n        isRequired: false,\n        name: 'options',\n        type: `Partial<${typeData}>`,\n      },\n    ],\n    returnType: mutationType,\n    statements: [\n      compiler.constVariable({\n        expression: compiler.objectExpression({\n          obj: [\n            {\n              key: 'mutationFn',\n              value: compiler.arrowFunction({\n                async: true,\n                multiLine: true,\n                parameters: [\n                  {\n                    name: 'localOptions',\n                  },\n                ],\n                statements,\n              }),\n            },\n          ],\n        }),\n        name: mutationOptionsFn,\n        typeName: mutationType,\n      }),\n      compiler.returnVariable({\n        expression: mutationOptionsFn,\n      }),\n    ],\n  });\n  const statement = compiler.constVariable({\n    comment: plugin.comments\n      ? createOperationComment({ operation })\n      : undefined,\n    exportConst: true,\n    expression,\n    name: mutationOptionsFunctionIdentifier({ context, operation }),\n  });\n  file.add(statement);\n\n  return state;\n};\n","import type ts from 'typescript';\n\nimport { compiler } from '../../../compiler';\nimport type { IR } from '../../../ir/types';\nimport { serviceFunctionIdentifier } from '../../@hey-api/sdk/plugin-legacy';\nimport {\n  createOperationComment,\n  isOperationOptionsRequired,\n} from '../../shared/utils/operation';\nimport {\n  createQueryKeyFunction,\n  createQueryKeyType,\n  queryKeyFunctionIdentifier,\n  queryKeyStatement,\n} from './queryKey';\nimport type { PluginInstance, PluginState } from './types';\nimport { useTypeData } from './useType';\n\nconst queryOptionsFn = 'queryOptions';\n\nconst queryOptionsFunctionIdentifier = ({\n  context,\n  operation,\n}: {\n  context: IR.Context;\n  operation: IR.OperationObject;\n}) =>\n  `${serviceFunctionIdentifier({\n    config: context.config,\n    id: operation.id,\n    operation,\n  })}Options`;\n\nexport const createQueryOptions = ({\n  context,\n  operation,\n  plugin,\n  queryFn,\n  state,\n}: {\n  context: IR.Context;\n  operation: IR.OperationObject;\n  plugin: PluginInstance;\n  queryFn: string;\n  state: PluginState;\n}) => {\n  if (\n    !plugin.queryOptions ||\n    !(['get', 'post'] as (typeof operation.method)[]).includes(operation.method)\n  ) {\n    return state;\n  }\n\n  const file = context.file({ id: plugin.name })!;\n  const isRequiredOptions = isOperationOptionsRequired({ context, operation });\n\n  if (!state.hasQueries) {\n    state.hasQueries = true;\n\n    if (!state.hasCreateQueryKeyParamsFunction) {\n      createQueryKeyType({ context, plugin });\n      createQueryKeyFunction({ context, plugin });\n      state.hasCreateQueryKeyParamsFunction = true;\n    }\n\n    file.import({\n      module: plugin.name,\n      name: queryOptionsFn,\n    });\n  }\n\n  state.hasUsedQueryFn = true;\n\n  const node = queryKeyStatement({\n    context,\n    isInfinite: false,\n    operation,\n    plugin,\n  });\n  file.add(node);\n\n  const typeData = useTypeData({ context, operation, plugin });\n\n  const queryKeyName = queryKeyFunctionIdentifier({\n    context,\n    isInfinite: false,\n    operation,\n  });\n  const identifierQueryKey = file.identifier({\n    $ref: `#/queryKey/${queryKeyName}`,\n    namespace: 'value',\n  });\n\n  const awaitSdkExpression = compiler.awaitExpression({\n    expression: compiler.callExpression({\n      functionName: queryFn,\n      parameters: [\n        compiler.objectExpression({\n          multiLine: true,\n          obj: [\n            {\n              spread: 'options',\n            },\n            {\n              spread: 'queryKey[0]',\n            },\n            {\n              key: 'signal',\n              shorthand: true,\n              value: compiler.identifier({\n                text: 'signal',\n              }),\n            },\n            {\n              key: 'throwOnError',\n              value: true,\n            },\n          ],\n        }),\n      ],\n    }),\n  });\n\n  const statements: Array<ts.Statement> = [];\n\n  if (context.config.plugins['@hey-api/sdk']?.responseStyle === 'data') {\n    statements.push(\n      compiler.returnVariable({\n        expression: awaitSdkExpression,\n      }),\n    );\n  } else {\n    statements.push(\n      compiler.constVariable({\n        destructure: true,\n        expression: awaitSdkExpression,\n        name: 'data',\n      }),\n      compiler.returnVariable({\n        expression: 'data',\n      }),\n    );\n  }\n\n  const statement = compiler.constVariable({\n    comment: plugin.comments\n      ? createOperationComment({ operation })\n      : undefined,\n    exportConst: true,\n    expression: compiler.arrowFunction({\n      parameters: [\n        {\n          isRequired: isRequiredOptions,\n          name: 'options',\n          type: typeData,\n        },\n      ],\n      statements: [\n        compiler.returnFunctionCall({\n          args: [\n            compiler.objectExpression({\n              obj: [\n                {\n                  key: 'queryFn',\n                  value: compiler.arrowFunction({\n                    async: true,\n                    multiLine: true,\n                    parameters: [\n                      {\n                        destructure: [\n                          {\n                            name: 'queryKey',\n                          },\n                          {\n                            name: 'signal',\n                          },\n                        ],\n                      },\n                    ],\n                    statements,\n                  }),\n                },\n                {\n                  key: 'queryKey',\n                  value: compiler.callExpression({\n                    functionName: identifierQueryKey.name || '',\n                    parameters: ['options'],\n                  }),\n                },\n              ],\n            }),\n          ],\n          name: queryOptionsFn,\n        }),\n      ],\n    }),\n    name: queryOptionsFunctionIdentifier({ context, operation }),\n    // TODO: add type error\n    // TODO: AxiosError<PutSubmissionMetaError>\n  });\n  file.add(statement);\n\n  return state;\n};\n","import { clientApi } from '../../../generate/client';\nimport { stringCase } from '../../../utils/stringCase';\nimport { clientId } from '../../@hey-api/client-core/utils';\nimport { sdkId } from '../../@hey-api/sdk/constants';\nimport { operationClasses } from '../../@hey-api/sdk/operation';\nimport { serviceFunctionIdentifier } from '../../@hey-api/sdk/plugin-legacy';\nimport { createInfiniteQueryOptions } from './infiniteQueryOptions';\nimport { createMutationOptions } from './mutationOptions';\nimport { createQueryOptions } from './queryOptions';\nimport type { PluginHandler, PluginState } from './types';\n\nexport const handler: PluginHandler = ({ context, plugin }) => {\n  const file = context.createFile({\n    exportFromIndex: plugin.exportFromIndex,\n    id: plugin.name,\n    path: plugin.output,\n  });\n\n  const state: PluginState = {\n    hasCreateInfiniteParamsFunction: false,\n    hasCreateQueryKeyParamsFunction: false,\n    hasInfiniteQueries: false,\n    hasMutations: false,\n    hasQueries: false,\n    hasUsedQueryFn: false,\n    typeInfiniteData: undefined!,\n  };\n\n  context.subscribe('before', () => {\n    file.import({\n      ...clientApi.Options,\n      module: file.relativePathToFile({ context, id: sdkId }),\n    });\n  });\n\n  context.subscribe('operation', ({ operation }) => {\n    state.hasUsedQueryFn = false;\n\n    const sdk = context.config.plugins['@hey-api/sdk'];\n    const classes = sdk?.asClass\n      ? operationClasses({ context, operation, plugin: sdk })\n      : undefined;\n    const entry = classes ? classes.values().next().value : undefined;\n    const queryFn =\n      // TODO: this should use class graph to determine correct path string\n      // as it's really easy to break once we change the class casing\n      (\n        entry\n          ? [\n              entry.path[0],\n              ...entry.path.slice(1).map((className) =>\n                stringCase({\n                  case: 'camelCase',\n                  value: className,\n                }),\n              ),\n              entry.methodName,\n            ].filter(Boolean)\n          : [\n              serviceFunctionIdentifier({\n                config: context.config,\n                handleIllegal: true,\n                id: operation.id,\n                operation,\n              }),\n            ]\n      ).join('.');\n\n    createQueryOptions({\n      context,\n      operation,\n      plugin,\n      queryFn,\n      state,\n    });\n\n    createInfiniteQueryOptions({\n      context,\n      operation,\n      plugin,\n      queryFn,\n      state,\n    });\n\n    createMutationOptions({\n      context,\n      operation,\n      plugin,\n      queryFn,\n      state,\n    });\n\n    if (state.hasUsedQueryFn) {\n      file.import({\n        module: file.relativePathToFile({ context, id: sdkId }),\n        name: queryFn.split('.')[0]!,\n      });\n    }\n  });\n\n  context.subscribe('after', () => {\n    if (state.hasQueries || state.hasInfiniteQueries) {\n      file.import({\n        alias: '_heyApiClient',\n        module: file.relativePathToFile({ context, id: clientId }),\n        name: 'client',\n      });\n    }\n  });\n};\n","import ts from 'typescript';\n\nimport { compiler, type Property } from '../../../compiler';\nimport type { ImportExportItem } from '../../../compiler/module';\nimport type { ImportExportItemObject } from '../../../compiler/utils';\nimport { clientApi, clientModulePath } from '../../../generate/client';\nimport { relativeModulePath } from '../../../generate/utils';\nimport { createOperationKey } from '../../../ir/operation';\nimport { getPaginationKeywordsRegExp } from '../../../ir/pagination';\nimport type { IR } from '../../../ir/types';\nimport { isOperationParameterRequired } from '../../../openApi';\nimport type {\n  Client,\n  Method,\n  Model,\n  Operation,\n  OperationParameter,\n} from '../../../types/client';\nimport type { Config } from '../../../types/config';\nimport type { Files } from '../../../types/utils';\nimport { getConfig, isLegacyClient } from '../../../utils/config';\nimport { transformClassName } from '../../../utils/transform';\nimport {\n  getClientBaseUrlKey,\n  getClientPlugin,\n} from '../../@hey-api/client-core/utils';\nimport {\n  generateImport,\n  operationDataTypeName,\n  operationErrorTypeName,\n  operationOptionsLegacyParserType,\n  operationResponseTypeName,\n  serviceFunctionIdentifier,\n} from '../../@hey-api/sdk/plugin-legacy';\nimport type { Plugin } from '../../types';\nimport type { Config as AngularQueryConfig } from '../angular-query-experimental';\nimport type { Config as ReactQueryConfig } from '../react-query';\nimport type { Config as SolidQueryConfig } from '../solid-query';\nimport type { Config as SvelteQueryConfig } from '../svelte-query';\nimport type { Config as VueQueryConfig } from '../vue-query';\n\nconst toInfiniteQueryOptionsName = (operation: Operation) =>\n  `${serviceFunctionIdentifier({\n    config: getConfig(),\n    id: operation.name,\n    operation,\n  })}InfiniteOptions`;\n\nconst toMutationOptionsName = (operation: Operation) =>\n  `${serviceFunctionIdentifier({\n    config: getConfig(),\n    id: operation.name,\n    operation,\n  })}Mutation`;\n\nconst toQueryOptionsName = ({\n  config,\n  id,\n  operation,\n}: {\n  config: Config;\n  id: string;\n  operation: IR.OperationObject | Operation;\n}) =>\n  `${serviceFunctionIdentifier({\n    config,\n    id,\n    operation,\n  })}Options`;\n\nconst toQueryKeyName = ({\n  config,\n  id,\n  isInfinite,\n  operation,\n}: {\n  config: Config;\n  id: string;\n  isInfinite?: boolean;\n  operation: IR.OperationObject | Operation;\n}) =>\n  `${serviceFunctionIdentifier({\n    config,\n    id,\n    operation,\n  })}${isInfinite ? 'Infinite' : ''}QueryKey`;\n\nconst getPaginationIn = (parameter: OperationParameter) => {\n  switch (parameter.in) {\n    case 'formData':\n      return 'body';\n    case 'header':\n      return 'headers';\n    default:\n      return parameter.in;\n  }\n};\n\nconst createInfiniteParamsFn = 'createInfiniteParams';\nconst createQueryKeyFn = 'createQueryKey';\nconst infiniteQueryOptionsFn = 'infiniteQueryOptions';\nconst mutationOptionsFn = 'mutationOptions';\nconst queryKeyName = 'QueryKey';\nconst queryOptionsFn = 'queryOptions';\nconst TOptionsType = 'TOptions';\n\nconst createInfiniteParamsFunction = ({\n  file,\n}: {\n  file: Files[keyof Files];\n}) => {\n  const fn = compiler.constVariable({\n    expression: compiler.arrowFunction({\n      multiLine: true,\n      parameters: [\n        {\n          name: 'queryKey',\n          type: compiler.typeNode(\n            `QueryKey<${clientApi.OptionsLegacyParser.name}>`,\n          ),\n        },\n        {\n          name: 'page',\n          type: compiler.typeNode('K'),\n        },\n      ],\n      statements: [\n        compiler.constVariable({\n          expression: compiler.identifier({\n            text: 'queryKey[0]',\n          }),\n          name: 'params',\n        }),\n        compiler.ifStatement({\n          expression: compiler.propertyAccessExpression({\n            expression: compiler.identifier({\n              text: 'page',\n            }),\n            name: compiler.identifier({ text: 'body' }),\n          }),\n          thenStatement: compiler.block({\n            statements: [\n              compiler.expressionToStatement({\n                expression: compiler.binaryExpression({\n                  left: compiler.propertyAccessExpression({\n                    expression: 'params',\n                    name: 'body',\n                  }),\n                  right: compiler.objectExpression({\n                    multiLine: true,\n                    obj: [\n                      {\n                        assertion: 'any',\n                        spread: 'queryKey[0].body',\n                      },\n                      {\n                        assertion: 'any',\n                        spread: 'page.body',\n                      },\n                    ],\n                  }),\n                }),\n              }),\n            ],\n          }),\n        }),\n        compiler.ifStatement({\n          expression: compiler.propertyAccessExpression({\n            expression: compiler.identifier({\n              text: 'page',\n            }),\n            name: compiler.identifier({ text: 'headers' }),\n          }),\n          thenStatement: compiler.block({\n            statements: [\n              compiler.expressionToStatement({\n                expression: compiler.binaryExpression({\n                  left: compiler.propertyAccessExpression({\n                    expression: 'params',\n                    name: 'headers',\n                  }),\n                  right: compiler.objectExpression({\n                    multiLine: true,\n                    obj: [\n                      {\n                        spread: 'queryKey[0].headers',\n                      },\n                      {\n                        spread: 'page.headers',\n                      },\n                    ],\n                  }),\n                }),\n              }),\n            ],\n          }),\n        }),\n        compiler.ifStatement({\n          expression: compiler.propertyAccessExpression({\n            expression: compiler.identifier({\n              text: 'page',\n            }),\n            name: compiler.identifier({ text: 'path' }),\n          }),\n          thenStatement: compiler.block({\n            statements: [\n              compiler.expressionToStatement({\n                expression: compiler.binaryExpression({\n                  left: compiler.propertyAccessExpression({\n                    expression: 'params',\n                    name: 'path',\n                  }),\n                  right: compiler.objectExpression({\n                    multiLine: true,\n                    obj: [\n                      {\n                        spread: 'queryKey[0].path',\n                      },\n                      {\n                        spread: 'page.path',\n                      },\n                    ],\n                  }),\n                }),\n              }),\n            ],\n          }),\n        }),\n        compiler.ifStatement({\n          expression: compiler.propertyAccessExpression({\n            expression: compiler.identifier({\n              text: 'page',\n            }),\n            name: compiler.identifier({ text: 'query' }),\n          }),\n          thenStatement: compiler.block({\n            statements: [\n              compiler.expressionToStatement({\n                expression: compiler.binaryExpression({\n                  left: compiler.propertyAccessExpression({\n                    expression: 'params',\n                    name: 'query',\n                  }),\n                  right: compiler.objectExpression({\n                    multiLine: true,\n                    obj: [\n                      {\n                        spread: 'queryKey[0].query',\n                      },\n                      {\n                        spread: 'page.query',\n                      },\n                    ],\n                  }),\n                }),\n              }),\n            ],\n          }),\n        }),\n        compiler.returnVariable({\n          expression: ts.factory.createAsExpression(\n            ts.factory.createAsExpression(\n              compiler.identifier({ text: 'params' }),\n              ts.factory.createKeywordTypeNode(ts.SyntaxKind.UnknownKeyword),\n            ),\n            ts.factory.createTypeQueryNode(\n              compiler.identifier({ text: 'page' }),\n            ),\n          ),\n        }),\n      ],\n      types: [\n        {\n          extends: compiler.typeReferenceNode({\n            typeName: compiler.identifier({\n              text: `Pick<QueryKey<${clientApi.OptionsLegacyParser.name}>[0], 'body' | 'headers' | 'path' | 'query'>`,\n            }),\n          }),\n          name: 'K',\n        },\n      ],\n    }),\n    name: createInfiniteParamsFn,\n  });\n  file.add(fn);\n};\n\nconst createQueryKeyFunction = ({ file }: { file: Files[keyof Files] }) => {\n  const returnType = compiler.indexedAccessTypeNode({\n    indexType: compiler.typeNode(0),\n    objectType: compiler.typeNode(queryKeyName, [\n      compiler.typeNode(TOptionsType),\n    ]),\n  });\n\n  const infiniteIdentifier = compiler.identifier({ text: 'infinite' });\n\n  const fn = compiler.constVariable({\n    expression: compiler.arrowFunction({\n      multiLine: true,\n      parameters: [\n        {\n          name: 'id',\n          type: compiler.typeNode('string'),\n        },\n        {\n          isRequired: false,\n          name: 'options',\n          type: compiler.typeNode(TOptionsType),\n        },\n        {\n          isRequired: false,\n          name: 'infinite',\n          type: compiler.typeNode('boolean'),\n        },\n      ],\n      returnType,\n      statements: [\n        compiler.constVariable({\n          assertion: returnType,\n          expression: compiler.objectExpression({\n            multiLine: false,\n            obj: [\n              {\n                key: '_id',\n                value: compiler.identifier({ text: 'id' }),\n              },\n              {\n                key: getClientBaseUrlKey(getConfig()),\n                value: compiler.identifier({\n                  text: `(options?.client ?? _heyApiClient).getConfig().${getClientBaseUrlKey(getConfig())}`,\n                }),\n              },\n            ],\n          }),\n          name: 'params',\n          typeName: returnType,\n        }),\n        compiler.ifStatement({\n          expression: infiniteIdentifier,\n          thenStatement: compiler.block({\n            statements: [\n              compiler.expressionToStatement({\n                expression: compiler.binaryExpression({\n                  left: compiler.propertyAccessExpression({\n                    expression: 'params',\n                    name: '_infinite',\n                  }),\n                  right: infiniteIdentifier,\n                }),\n              }),\n            ],\n          }),\n        }),\n        compiler.ifStatement({\n          expression: compiler.propertyAccessExpression({\n            expression: compiler.identifier({ text: 'options' }),\n            isOptional: true,\n            name: compiler.identifier({ text: 'body' }),\n          }),\n          thenStatement: compiler.block({\n            statements: [\n              compiler.expressionToStatement({\n                expression: compiler.binaryExpression({\n                  left: compiler.propertyAccessExpression({\n                    expression: 'params',\n                    name: 'body',\n                  }),\n                  right: compiler.propertyAccessExpression({\n                    expression: 'options',\n                    name: 'body',\n                  }),\n                }),\n              }),\n            ],\n          }),\n        }),\n        compiler.ifStatement({\n          expression: compiler.propertyAccessExpression({\n            expression: compiler.identifier({ text: 'options' }),\n            isOptional: true,\n            name: compiler.identifier({ text: 'headers' }),\n          }),\n          thenStatement: compiler.block({\n            statements: [\n              compiler.expressionToStatement({\n                expression: compiler.binaryExpression({\n                  left: compiler.propertyAccessExpression({\n                    expression: 'params',\n                    name: 'headers',\n                  }),\n                  right: compiler.propertyAccessExpression({\n                    expression: 'options',\n                    name: 'headers',\n                  }),\n                }),\n              }),\n            ],\n          }),\n        }),\n        compiler.ifStatement({\n          expression: compiler.propertyAccessExpression({\n            expression: compiler.identifier({ text: 'options' }),\n            isOptional: true,\n            name: compiler.identifier({ text: 'path' }),\n          }),\n          thenStatement: compiler.block({\n            statements: [\n              compiler.expressionToStatement({\n                expression: compiler.binaryExpression({\n                  left: compiler.propertyAccessExpression({\n                    expression: 'params',\n                    name: 'path',\n                  }),\n                  right: compiler.propertyAccessExpression({\n                    expression: 'options',\n                    name: 'path',\n                  }),\n                }),\n              }),\n            ],\n          }),\n        }),\n        compiler.ifStatement({\n          expression: compiler.propertyAccessExpression({\n            expression: compiler.identifier({ text: 'options' }),\n            isOptional: true,\n            name: compiler.identifier({ text: 'query' }),\n          }),\n          thenStatement: compiler.block({\n            statements: [\n              compiler.expressionToStatement({\n                expression: compiler.binaryExpression({\n                  left: compiler.propertyAccessExpression({\n                    expression: 'params',\n                    name: 'query',\n                  }),\n                  right: compiler.propertyAccessExpression({\n                    expression: 'options',\n                    name: 'query',\n                  }),\n                }),\n              }),\n            ],\n          }),\n        }),\n        compiler.returnVariable({\n          expression: 'params',\n        }),\n      ],\n      types: [\n        {\n          extends: compiler.typeReferenceNode({\n            typeName: compiler.identifier({\n              text: clientApi.OptionsLegacyParser.name,\n            }),\n          }),\n          name: TOptionsType,\n        },\n      ],\n    }),\n    name: createQueryKeyFn,\n  });\n  file.add(fn);\n};\n\nconst createQueryKeyType = ({ file }: { file: Files[keyof Files] }) => {\n  const properties: Property[] = [\n    {\n      name: '_id',\n      type: compiler.keywordTypeNode({\n        keyword: 'string',\n      }),\n    },\n    {\n      isRequired: false,\n      name: '_infinite',\n      type: compiler.keywordTypeNode({\n        keyword: 'boolean',\n      }),\n    },\n  ];\n\n  const queryKeyType = compiler.typeAliasDeclaration({\n    name: queryKeyName,\n    type: compiler.typeTupleNode({\n      types: [\n        compiler.typeIntersectionNode({\n          types: [\n            compiler.typeReferenceNode({\n              typeName: `Pick<${TOptionsType}, '${getClientBaseUrlKey(getConfig())}' | 'body' | 'headers' | 'path' | 'query'>`,\n            }),\n            compiler.typeInterfaceNode({\n              properties,\n              useLegacyResolution: true,\n            }),\n          ],\n        }),\n      ],\n    }),\n    typeParameters: [\n      {\n        extends: compiler.typeReferenceNode({\n          typeName: compiler.identifier({\n            text: clientApi.OptionsLegacyParser.name,\n          }),\n        }),\n        name: TOptionsType,\n      },\n    ],\n  });\n  file.add(queryKeyType);\n};\n\nconst createTypeData = ({\n  client,\n  file,\n  operation,\n  typesModulePath,\n}: {\n  client: Client;\n  file: Files[keyof Files];\n  operation: Operation;\n  typesModulePath: string;\n}) => {\n  const { name: nameTypeData } = generateImport({\n    client,\n    meta: operation.parameters.length\n      ? {\n          // TODO: this should be exact ref to operation for consistency,\n          // but name should work too as operation ID is unique\n          $ref: operation.name,\n          name: operation.name,\n        }\n      : undefined,\n    nameTransformer: operationDataTypeName,\n    onImport: (name) => {\n      file.import({\n        asType: true,\n        module: typesModulePath,\n        name,\n      });\n    },\n  });\n\n  const typeData = operationOptionsLegacyParserType({\n    importedType: nameTypeData,\n  });\n\n  return { typeData };\n};\n\nconst createTypeError = ({\n  client,\n  file,\n  operation,\n  pluginName,\n  typesModulePath,\n}: {\n  client: Client;\n  file: Files[keyof Files];\n  operation: Operation;\n  pluginName: string;\n  typesModulePath: string;\n}) => {\n  const config = getConfig();\n\n  const { name: nameTypeError } = generateImport({\n    client,\n    meta: {\n      // TODO: this should be exact ref to operation for consistency,\n      // but name should work too as operation ID is unique\n      $ref: operation.name,\n      name: operation.name,\n    },\n    nameTransformer: operationErrorTypeName,\n    onImport: (name) => {\n      file.import({\n        asType: true,\n        module: typesModulePath,\n        name,\n      });\n    },\n  });\n\n  let typeError: ImportExportItemObject = {\n    asType: true,\n    name: nameTypeError,\n  };\n  if (!typeError.name) {\n    typeError = file.import({\n      asType: true,\n      module: pluginName,\n      name: 'DefaultError',\n    });\n  }\n\n  const clientPlugin = getClientPlugin(config);\n  if (clientPlugin.name === '@hey-api/client-axios') {\n    const axiosError = file.import({\n      asType: true,\n      module: 'axios',\n      name: 'AxiosError',\n    });\n    typeError = {\n      ...axiosError,\n      name: `${axiosError.name}<${typeError.name}>`,\n    };\n  }\n\n  return { typeError };\n};\n\nconst createTypeResponse = ({\n  client,\n  file,\n  operation,\n  typesModulePath,\n}: {\n  client: Client;\n  file: Files[keyof Files];\n  operation: Operation;\n  typesModulePath: string;\n}) => {\n  const { name: nameTypeResponse } = generateImport({\n    client,\n    meta: {\n      // TODO: this should be exact ref to operation for consistency,\n      // but name should work too as operation ID is unique\n      $ref: operation.name,\n      name: operation.name,\n    },\n    nameTransformer: operationResponseTypeName,\n    onImport: (imported) => {\n      file.import({\n        asType: true,\n        module: typesModulePath,\n        name: imported,\n      });\n    },\n  });\n\n  const typeResponse = nameTypeResponse || 'void';\n\n  return { typeResponse };\n};\n\nconst createQueryKeyLiteral = ({\n  id,\n  isInfinite,\n}: {\n  id: string;\n  isInfinite?: boolean;\n}) => {\n  const queryKeyLiteral = compiler.arrayLiteralExpression({\n    elements: [\n      compiler.callExpression({\n        functionName: createQueryKeyFn,\n        parameters: [\n          compiler.ots.string(id),\n          'options',\n          isInfinite ? compiler.ots.boolean(true) : undefined,\n        ],\n      }),\n    ],\n    multiLine: false,\n  });\n  return queryKeyLiteral;\n};\n\nexport const handlerLegacy: Plugin.LegacyHandler<\n  | ReactQueryConfig\n  | AngularQueryConfig\n  | SolidQueryConfig\n  | SvelteQueryConfig\n  | VueQueryConfig\n> = ({ client, files, plugin }) => {\n  const config = getConfig();\n\n  if (isLegacyClient(config)) {\n    throw new Error('TanStack Query plugin does not support legacy clients');\n  }\n\n  const file = files[plugin.name]!;\n\n  file.import({\n    ...clientApi.OptionsLegacyParser,\n    module: clientModulePath({ config, sourceOutput: plugin.output }),\n  });\n\n  const typesModulePath = relativeModulePath({\n    moduleOutput: files.types!.nameWithoutExtension(),\n    sourceOutput: plugin.output,\n  });\n\n  const mutationsType =\n    plugin.name === '@tanstack/angular-query-experimental' ||\n    plugin.name === '@tanstack/svelte-query' ||\n    plugin.name === '@tanstack/solid-query'\n      ? 'MutationOptions'\n      : 'UseMutationOptions';\n\n  let typeInfiniteData!: ImportExportItem;\n  let hasCreateInfiniteParamsFunction = false;\n  let hasCreateQueryKeyParamsFunction = false;\n  let hasInfiniteQueries = false;\n  let hasMutations = false;\n  let hasQueries = false;\n\n  const processedOperations = new Map<string, boolean>();\n\n  for (const service of client.services) {\n    for (const operation of service.operations) {\n      // track processed operations to avoid creating duplicates\n      const operationKey = createOperationKey(operation);\n      if (processedOperations.has(operationKey)) {\n        continue;\n      }\n      processedOperations.set(operationKey, true);\n\n      const queryFn = [\n        config.plugins['@hey-api/sdk']?.asClass &&\n          transformClassName({\n            config,\n            name: service.name,\n          }),\n        serviceFunctionIdentifier({\n          config,\n          handleIllegal: !config.plugins['@hey-api/sdk']?.asClass,\n          id: operation.name,\n          operation,\n        }),\n      ]\n        .filter(Boolean)\n        .join('.');\n      let hasUsedQueryFn = false;\n\n      // queries\n      if (\n        plugin.queryOptions &&\n        (['GET', 'POST'] as ReadonlyArray<Method>).includes(operation.method)\n      ) {\n        if (!hasQueries) {\n          hasQueries = true;\n\n          if (!hasCreateQueryKeyParamsFunction) {\n            createQueryKeyType({ file });\n            createQueryKeyFunction({ file });\n            hasCreateQueryKeyParamsFunction = true;\n          }\n\n          file.import({\n            module: plugin.name,\n            name: queryOptionsFn,\n          });\n        }\n\n        hasUsedQueryFn = true;\n\n        const { typeData } = createTypeData({\n          client,\n          file,\n          operation,\n          typesModulePath,\n        });\n\n        const isRequired = isOperationParameterRequired(operation.parameters);\n\n        const queryKeyStatement = compiler.constVariable({\n          exportConst: true,\n          expression: compiler.arrowFunction({\n            parameters: [\n              {\n                isRequired,\n                name: 'options',\n                type: typeData,\n              },\n            ],\n            statements: createQueryKeyLiteral({\n              id: operation.name,\n            }),\n          }),\n          name: toQueryKeyName({\n            config,\n            id: operation.name,\n            operation,\n          }),\n        });\n        file.add(queryKeyStatement);\n\n        const statement = compiler.constVariable({\n          // TODO: describe options, same as the actual function call\n          comment: [],\n          exportConst: true,\n          expression: compiler.arrowFunction({\n            parameters: [\n              {\n                isRequired,\n                name: 'options',\n                type: typeData,\n              },\n            ],\n            statements: [\n              compiler.returnFunctionCall({\n                args: [\n                  compiler.objectExpression({\n                    obj: [\n                      {\n                        key: 'queryFn',\n                        value: compiler.arrowFunction({\n                          async: true,\n                          multiLine: true,\n                          parameters: [\n                            {\n                              destructure: [\n                                {\n                                  name: 'queryKey',\n                                },\n                                {\n                                  name: 'signal',\n                                },\n                              ],\n                            },\n                          ],\n                          statements: [\n                            compiler.constVariable({\n                              destructure: true,\n                              expression: compiler.awaitExpression({\n                                expression: compiler.callExpression({\n                                  functionName: queryFn,\n                                  parameters: [\n                                    compiler.objectExpression({\n                                      multiLine: true,\n                                      obj: [\n                                        {\n                                          spread: 'options',\n                                        },\n                                        {\n                                          spread: 'queryKey[0]',\n                                        },\n                                        {\n                                          key: 'signal',\n                                          shorthand: true,\n                                          value: compiler.identifier({\n                                            text: 'signal',\n                                          }),\n                                        },\n                                        {\n                                          key: 'throwOnError',\n                                          value: true,\n                                        },\n                                      ],\n                                    }),\n                                  ],\n                                }),\n                              }),\n                              name: 'data',\n                            }),\n                            compiler.returnVariable({\n                              expression: 'data',\n                            }),\n                          ],\n                        }),\n                      },\n                      {\n                        key: 'queryKey',\n                        value: compiler.callExpression({\n                          functionName: toQueryKeyName({\n                            config,\n                            id: operation.name,\n                            operation,\n                          }),\n                          parameters: ['options'],\n                        }),\n                      },\n                    ],\n                  }),\n                ],\n                name: queryOptionsFn,\n              }),\n            ],\n          }),\n          name: toQueryOptionsName({\n            config,\n            id: operation.name,\n            operation,\n          }),\n          // TODO: add type error\n          // TODO: AxiosError<PutSubmissionMetaError>\n        });\n        file.add(statement);\n      }\n\n      // infinite queries\n      if (\n        plugin.infiniteQueryOptions &&\n        (['GET', 'POST'] as ReadonlyArray<Method>).includes(operation.method)\n      ) {\n        // the actual pagination field might be nested inside parameter, e.g. body\n        let paginationField!: Model | OperationParameter;\n\n        const paginationParameter = operation.parameters.find((parameter) => {\n          const paginationRegExp = getPaginationKeywordsRegExp(\n            config.input.pagination,\n          );\n          if (paginationRegExp.test(parameter.name)) {\n            paginationField = parameter;\n            return true;\n          }\n\n          if (parameter.in !== 'body') {\n            return;\n          }\n\n          if (parameter.export === 'reference') {\n            const ref = parameter.$refs[0];\n            const refModel = client.models.find(\n              (model) => model.meta?.$ref === ref,\n            );\n            return refModel?.properties.find((property) => {\n              const paginationRegExp = getPaginationKeywordsRegExp(\n                config.input.pagination,\n              );\n              if (paginationRegExp.test(property.name)) {\n                paginationField = property;\n                return true;\n              }\n            });\n          }\n\n          return parameter.properties.find((property) => {\n            const paginationRegExp = getPaginationKeywordsRegExp(\n              config.input.pagination,\n            );\n            if (paginationRegExp.test(property.name)) {\n              paginationField = property;\n              return true;\n            }\n          });\n        });\n\n        if (paginationParameter && paginationField) {\n          if (!hasInfiniteQueries) {\n            hasInfiniteQueries = true;\n\n            if (!hasCreateQueryKeyParamsFunction) {\n              createQueryKeyType({ file });\n              createQueryKeyFunction({ file });\n              hasCreateQueryKeyParamsFunction = true;\n            }\n\n            if (!hasCreateInfiniteParamsFunction) {\n              createInfiniteParamsFunction({ file });\n              hasCreateInfiniteParamsFunction = true;\n            }\n\n            file.import({\n              module: plugin.name,\n              name: infiniteQueryOptionsFn,\n            });\n\n            typeInfiniteData = file.import({\n              asType: true,\n              module: plugin.name,\n              name: 'InfiniteData',\n            });\n          }\n\n          hasUsedQueryFn = true;\n\n          const { typeData } = createTypeData({\n            client,\n            file,\n            operation,\n            typesModulePath,\n          });\n          const { typeError } = createTypeError({\n            client,\n            file,\n            operation,\n            pluginName: plugin.name,\n            typesModulePath,\n          });\n          const { typeResponse } = createTypeResponse({\n            client,\n            file,\n            operation,\n            typesModulePath,\n          });\n\n          const isRequired = isOperationParameterRequired(operation.parameters);\n\n          const typeQueryKey = `${queryKeyName}<${typeData}>`;\n          const typePageObjectParam = `Pick<${typeQueryKey}[0], 'body' | 'headers' | 'path' | 'query'>`;\n          const typePageParam = `${paginationField.base} | ${typePageObjectParam}`;\n\n          const queryKeyStatement = compiler.constVariable({\n            exportConst: true,\n            expression: compiler.arrowFunction({\n              parameters: [\n                {\n                  isRequired,\n                  name: 'options',\n                  type: typeData,\n                },\n              ],\n              returnType: typeQueryKey,\n              statements: createQueryKeyLiteral({\n                id: operation.name,\n                isInfinite: true,\n              }),\n            }),\n            name: toQueryKeyName({\n              config,\n              id: operation.name,\n              isInfinite: true,\n              operation,\n            }),\n          });\n          file.add(queryKeyStatement);\n\n          const statement = compiler.constVariable({\n            // TODO: describe options, same as the actual function call\n            comment: [],\n            exportConst: true,\n            expression: compiler.arrowFunction({\n              parameters: [\n                {\n                  isRequired,\n                  name: 'options',\n                  type: typeData,\n                },\n              ],\n              statements: [\n                compiler.returnFunctionCall({\n                  args: [\n                    compiler.objectExpression({\n                      comments: [\n                        {\n                          jsdoc: false,\n                          lines: ['@ts-ignore'],\n                        },\n                      ],\n                      obj: [\n                        {\n                          key: 'queryFn',\n                          value: compiler.arrowFunction({\n                            async: true,\n                            multiLine: true,\n                            parameters: [\n                              {\n                                destructure: [\n                                  {\n                                    name: 'pageParam',\n                                  },\n                                  {\n                                    name: 'queryKey',\n                                  },\n                                  {\n                                    name: 'signal',\n                                  },\n                                ],\n                              },\n                            ],\n                            statements: [\n                              compiler.constVariable({\n                                comment: [\n                                  {\n                                    jsdoc: false,\n                                    lines: ['@ts-ignore'],\n                                  },\n                                ],\n                                expression: compiler.conditionalExpression({\n                                  condition: compiler.binaryExpression({\n                                    left: compiler.typeOfExpression({\n                                      text: 'pageParam',\n                                    }),\n                                    operator: '===',\n                                    right: compiler.ots.string('object'),\n                                  }),\n                                  whenFalse: compiler.objectExpression({\n                                    multiLine: true,\n                                    obj: [\n                                      {\n                                        key: getPaginationIn(\n                                          paginationParameter,\n                                        ),\n                                        value: compiler.objectExpression({\n                                          multiLine: true,\n                                          obj: [\n                                            {\n                                              key: paginationField.name,\n                                              value: compiler.identifier({\n                                                text: 'pageParam',\n                                              }),\n                                            },\n                                          ],\n                                        }),\n                                      },\n                                    ],\n                                  }),\n                                  whenTrue: compiler.identifier({\n                                    text: 'pageParam',\n                                  }),\n                                }),\n                                name: 'page',\n                                typeName: typePageObjectParam,\n                              }),\n                              compiler.constVariable({\n                                expression: compiler.callExpression({\n                                  functionName: 'createInfiniteParams',\n                                  parameters: ['queryKey', 'page'],\n                                }),\n                                name: 'params',\n                              }),\n                              compiler.constVariable({\n                                destructure: true,\n                                expression: compiler.awaitExpression({\n                                  expression: compiler.callExpression({\n                                    functionName: queryFn,\n                                    parameters: [\n                                      compiler.objectExpression({\n                                        multiLine: true,\n                                        obj: [\n                                          {\n                                            spread: 'options',\n                                          },\n                                          {\n                                            spread: 'params',\n                                          },\n                                          {\n                                            key: 'signal',\n                                            shorthand: true,\n                                            value: compiler.identifier({\n                                              text: 'signal',\n                                            }),\n                                          },\n                                          {\n                                            key: 'throwOnError',\n                                            value: true,\n                                          },\n                                        ],\n                                      }),\n                                    ],\n                                  }),\n                                }),\n                                name: 'data',\n                              }),\n                              compiler.returnVariable({\n                                expression: 'data',\n                              }),\n                            ],\n                          }),\n                        },\n                        {\n                          key: 'queryKey',\n                          value: compiler.callExpression({\n                            functionName: toQueryKeyName({\n                              config,\n                              id: operation.name,\n                              isInfinite: true,\n                              operation,\n                            }),\n                            parameters: ['options'],\n                          }),\n                        },\n                      ],\n                    }),\n                  ],\n                  name: infiniteQueryOptionsFn,\n                  // TODO: better types syntax\n                  types: [\n                    typeResponse,\n                    typeError.name,\n                    `${typeof typeInfiniteData === 'string' ? typeInfiniteData : typeInfiniteData.name}<${typeResponse}>`,\n                    typeQueryKey,\n                    typePageParam,\n                  ],\n                }),\n              ],\n            }),\n            name: toInfiniteQueryOptionsName(operation),\n          });\n          file.add(statement);\n        }\n      }\n\n      // mutations\n      if (\n        plugin.mutationOptions &&\n        (['DELETE', 'PATCH', 'POST', 'PUT'] as ReadonlyArray<Method>).includes(\n          operation.method,\n        )\n      ) {\n        if (!hasMutations) {\n          hasMutations = true;\n\n          file.import({\n            asType: true,\n            module: plugin.name,\n            name: mutationsType,\n          });\n        }\n\n        hasUsedQueryFn = true;\n\n        const { typeData } = createTypeData({\n          client,\n          file,\n          operation,\n          typesModulePath,\n        });\n        const { typeError } = createTypeError({\n          client,\n          file,\n          operation,\n          pluginName: plugin.name,\n          typesModulePath,\n        });\n        const { typeResponse } = createTypeResponse({\n          client,\n          file,\n          operation,\n          typesModulePath,\n        });\n\n        const expression = compiler.arrowFunction({\n          parameters: [\n            {\n              isRequired: false,\n              name: 'options',\n              type: `Partial<${typeData}>`,\n            },\n          ],\n          statements: [\n            compiler.constVariable({\n              expression: compiler.objectExpression({\n                obj: [\n                  {\n                    key: 'mutationFn',\n                    value: compiler.arrowFunction({\n                      async: true,\n                      multiLine: true,\n                      parameters: [\n                        {\n                          name: 'localOptions',\n                        },\n                      ],\n                      statements: [\n                        compiler.constVariable({\n                          destructure: true,\n                          expression: compiler.awaitExpression({\n                            expression: compiler.callExpression({\n                              functionName: queryFn,\n                              parameters: [\n                                compiler.objectExpression({\n                                  multiLine: true,\n                                  obj: [\n                                    {\n                                      spread: 'options',\n                                    },\n                                    {\n                                      spread: 'localOptions',\n                                    },\n                                    {\n                                      key: 'throwOnError',\n                                      value: true,\n                                    },\n                                  ],\n                                }),\n                              ],\n                            }),\n                          }),\n                          name: 'data',\n                        }),\n                        compiler.returnVariable({\n                          expression: 'data',\n                        }),\n                      ],\n                    }),\n                  },\n                ],\n              }),\n              name: mutationOptionsFn,\n              // TODO: better types syntax\n              typeName: `${mutationsType}<${typeResponse}, ${typeError.name}, ${typeData}>`,\n            }),\n            compiler.returnVariable({\n              expression: mutationOptionsFn,\n            }),\n          ],\n        });\n        const statement = compiler.constVariable({\n          // TODO: describe options, same as the actual function call\n          comment: [],\n          exportConst: true,\n          expression,\n          name: toMutationOptionsName(operation),\n        });\n        file.add(statement);\n      }\n\n      if (hasQueries || hasInfiniteQueries) {\n        file.import({\n          alias: '_heyApiClient',\n          module: relativeModulePath({\n            moduleOutput: files.client!.nameWithoutExtension(),\n            sourceOutput: plugin.output,\n          }),\n          name: 'client',\n        });\n      }\n\n      if (hasUsedQueryFn) {\n        file.import({\n          module: relativeModulePath({\n            moduleOutput: files.sdk!.nameWithoutExtension(),\n            sourceOutput: plugin.output,\n          }),\n          name: queryFn.split('.')[0]!,\n        });\n      }\n    }\n  }\n};\n","import type { Plugin } from '../../types';\nimport { handler } from '../query-core/plugin';\nimport { handlerLegacy } from '../query-core/plugin-legacy';\nimport type { Config } from './types';\n\nexport const defaultConfig: Plugin.Config<Config> = {\n  _dependencies: ['@hey-api/sdk', '@hey-api/typescript'],\n  _handler: handler,\n  _handlerLegacy: handlerLegacy,\n  comments: true,\n  exportFromIndex: false,\n  infiniteQueryOptions: true,\n  mutationOptions: true,\n  name: '@tanstack/angular-query-experimental',\n  output: '@tanstack/angular-query-experimental',\n  queryOptions: true,\n};\n\n/**\n * Type helper for `@tanstack/angular-query-experimental` plugin, returns {@link Plugin.Config} object\n */\nexport const defineConfig: Plugin.DefineConfig<Config> = (config) => ({\n  ...defaultConfig,\n  ...config,\n});\n","import type { Plugin } from '../../types';\nimport { handler } from '../query-core/plugin';\nimport { handlerLegacy } from '../query-core/plugin-legacy';\nimport type { Config } from './types';\n\nexport const defaultConfig: Plugin.Config<Config> = {\n  _dependencies: ['@hey-api/sdk', '@hey-api/typescript'],\n  _handler: handler,\n  _handlerLegacy: handlerLegacy,\n  comments: true,\n  exportFromIndex: false,\n  infiniteQueryOptions: true,\n  mutationOptions: true,\n  name: '@tanstack/react-query',\n  output: '@tanstack/react-query',\n  queryOptions: true,\n};\n\n/**\n * Type helper for `@tanstack/react-query` plugin, returns {@link Plugin.Config} object\n */\nexport const defineConfig: Plugin.DefineConfig<Config> = (config) => ({\n  ...defaultConfig,\n  ...config,\n});\n","import type { Plugin } from '../../types';\nimport { handler } from '../query-core/plugin';\nimport { handlerLegacy } from '../query-core/plugin-legacy';\nimport type { Config } from './types';\n\nexport const defaultConfig: Plugin.Config<Config> = {\n  _dependencies: ['@hey-api/sdk', '@hey-api/typescript'],\n  _handler: handler,\n  _handlerLegacy: handlerLegacy,\n  comments: true,\n  exportFromIndex: false,\n  infiniteQueryOptions: true,\n  mutationOptions: true,\n  name: '@tanstack/solid-query',\n  output: '@tanstack/solid-query',\n  queryOptions: true,\n};\n\n/**\n * Type helper for `@tanstack/solid-query` plugin, returns {@link Plugin.Config} object\n */\nexport const defineConfig: Plugin.DefineConfig<Config> = (config) => ({\n  ...defaultConfig,\n  ...config,\n});\n","import type { Plugin } from '../../types';\nimport { handler } from '../query-core/plugin';\nimport { handlerLegacy } from '../query-core/plugin-legacy';\nimport type { Config } from './types';\n\nexport const defaultConfig: Plugin.Config<Config> = {\n  _dependencies: ['@hey-api/sdk', '@hey-api/typescript'],\n  _handler: handler,\n  _handlerLegacy: handlerLegacy,\n  comments: true,\n  exportFromIndex: false,\n  infiniteQueryOptions: true,\n  mutationOptions: true,\n  name: '@tanstack/svelte-query',\n  output: '@tanstack/svelte-query',\n  queryOptions: true,\n};\n\n/**\n * Type helper for `@tanstack/svelte-query` plugin, returns {@link Plugin.Config} object\n */\nexport const defineConfig: Plugin.DefineConfig<Config> = (config) => ({\n  ...defaultConfig,\n  ...config,\n});\n","import type { Plugin } from '../../types';\nimport { handler } from '../query-core/plugin';\nimport { handlerLegacy } from '../query-core/plugin-legacy';\nimport type { Config } from './types';\n\nexport const defaultConfig: Plugin.Config<Config> = {\n  _dependencies: ['@hey-api/sdk', '@hey-api/typescript'],\n  _handler: handler,\n  _handlerLegacy: handlerLegacy,\n  comments: true,\n  exportFromIndex: false,\n  infiniteQueryOptions: true,\n  mutationOptions: true,\n  name: '@tanstack/vue-query',\n  output: '@tanstack/vue-query',\n  queryOptions: true,\n};\n\n/**\n * Type helper for `@tanstack/vue-query` plugin, returns {@link Plugin.Config} object\n */\nexport const defineConfig: Plugin.DefineConfig<Config> = (config) => ({\n  ...defaultConfig,\n  ...config,\n});\n","import type ts from 'typescript';\n\nimport { compiler, type Property } from '../../compiler';\nimport { operationResponsesMap } from '../../ir/operation';\nimport { hasParameterGroupObjectRequired } from '../../ir/parameter';\nimport type { IR } from '../../ir/types';\nimport { typesId } from '../@hey-api/typescript/ref';\nimport { operationIrRef } from '../shared/utils/ref';\nimport type { Plugin } from '../types';\nimport type { Config } from './types';\n\nconst fastifyId = 'fastify';\n\nconst operationToRouteHandler = ({\n  context,\n  operation,\n}: {\n  context: IR.Context;\n  operation: IR.OperationObject;\n}): Property | undefined => {\n  const file = context.file({ id: fastifyId })!;\n  const fileTypes = context.file({ id: typesId })!;\n\n  const properties: Array<Property> = [];\n\n  const identifierData = fileTypes.identifier({\n    $ref: operationIrRef({\n      config: context.config,\n      id: operation.id,\n      type: 'data',\n    }),\n    namespace: 'type',\n  });\n  if (identifierData.name) {\n    if (operation.body) {\n      file.import({\n        asType: true,\n        module: file.relativePathToFile({ context, id: typesId }),\n        name: identifierData.name,\n      });\n      properties.push({\n        isRequired: operation.body.required,\n        name: 'Body',\n        type: `${identifierData.name}['body']`,\n      });\n    }\n\n    if (operation.parameters) {\n      if (operation.parameters.header) {\n        file.import({\n          asType: true,\n          module: file.relativePathToFile({ context, id: typesId }),\n          name: identifierData.name,\n        });\n        properties.push({\n          isRequired: hasParameterGroupObjectRequired(\n            operation.parameters.header,\n          ),\n          name: 'Headers',\n          type: `${identifierData.name}['headers']`,\n        });\n      }\n\n      if (operation.parameters.path) {\n        file.import({\n          asType: true,\n          module: file.relativePathToFile({ context, id: typesId }),\n          name: identifierData.name,\n        });\n        properties.push({\n          isRequired: hasParameterGroupObjectRequired(\n            operation.parameters.path,\n          ),\n          name: 'Params',\n          type: `${identifierData.name}['path']`,\n        });\n      }\n\n      if (operation.parameters.query) {\n        file.import({\n          asType: true,\n          module: file.relativePathToFile({ context, id: typesId }),\n          name: identifierData.name,\n        });\n        properties.push({\n          isRequired: hasParameterGroupObjectRequired(\n            operation.parameters.query,\n          ),\n          name: 'Querystring',\n          type: `${identifierData.name}['query']`,\n        });\n      }\n    }\n  }\n\n  const { errors, responses } = operationResponsesMap(operation);\n\n  let errorsTypeReference: ts.TypeReferenceNode | undefined = undefined;\n  const identifierErrors = fileTypes.identifier({\n    $ref: operationIrRef({\n      config: context.config,\n      id: operation.id,\n      type: 'errors',\n    }),\n    namespace: 'type',\n  });\n  if (identifierErrors.name && errors && errors.properties) {\n    const keys = Object.keys(errors.properties);\n    if (keys.length) {\n      const hasDefaultResponse = keys.includes('default');\n      if (!hasDefaultResponse) {\n        file.import({\n          asType: true,\n          module: file.relativePathToFile({ context, id: typesId }),\n          name: identifierErrors.name,\n        });\n        errorsTypeReference = compiler.typeReferenceNode({\n          typeName: identifierErrors.name,\n        });\n      } else if (keys.length > 1) {\n        file.import({\n          asType: true,\n          module: file.relativePathToFile({ context, id: typesId }),\n          name: identifierErrors.name,\n        });\n        const errorsType = compiler.typeReferenceNode({\n          typeName: identifierErrors.name,\n        });\n        const defaultType = compiler.literalTypeNode({\n          literal: compiler.stringLiteral({ text: 'default' }),\n        });\n        errorsTypeReference = compiler.typeReferenceNode({\n          typeArguments: [errorsType, defaultType],\n          typeName: 'Omit',\n        });\n      }\n    }\n  }\n\n  let responsesTypeReference: ts.TypeReferenceNode | undefined = undefined;\n  const identifierResponses = fileTypes.identifier({\n    $ref: operationIrRef({\n      config: context.config,\n      id: operation.id,\n      type: 'responses',\n    }),\n    namespace: 'type',\n  });\n  if (identifierResponses.name && responses && responses.properties) {\n    const keys = Object.keys(responses.properties);\n    if (keys.length) {\n      const hasDefaultResponse = keys.includes('default');\n      if (!hasDefaultResponse) {\n        file.import({\n          asType: true,\n          module: file.relativePathToFile({ context, id: typesId }),\n          name: identifierResponses.name,\n        });\n        responsesTypeReference = compiler.typeReferenceNode({\n          typeName: identifierResponses.name,\n        });\n      } else if (keys.length > 1) {\n        file.import({\n          asType: true,\n          module: file.relativePathToFile({ context, id: typesId }),\n          name: identifierResponses.name,\n        });\n        const responsesType = compiler.typeReferenceNode({\n          typeName: identifierResponses.name,\n        });\n        const defaultType = compiler.literalTypeNode({\n          literal: compiler.stringLiteral({ text: 'default' }),\n        });\n        responsesTypeReference = compiler.typeReferenceNode({\n          typeArguments: [responsesType, defaultType],\n          typeName: 'Omit',\n        });\n      }\n    }\n  }\n\n  const replyTypes = [errorsTypeReference, responsesTypeReference].filter(\n    Boolean,\n  );\n  if (replyTypes.length) {\n    properties.push({\n      name: 'Reply',\n      type: compiler.typeIntersectionNode({\n        types: replyTypes,\n      }),\n    });\n  }\n\n  if (!properties.length) {\n    return;\n  }\n\n  const routeHandler: Property = {\n    name: operation.id,\n    type: compiler.typeNode('RouteHandler', [\n      compiler.typeInterfaceNode({\n        properties,\n        useLegacyResolution: false,\n      }),\n    ]),\n  };\n  return routeHandler;\n};\n\nexport const handler: Plugin.Handler<Config> = ({ context, plugin }) => {\n  const file = context.createFile({\n    exportFromIndex: plugin.exportFromIndex,\n    id: fastifyId,\n    path: plugin.output,\n  });\n\n  const routeHandlers: Array<Property> = [];\n\n  context.subscribe('operation', ({ operation }) => {\n    const routeHandler = operationToRouteHandler({ context, operation });\n    if (routeHandler) {\n      routeHandlers.push(routeHandler);\n    }\n  });\n\n  context.subscribe('after', () => {\n    const identifier = file.identifier({\n      $ref: 'RouteHandlers',\n      create: true,\n      namespace: 'type',\n    });\n\n    if (!identifier.name) {\n      return;\n    }\n\n    if (routeHandlers.length) {\n      file.import({\n        asType: true,\n        module: 'fastify',\n        name: 'RouteHandler',\n      });\n    }\n\n    file.add(\n      compiler.typeAliasDeclaration({\n        exportType: true,\n        name: identifier.name,\n        type: compiler.typeInterfaceNode({\n          properties: routeHandlers,\n          useLegacyResolution: false,\n        }),\n      }),\n    );\n  });\n};\n","import type { Plugin } from '../types';\nimport { handler } from './plugin';\nimport type { Config } from './types';\n\nexport const defaultConfig: Plugin.Config<Config> = {\n  _dependencies: ['@hey-api/typescript'],\n  _handler: handler,\n  _handlerLegacy: () => {},\n  exportFromIndex: false,\n  name: 'fastify',\n  output: 'fastify',\n};\n\n/**\n * Type helper for `fastify` plugin, returns {@link Plugin.Config} object\n */\nexport const defineConfig: Plugin.DefineConfig<Config> = (config) => ({\n  ...defaultConfig,\n  ...config,\n});\n","import ts from 'typescript';\n\nimport { compiler } from '../../compiler';\nimport { operationResponsesMap } from '../../ir/operation';\nimport { deduplicateSchema } from '../../ir/schema';\nimport type { IR } from '../../ir/types';\nimport { numberRegExp } from '../../utils/regexp';\nimport { operationIrRef } from '../shared/utils/ref';\nimport { createSchemaComment } from '../shared/utils/schema';\nimport type { Plugin } from '../types';\nimport { identifiers, valibotId } from './constants';\nimport type { Config } from './types';\n\ninterface SchemaWithType<T extends Required<IR.SchemaObject>['type']>\n  extends Omit<IR.SchemaObject, 'type'> {\n  type: Extract<Required<IR.SchemaObject>['type'], T>;\n}\n\ninterface Result {\n  circularReferenceTracker: Set<string>;\n  hasCircularReference: boolean;\n}\n\nconst nameTransformer = (name: string) => `v-${name}`;\n\nconst pipesToExpression = (pipes: Array<ts.Expression>) => {\n  if (pipes.length === 1) {\n    return pipes[0]!;\n  }\n\n  const expression = compiler.callExpression({\n    functionName: compiler.propertyAccessExpression({\n      expression: identifiers.v,\n      name: identifiers.methods.pipe,\n    }),\n    parameters: pipes,\n  });\n  return expression;\n};\n\nconst arrayTypeToValibotSchema = ({\n  context,\n  plugin,\n  result,\n  schema,\n}: {\n  context: IR.Context;\n  plugin: Plugin.Instance<Config>;\n  result: Result;\n  schema: SchemaWithType<'array'>;\n}): ts.CallExpression => {\n  const functionName = compiler.propertyAccessExpression({\n    expression: identifiers.v,\n    name: identifiers.schemas.array,\n  });\n\n  let arrayExpression: ts.CallExpression | undefined;\n\n  if (!schema.items) {\n    arrayExpression = compiler.callExpression({\n      functionName,\n      parameters: [\n        unknownTypeToValibotSchema({\n          context,\n          schema: {\n            type: 'unknown',\n          },\n        }),\n      ],\n    });\n  } else {\n    schema = deduplicateSchema({ schema });\n\n    // at least one item is guaranteed\n    const itemExpressions = schema.items!.map((item) => {\n      const schemaPipes = schemaToValibotSchema({\n        context,\n        plugin,\n        result,\n        schema: item,\n      });\n      return pipesToExpression(schemaPipes);\n    });\n\n    if (itemExpressions.length === 1) {\n      arrayExpression = compiler.callExpression({\n        functionName,\n        parameters: itemExpressions,\n      });\n    } else {\n      if (schema.logicalOperator === 'and') {\n        // TODO: parser - handle intersection\n        // return compiler.typeArrayNode(\n        //   compiler.typeIntersectionNode({ types: itemExpressions }),\n        // );\n      }\n\n      // TODO: parser - handle union\n      // return compiler.typeArrayNode(compiler.typeUnionNode({ types: itemExpressions }));\n\n      arrayExpression = compiler.callExpression({\n        functionName,\n        parameters: [\n          unknownTypeToValibotSchema({\n            context,\n            schema: {\n              type: 'unknown',\n            },\n          }),\n        ],\n      });\n    }\n  }\n\n  if (schema.minItems === schema.maxItems && schema.minItems !== undefined) {\n    arrayExpression = compiler.callExpression({\n      functionName: compiler.propertyAccessExpression({\n        expression: arrayExpression,\n        name: identifiers.actions.length,\n      }),\n      parameters: [compiler.valueToExpression({ value: schema.minItems })],\n    });\n  } else {\n    if (schema.minItems !== undefined) {\n      arrayExpression = compiler.callExpression({\n        functionName: compiler.propertyAccessExpression({\n          expression: arrayExpression,\n          name: compiler.identifier({ text: 'min' }),\n        }),\n        parameters: [compiler.valueToExpression({ value: schema.minItems })],\n      });\n    }\n\n    if (schema.maxItems !== undefined) {\n      arrayExpression = compiler.callExpression({\n        functionName: compiler.propertyAccessExpression({\n          expression: arrayExpression,\n          name: compiler.identifier({ text: 'max' }),\n        }),\n        parameters: [compiler.valueToExpression({ value: schema.maxItems })],\n      });\n    }\n  }\n\n  return arrayExpression;\n};\n\nconst booleanTypeToValibotSchema = ({\n  schema,\n}: {\n  context: IR.Context;\n  schema: SchemaWithType<'boolean'>;\n}) => {\n  if (typeof schema.const === 'boolean') {\n    const expression = compiler.callExpression({\n      functionName: compiler.propertyAccessExpression({\n        expression: identifiers.v,\n        name: identifiers.schemas.literal,\n      }),\n      parameters: [compiler.ots.boolean(schema.const)],\n    });\n    return expression;\n  }\n\n  const expression = compiler.callExpression({\n    functionName: compiler.propertyAccessExpression({\n      expression: identifiers.v,\n      name: identifiers.schemas.boolean,\n    }),\n  });\n  return expression;\n};\n\nconst enumTypeToValibotSchema = ({\n  context,\n  schema,\n}: {\n  context: IR.Context;\n  schema: SchemaWithType<'enum'>;\n}): ts.CallExpression => {\n  const enumMembers: Array<ts.LiteralExpression> = [];\n\n  let isNullable = false;\n\n  for (const item of schema.items ?? []) {\n    // Zod supports only string enums\n    if (item.type === 'string' && typeof item.const === 'string') {\n      enumMembers.push(\n        compiler.stringLiteral({\n          text: item.const,\n        }),\n      );\n    } else if (item.type === 'null' || item.const === null) {\n      isNullable = true;\n    }\n  }\n\n  if (!enumMembers.length) {\n    return unknownTypeToValibotSchema({\n      context,\n      schema: {\n        type: 'unknown',\n      },\n    });\n  }\n\n  let resultExpression = compiler.callExpression({\n    functionName: compiler.propertyAccessExpression({\n      expression: identifiers.v,\n      name: identifiers.schemas.picklist,\n    }),\n    parameters: [\n      compiler.arrayLiteralExpression({\n        elements: enumMembers,\n        multiLine: false,\n      }),\n    ],\n  });\n\n  if (isNullable) {\n    resultExpression = compiler.callExpression({\n      functionName: compiler.propertyAccessExpression({\n        expression: identifiers.v,\n        name: identifiers.schemas.nullable,\n      }),\n      parameters: [resultExpression],\n    });\n  }\n\n  return resultExpression;\n};\n\nconst neverTypeToValibotSchema = ({\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  schema,\n}: {\n  context: IR.Context;\n  schema: SchemaWithType<'never'>;\n}) => {\n  const expression = compiler.callExpression({\n    functionName: compiler.propertyAccessExpression({\n      expression: identifiers.v,\n      name: identifiers.schemas.never,\n    }),\n  });\n  return expression;\n};\n\nconst nullTypeToValibotSchema = ({\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  schema,\n}: {\n  context: IR.Context;\n  schema: SchemaWithType<'null'>;\n}) => {\n  const expression = compiler.callExpression({\n    functionName: compiler.propertyAccessExpression({\n      expression: identifiers.v,\n      name: identifiers.schemas.null,\n    }),\n  });\n  return expression;\n};\n\nconst numberParameter = ({\n  isBigInt,\n  value,\n}: {\n  isBigInt: boolean;\n  value: unknown;\n}) => {\n  const expression = compiler.valueToExpression({ value });\n\n  if (\n    isBigInt &&\n    (typeof value === 'bigint' ||\n      typeof value === 'number' ||\n      typeof value === 'string' ||\n      typeof value === 'boolean')\n  ) {\n    return compiler.callExpression({\n      functionName: 'BigInt',\n      parameters: [expression],\n    });\n  }\n\n  return expression;\n};\n\nconst numberTypeToValibotSchema = ({\n  schema,\n}: {\n  context: IR.Context;\n  schema: SchemaWithType<'integer' | 'number'>;\n}) => {\n  const isBigInt = schema.type === 'integer' && schema.format === 'int64';\n\n  if (typeof schema.const === 'number') {\n    // TODO: parser - handle bigint constants\n    const expression = compiler.callExpression({\n      functionName: compiler.propertyAccessExpression({\n        expression: identifiers.v,\n        name: identifiers.schemas.literal,\n      }),\n      parameters: [compiler.ots.number(schema.const)],\n    });\n    return expression;\n  }\n\n  const pipes: Array<ts.CallExpression> = [];\n\n  // Zod uses coerce for bigint here, might be needed for Valibot too\n  const expression = compiler.callExpression({\n    functionName: isBigInt\n      ? compiler.propertyAccessExpression({\n          expression: identifiers.v,\n          name: identifiers.schemas.bigInt,\n        })\n      : compiler.propertyAccessExpression({\n          expression: identifiers.v,\n          name: identifiers.schemas.number,\n        }),\n  });\n  pipes.push(expression);\n\n  if (!isBigInt && schema.type === 'integer') {\n    const expression = compiler.callExpression({\n      functionName: compiler.propertyAccessExpression({\n        expression: identifiers.v,\n        name: identifiers.actions.integer,\n      }),\n    });\n    pipes.push(expression);\n  }\n\n  if (schema.exclusiveMinimum !== undefined) {\n    const expression = compiler.callExpression({\n      functionName: compiler.propertyAccessExpression({\n        expression: identifiers.v,\n        name: identifiers.actions.gtValue,\n      }),\n      parameters: [\n        numberParameter({ isBigInt, value: schema.exclusiveMinimum }),\n      ],\n    });\n    pipes.push(expression);\n  } else if (schema.minimum !== undefined) {\n    const expression = compiler.callExpression({\n      functionName: compiler.propertyAccessExpression({\n        expression: identifiers.v,\n        name: identifiers.actions.minValue,\n      }),\n      parameters: [numberParameter({ isBigInt, value: schema.minimum })],\n    });\n    pipes.push(expression);\n  }\n\n  if (schema.exclusiveMaximum !== undefined) {\n    const expression = compiler.callExpression({\n      functionName: compiler.propertyAccessExpression({\n        expression: identifiers.v,\n        name: identifiers.actions.ltValue,\n      }),\n      parameters: [\n        numberParameter({ isBigInt, value: schema.exclusiveMaximum }),\n      ],\n    });\n    pipes.push(expression);\n  } else if (schema.maximum !== undefined) {\n    const expression = compiler.callExpression({\n      functionName: compiler.propertyAccessExpression({\n        expression: identifiers.v,\n        name: identifiers.actions.maxValue,\n      }),\n      parameters: [numberParameter({ isBigInt, value: schema.maximum })],\n    });\n    pipes.push(expression);\n  }\n\n  return pipesToExpression(pipes);\n};\n\nconst objectTypeToValibotSchema = ({\n  context,\n  plugin,\n  result,\n  schema,\n}: {\n  context: IR.Context;\n  plugin: Plugin.Instance<Config>;\n  result: Result;\n  schema: SchemaWithType<'object'>;\n}): {\n  anyType: string;\n  expression: ts.CallExpression;\n} => {\n  // TODO: parser - handle constants\n  const properties: Array<ts.PropertyAssignment> = [];\n\n  // let indexProperty: Property | undefined;\n  // const schemaProperties: Array<Property> = [];\n  // let indexPropertyItems: Array<IR.SchemaObject> = [];\n  const required = schema.required ?? [];\n  // let hasOptionalProperties = false;\n\n  for (const name in schema.properties) {\n    const property = schema.properties[name]!;\n    const isRequired = required.includes(name);\n\n    const schemaPipes = schemaToValibotSchema({\n      context,\n      optional: !isRequired,\n      plugin,\n      result,\n      schema: property,\n    });\n\n    numberRegExp.lastIndex = 0;\n    let propertyName;\n    if (numberRegExp.test(name)) {\n      // For numeric literals, we'll handle negative numbers by using a string literal\n      // instead of trying to use a PrefixUnaryExpression\n      propertyName = name.startsWith('-')\n        ? ts.factory.createStringLiteral(name)\n        : ts.factory.createNumericLiteral(name);\n    } else {\n      propertyName = name;\n    }\n    // TODO: parser - abstract safe property name logic\n    if (\n      ((name.match(/^[0-9]/) && name.match(/\\D+/g)) || name.match(/\\W/g)) &&\n      !name.startsWith(\"'\") &&\n      !name.endsWith(\"'\")\n    ) {\n      propertyName = `'${name}'`;\n    }\n    properties.push(\n      compiler.propertyAssignment({\n        initializer: pipesToExpression(schemaPipes),\n        name: propertyName,\n      }),\n    );\n\n    // indexPropertyItems.push(property);\n    // if (!isRequired) {\n    //   hasOptionalProperties = true;\n    // }\n  }\n\n  // if (\n  //   schema.additionalProperties &&\n  //   (schema.additionalProperties.type !== 'never' || !indexPropertyItems.length)\n  // ) {\n  //   if (schema.additionalProperties.type === 'never') {\n  //     indexPropertyItems = [schema.additionalProperties];\n  //   } else {\n  //     indexPropertyItems.unshift(schema.additionalProperties);\n  //   }\n\n  //   if (hasOptionalProperties) {\n  //     indexPropertyItems.push({\n  //       type: 'undefined',\n  //     });\n  //   }\n\n  //   indexProperty = {\n  //     isRequired: true,\n  //     name: 'key',\n  //     type: schemaToValibotSchema({\n  //       context,\n  //       schema:\n  //         indexPropertyItems.length === 1\n  //           ? indexPropertyItems[0]\n  //           : {\n  //               items: indexPropertyItems,\n  //               logicalOperator: 'or',\n  //             },\n  //     }),\n  //   };\n  // }\n\n  // return compiler.typeInterfaceNode({\n  //   indexProperty,\n  //   properties: schemaProperties,\n  //   useLegacyResolution: false,\n  // });\n  const expression = compiler.callExpression({\n    functionName: compiler.propertyAccessExpression({\n      expression: identifiers.v,\n      name: identifiers.schemas.object,\n    }),\n    parameters: [ts.factory.createObjectLiteralExpression(properties, true)],\n  });\n  return {\n    // Zod uses AnyZodObject here, maybe we want to be more specific too\n    anyType: identifiers.types.GenericSchema.text,\n    expression,\n  };\n};\n\nconst stringTypeToValibotSchema = ({\n  schema,\n}: {\n  context: IR.Context;\n  schema: SchemaWithType<'string'>;\n}) => {\n  if (typeof schema.const === 'string') {\n    const expression = compiler.callExpression({\n      functionName: compiler.propertyAccessExpression({\n        expression: identifiers.v,\n        name: identifiers.schemas.literal,\n      }),\n      parameters: [compiler.ots.string(schema.const)],\n    });\n    return expression;\n  }\n\n  const pipes: Array<ts.CallExpression> = [];\n\n  const expression = compiler.callExpression({\n    functionName: compiler.propertyAccessExpression({\n      expression: identifiers.v,\n      name: identifiers.schemas.string,\n    }),\n  });\n  pipes.push(expression);\n\n  if (schema.format) {\n    switch (schema.format) {\n      case 'date':\n        pipes.push(\n          compiler.callExpression({\n            functionName: compiler.propertyAccessExpression({\n              expression: identifiers.v,\n              name: identifiers.actions.isoDate,\n            }),\n          }),\n        );\n        break;\n      case 'date-time':\n        pipes.push(\n          compiler.callExpression({\n            functionName: compiler.propertyAccessExpression({\n              expression: identifiers.v,\n              name: identifiers.actions.isoDateTime,\n            }),\n          }),\n        );\n        break;\n      case 'ipv4':\n      case 'ipv6':\n        pipes.push(\n          compiler.callExpression({\n            functionName: compiler.propertyAccessExpression({\n              expression: identifiers.v,\n              name: identifiers.actions.ip,\n            }),\n          }),\n        );\n        break;\n      case 'uri':\n        pipes.push(\n          compiler.callExpression({\n            functionName: compiler.propertyAccessExpression({\n              expression: identifiers.v,\n              name: identifiers.actions.url,\n            }),\n          }),\n        );\n        break;\n      case 'email':\n      case 'time':\n      case 'uuid':\n        pipes.push(\n          compiler.callExpression({\n            functionName: compiler.propertyAccessExpression({\n              expression: identifiers.v,\n              name: compiler.identifier({ text: schema.format }),\n            }),\n          }),\n        );\n        break;\n    }\n  }\n\n  if (schema.minLength === schema.maxLength && schema.minLength !== undefined) {\n    const expression = compiler.callExpression({\n      functionName: compiler.propertyAccessExpression({\n        expression: identifiers.v,\n        name: identifiers.actions.length,\n      }),\n      parameters: [compiler.valueToExpression({ value: schema.minLength })],\n    });\n    pipes.push(expression);\n  } else {\n    if (schema.minLength !== undefined) {\n      const expression = compiler.callExpression({\n        functionName: compiler.propertyAccessExpression({\n          expression: identifiers.v,\n          name: identifiers.actions.minLength,\n        }),\n        parameters: [compiler.valueToExpression({ value: schema.minLength })],\n      });\n      pipes.push(expression);\n    }\n\n    if (schema.maxLength !== undefined) {\n      const expression = compiler.callExpression({\n        functionName: compiler.propertyAccessExpression({\n          expression: identifiers.v,\n          name: identifiers.actions.maxLength,\n        }),\n        parameters: [compiler.valueToExpression({ value: schema.maxLength })],\n      });\n      pipes.push(expression);\n    }\n  }\n\n  if (schema.pattern) {\n    const expression = compiler.callExpression({\n      functionName: compiler.propertyAccessExpression({\n        expression: identifiers.v,\n        name: identifiers.actions.regex,\n      }),\n      parameters: [compiler.regularExpressionLiteral({ text: schema.pattern })],\n    });\n    pipes.push(expression);\n  }\n\n  return pipesToExpression(pipes);\n};\n\nconst tupleTypeToValibotSchema = ({\n  context,\n  plugin,\n  result,\n  schema,\n}: {\n  context: IR.Context;\n  plugin: Plugin.Instance<Config>;\n  result: Result;\n  schema: SchemaWithType<'tuple'>;\n}) => {\n  if (schema.const && Array.isArray(schema.const)) {\n    const tupleElements = schema.const.map((value) =>\n      compiler.callExpression({\n        functionName: compiler.propertyAccessExpression({\n          expression: identifiers.v,\n          name: identifiers.schemas.literal,\n        }),\n        parameters: [compiler.valueToExpression({ value })],\n      }),\n    );\n    const expression = compiler.callExpression({\n      functionName: compiler.propertyAccessExpression({\n        expression: identifiers.v,\n        name: identifiers.schemas.tuple,\n      }),\n      parameters: [\n        compiler.arrayLiteralExpression({\n          elements: tupleElements,\n        }),\n      ],\n    });\n    return expression;\n  }\n\n  if (schema.items) {\n    const tupleElements = schema.items.map((item) => {\n      const schemaPipes = schemaToValibotSchema({\n        context,\n        plugin,\n        result,\n        schema: item,\n      });\n      return pipesToExpression(schemaPipes);\n    });\n    const expression = compiler.callExpression({\n      functionName: compiler.propertyAccessExpression({\n        expression: identifiers.v,\n        name: identifiers.schemas.tuple,\n      }),\n      parameters: [\n        compiler.arrayLiteralExpression({\n          elements: tupleElements,\n        }),\n      ],\n    });\n    return expression;\n  }\n\n  return unknownTypeToValibotSchema({\n    context,\n    schema: {\n      type: 'unknown',\n    },\n  });\n};\n\nconst undefinedTypeToValibotSchema = ({\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  schema,\n}: {\n  context: IR.Context;\n  schema: SchemaWithType<'undefined'>;\n}) => {\n  const expression = compiler.callExpression({\n    functionName: compiler.propertyAccessExpression({\n      expression: identifiers.v,\n      name: identifiers.schemas.undefined,\n    }),\n  });\n  return expression;\n};\n\nconst unknownTypeToValibotSchema = ({\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  schema,\n}: {\n  context: IR.Context;\n  schema: SchemaWithType<'unknown'>;\n}) => {\n  const expression = compiler.callExpression({\n    functionName: compiler.propertyAccessExpression({\n      expression: identifiers.v,\n      name: identifiers.schemas.unknown,\n    }),\n  });\n  return expression;\n};\n\nconst voidTypeToValibotSchema = ({\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  schema,\n}: {\n  context: IR.Context;\n  schema: SchemaWithType<'void'>;\n}) => {\n  const expression = compiler.callExpression({\n    functionName: compiler.propertyAccessExpression({\n      expression: identifiers.v,\n      name: identifiers.schemas.void,\n    }),\n  });\n  return expression;\n};\n\nconst schemaTypeToValibotSchema = ({\n  context,\n  plugin,\n  result,\n  schema,\n}: {\n  context: IR.Context;\n  plugin: Plugin.Instance<Config>;\n  result: Result;\n  schema: IR.SchemaObject;\n}): {\n  anyType?: string;\n  expression: ts.Expression;\n} => {\n  switch (schema.type as Required<IR.SchemaObject>['type']) {\n    case 'array':\n      return {\n        expression: arrayTypeToValibotSchema({\n          context,\n          plugin,\n          result,\n          schema: schema as SchemaWithType<'array'>,\n        }),\n      };\n    case 'boolean':\n      return {\n        expression: booleanTypeToValibotSchema({\n          context,\n          schema: schema as SchemaWithType<'boolean'>,\n        }),\n      };\n    case 'enum':\n      return {\n        expression: enumTypeToValibotSchema({\n          context,\n          schema: schema as SchemaWithType<'enum'>,\n        }),\n      };\n    case 'integer':\n    case 'number':\n      return {\n        expression: numberTypeToValibotSchema({\n          context,\n          schema: schema as SchemaWithType<'integer' | 'number'>,\n        }),\n      };\n    case 'never':\n      return {\n        expression: neverTypeToValibotSchema({\n          context,\n          schema: schema as SchemaWithType<'never'>,\n        }),\n      };\n    case 'null':\n      return {\n        expression: nullTypeToValibotSchema({\n          context,\n          schema: schema as SchemaWithType<'null'>,\n        }),\n      };\n    case 'object':\n      return objectTypeToValibotSchema({\n        context,\n        plugin,\n        result,\n        schema: schema as SchemaWithType<'object'>,\n      });\n    case 'string':\n      return {\n        expression: stringTypeToValibotSchema({\n          context,\n          schema: schema as SchemaWithType<'string'>,\n        }),\n      };\n    case 'tuple':\n      return {\n        expression: tupleTypeToValibotSchema({\n          context,\n          plugin,\n          result,\n          schema: schema as SchemaWithType<'tuple'>,\n        }),\n      };\n    case 'undefined':\n      return {\n        expression: undefinedTypeToValibotSchema({\n          context,\n          schema: schema as SchemaWithType<'undefined'>,\n        }),\n      };\n    case 'unknown':\n      return {\n        expression: unknownTypeToValibotSchema({\n          context,\n          schema: schema as SchemaWithType<'unknown'>,\n        }),\n      };\n    case 'void':\n      return {\n        expression: voidTypeToValibotSchema({\n          context,\n          schema: schema as SchemaWithType<'void'>,\n        }),\n      };\n  }\n};\n\nconst operationToValibotSchema = ({\n  context,\n  operation,\n  plugin,\n  result,\n}: {\n  context: IR.Context;\n  operation: IR.OperationObject;\n  plugin: Plugin.Instance<Config>;\n  result: Result;\n}) => {\n  if (operation.body) {\n    schemaToValibotSchema({\n      $ref: operationIrRef({\n        case: 'camelCase',\n        config: context.config,\n        id: operation.id,\n        type: 'data',\n      }),\n      context,\n      plugin,\n      result,\n      schema: operation.body.schema,\n    });\n  }\n\n  if (operation.parameters) {\n    for (const type in operation.parameters) {\n      const group = operation.parameters[type as keyof IR.ParametersObject]!;\n      for (const key in group) {\n        const parameter = group[key]!;\n        schemaToValibotSchema({\n          $ref: operationIrRef({\n            case: 'camelCase',\n            config: context.config,\n            id: operation.id,\n            parameterId: parameter.name,\n            type: 'parameter',\n          }),\n          context,\n          plugin,\n          result,\n          schema: parameter.schema,\n        });\n      }\n    }\n  }\n\n  if (operation.responses) {\n    const { response } = operationResponsesMap(operation);\n\n    if (response) {\n      schemaToValibotSchema({\n        $ref: operationIrRef({\n          case: 'camelCase',\n          config: context.config,\n          id: operation.id,\n          type: 'response',\n        }),\n        context,\n        plugin,\n        result,\n        schema: response,\n      });\n    }\n  }\n};\n\nconst schemaToValibotSchema = ({\n  $ref,\n  context,\n  optional,\n  plugin,\n  result,\n  schema,\n}: {\n  /**\n   * When $ref is supplied, a node will be emitted to the file.\n   */\n  $ref?: string;\n  context: IR.Context;\n  /**\n   * Accept `optional` to handle optional object properties. We can't handle\n   * this inside the object function because `.optional()` must come before\n   * `.default()` which is handled in this function.\n   */\n  optional?: boolean;\n  plugin: Plugin.Instance<Config>;\n  result: Result;\n  schema: IR.SchemaObject;\n}): Array<ts.Expression> => {\n  const file = context.file({ id: valibotId })!;\n\n  let anyType: string | undefined;\n  let identifier: ReturnType<typeof file.identifier> | undefined;\n  let pipes: Array<ts.Expression> = [];\n\n  if ($ref) {\n    result.circularReferenceTracker.add($ref);\n\n    identifier = file.identifier({\n      $ref,\n      create: true,\n      nameTransformer,\n      namespace: 'value',\n    });\n  }\n\n  if (schema.$ref) {\n    const isCircularReference = result.circularReferenceTracker.has(\n      schema.$ref,\n    );\n\n    // if $ref hasn't been processed yet, inline it to avoid the\n    // \"Block-scoped variable used before its declaration.\" error\n    // this could be (maybe?) fixed by reshuffling the generation order\n    let identifierRef = file.identifier({\n      $ref: schema.$ref,\n      nameTransformer,\n      namespace: 'value',\n    });\n\n    if (!identifierRef.name) {\n      const ref = context.resolveIrRef<IR.SchemaObject>(schema.$ref);\n      const schemaPipes = schemaToValibotSchema({\n        $ref: schema.$ref,\n        context,\n        plugin,\n        result,\n        schema: ref,\n      });\n      pipes.push(...schemaPipes);\n\n      identifierRef = file.identifier({\n        $ref: schema.$ref,\n        nameTransformer,\n        namespace: 'value',\n      });\n    }\n\n    // if `identifierRef.name` is falsy, we already set expression above\n    if (identifierRef.name) {\n      const refIdentifier = compiler.identifier({ text: identifierRef.name });\n      if (isCircularReference) {\n        const lazyExpression = compiler.callExpression({\n          functionName: compiler.propertyAccessExpression({\n            expression: identifiers.v,\n            name: identifiers.schemas.lazy,\n          }),\n          parameters: [\n            compiler.arrowFunction({\n              statements: [\n                compiler.returnStatement({\n                  expression: refIdentifier,\n                }),\n              ],\n            }),\n          ],\n        });\n        pipes.push(lazyExpression);\n        result.hasCircularReference = true;\n      } else {\n        pipes.push(refIdentifier);\n      }\n    }\n  } else if (schema.type) {\n    const valibotSchema = schemaTypeToValibotSchema({\n      context,\n      plugin,\n      result,\n      schema,\n    });\n    anyType = valibotSchema.anyType;\n    pipes.push(valibotSchema.expression);\n  } else if (schema.items) {\n    schema = deduplicateSchema({ schema });\n\n    if (schema.items) {\n      const itemTypes = schema.items.map((item) => {\n        const schemaPipes = schemaToValibotSchema({\n          context,\n          plugin,\n          result,\n          schema: item,\n        });\n        return pipesToExpression(schemaPipes);\n      });\n\n      if (schema.logicalOperator === 'and') {\n        const intersectExpression = compiler.callExpression({\n          functionName: compiler.propertyAccessExpression({\n            expression: identifiers.v,\n            name: identifiers.schemas.intersect,\n          }),\n          parameters: [\n            compiler.arrayLiteralExpression({\n              elements: itemTypes,\n            }),\n          ],\n        });\n        pipes.push(intersectExpression);\n      } else {\n        const unionExpression = compiler.callExpression({\n          functionName: compiler.propertyAccessExpression({\n            expression: identifiers.v,\n            name: identifiers.schemas.union,\n          }),\n          parameters: [\n            compiler.arrayLiteralExpression({\n              elements: itemTypes,\n            }),\n          ],\n        });\n        pipes.push(unionExpression);\n      }\n    } else {\n      const schemaPipes = schemaToValibotSchema({\n        context,\n        plugin,\n        result,\n        schema,\n      });\n      pipes.push(...schemaPipes);\n    }\n  } else {\n    // catch-all fallback for failed schemas\n    const valibotSchema = schemaTypeToValibotSchema({\n      context,\n      plugin,\n      result,\n      schema: {\n        type: 'unknown',\n      },\n    });\n    anyType = valibotSchema.anyType;\n    pipes.push(valibotSchema.expression);\n  }\n\n  if ($ref) {\n    result.circularReferenceTracker.delete($ref);\n  }\n\n  if (pipes.length) {\n    if (schema.accessScope === 'read') {\n      const readonlyExpression = compiler.callExpression({\n        functionName: compiler.propertyAccessExpression({\n          expression: identifiers.v,\n          name: identifiers.actions.readonly,\n        }),\n      });\n      pipes.push(readonlyExpression);\n    }\n  }\n\n  if (pipes.length) {\n    let callParameter: ts.Expression | undefined;\n\n    if (schema.default !== undefined) {\n      const isBigInt = schema.type === 'integer' && schema.format === 'int64';\n      callParameter = numberParameter({ isBigInt, value: schema.default });\n      if (callParameter) {\n        pipes = [\n          compiler.callExpression({\n            functionName: compiler.propertyAccessExpression({\n              expression: identifiers.v,\n              name: identifiers.schemas.optional,\n            }),\n            parameters: [pipesToExpression(pipes), callParameter],\n          }),\n        ];\n      }\n    }\n\n    if (optional && !callParameter) {\n      pipes = [\n        compiler.callExpression({\n          functionName: compiler.propertyAccessExpression({\n            expression: identifiers.v,\n            name: identifiers.schemas.optional,\n          }),\n          parameters: [pipesToExpression(pipes)],\n        }),\n      ];\n    }\n  }\n\n  // emit nodes only if $ref points to a reusable component\n  if (identifier && identifier.name && identifier.created) {\n    const statement = compiler.constVariable({\n      comment: plugin.comments ? createSchemaComment({ schema }) : undefined,\n      exportConst: true,\n      expression: pipesToExpression(pipes),\n      name: identifier.name,\n      typeName: result.hasCircularReference\n        ? (compiler.propertyAccessExpression({\n            expression: identifiers.v,\n            name: anyType || identifiers.types.GenericSchema.text,\n          }) as unknown as ts.TypeNode)\n        : undefined,\n    });\n    file.add(statement);\n\n    return [];\n  }\n\n  return pipes;\n};\n\nexport const handler: Plugin.Handler<Config> = ({ context, plugin }) => {\n  const file = context.createFile({\n    exportFromIndex: plugin.exportFromIndex,\n    id: valibotId,\n    identifierCase: 'camelCase',\n    path: plugin.output,\n  });\n\n  file.import({\n    alias: identifiers.v.text,\n    module: 'valibot',\n    name: '*',\n  });\n\n  context.subscribe('operation', ({ operation }) => {\n    const result: Result = {\n      circularReferenceTracker: new Set(),\n      hasCircularReference: false,\n    };\n\n    operationToValibotSchema({\n      context,\n      operation,\n      plugin,\n      result,\n    });\n  });\n\n  context.subscribe('parameter', ({ $ref, parameter }) => {\n    const result: Result = {\n      circularReferenceTracker: new Set(),\n      hasCircularReference: false,\n    };\n\n    schemaToValibotSchema({\n      $ref,\n      context,\n      plugin,\n      result,\n      schema: parameter.schema,\n    });\n  });\n\n  context.subscribe('requestBody', ({ $ref, requestBody }) => {\n    const result: Result = {\n      circularReferenceTracker: new Set(),\n      hasCircularReference: false,\n    };\n\n    schemaToValibotSchema({\n      $ref,\n      context,\n      plugin,\n      result,\n      schema: requestBody.schema,\n    });\n  });\n\n  context.subscribe('schema', ({ $ref, schema }) => {\n    const result: Result = {\n      circularReferenceTracker: new Set(),\n      hasCircularReference: false,\n    };\n\n    schemaToValibotSchema({\n      $ref,\n      context,\n      plugin,\n      result,\n      schema,\n    });\n  });\n};\n","import type { Plugin } from '../types';\nimport { handler } from './plugin';\nimport type { Config } from './types';\n\nexport const defaultConfig: Plugin.Config<Config> = {\n  _handler: handler,\n  _handlerLegacy: () => {},\n  _tags: ['validator'],\n  comments: true,\n  exportFromIndex: false,\n  name: 'valibot',\n  output: 'valibot',\n};\n\n/**\n * Type helper for Valibot plugin, returns {@link Plugin.Config} object\n */\nexport const defineConfig: Plugin.DefineConfig<Config> = (config) => ({\n  ...defaultConfig,\n  ...config,\n});\n","import type { Plugin } from '../types';\nimport { handler } from './plugin';\nimport type { Config } from './types';\n\nexport const defaultConfig: Plugin.Config<Config> = {\n  _handler: handler,\n  _handlerLegacy: () => {},\n  _tags: ['validator'],\n  comments: true,\n  exportFromIndex: false,\n  name: 'zod',\n  output: 'zod',\n};\n\n/**\n * Type helper for Zod plugin, returns {@link Plugin.Config} object\n */\nexport const defineConfig: Plugin.DefineConfig<Config> = (config) => ({\n  ...defaultConfig,\n  ...config,\n});\n","import {\n  type Config as HeyApiClientAxios,\n  defaultConfig as heyApiClientAxios,\n} from './@hey-api/client-axios';\nimport {\n  type Config as HeyApiClientFetch,\n  defaultConfig as heyApiClientFetch,\n} from './@hey-api/client-fetch';\nimport {\n  type Config as HeyApiClientNext,\n  defaultConfig as heyApiClientNext,\n} from './@hey-api/client-next';\nimport {\n  type Config as HeyApiClientNuxt,\n  defaultConfig as heyApiClientNuxt,\n} from './@hey-api/client-nuxt';\nimport {\n  type Config as HeyApiLegacyAngular,\n  defaultConfig as heyApiLegacyAngular,\n} from './@hey-api/legacy-angular';\nimport {\n  type Config as HeyApiLegacyAxios,\n  defaultConfig as heyApiLegacyAxios,\n} from './@hey-api/legacy-axios';\nimport {\n  type Config as HeyApiLegacyFetch,\n  defaultConfig as heyApiLegacyFetch,\n} from './@hey-api/legacy-fetch';\nimport {\n  type Config as HeyApiLegacyNode,\n  defaultConfig as heyApiLegacyNode,\n} from './@hey-api/legacy-node';\nimport {\n  type Config as HeyApiLegacyXhr,\n  defaultConfig as heyApiLegacyXhr,\n} from './@hey-api/legacy-xhr';\nimport {\n  type Config as HeyApiSchemas,\n  defaultConfig as heyApiSchemas,\n} from './@hey-api/schemas';\nimport {\n  type Config as HeyApiSdk,\n  defaultConfig as heyApiSdk,\n} from './@hey-api/sdk';\nimport {\n  type Config as HeyApiTransformers,\n  defaultConfig as heyApiTransformers,\n} from './@hey-api/transformers';\nimport {\n  type Config as HeyApiTypeScript,\n  defaultConfig as heyApiTypeScript,\n} from './@hey-api/typescript';\nimport {\n  type Config as TanStackAngularQueryExperimental,\n  defaultConfig as tanStackAngularQueryExperimental,\n} from './@tanstack/angular-query-experimental';\nimport {\n  type Config as TanStackReactQuery,\n  defaultConfig as tanStackReactQuery,\n} from './@tanstack/react-query';\nimport {\n  type Config as TanStackSolidQuery,\n  defaultConfig as tanStackSolidQuery,\n} from './@tanstack/solid-query';\nimport {\n  type Config as TanStackSvelteQuery,\n  defaultConfig as tanStackSvelteQuery,\n} from './@tanstack/svelte-query';\nimport {\n  type Config as TanStackVueQuery,\n  defaultConfig as tanStackVueQuery,\n} from './@tanstack/vue-query';\nimport { type Config as Fastify, defaultConfig as fastify } from './fastify';\nimport type { DefaultPluginConfigs, Plugin } from './types';\nimport { type Config as Valibot, defaultConfig as valibot } from './valibot';\nimport { type Config as Zod, defaultConfig as zod } from './zod';\n\n/**\n * User-facing plugin types.\n */\nexport type UserPlugins =\n  | Plugin.UserConfig<HeyApiClientAxios>\n  | Plugin.UserConfig<HeyApiClientFetch>\n  | Plugin.UserConfig<HeyApiClientNext>\n  | Plugin.UserConfig<HeyApiClientNuxt>\n  | Plugin.UserConfig<HeyApiLegacyAngular>\n  | Plugin.UserConfig<HeyApiLegacyAxios>\n  | Plugin.UserConfig<HeyApiLegacyFetch>\n  | Plugin.UserConfig<HeyApiLegacyNode>\n  | Plugin.UserConfig<HeyApiLegacyXhr>\n  | Plugin.UserConfig<HeyApiSchemas>\n  | Plugin.UserConfig<HeyApiSdk>\n  | Plugin.UserConfig<HeyApiTransformers>\n  | Plugin.UserConfig<HeyApiTypeScript>\n  | Plugin.UserConfig<TanStackAngularQueryExperimental>\n  | Plugin.UserConfig<TanStackReactQuery>\n  | Plugin.UserConfig<TanStackSolidQuery>\n  | Plugin.UserConfig<TanStackSvelteQuery>\n  | Plugin.UserConfig<TanStackVueQuery>\n  | Plugin.UserConfig<Fastify>\n  | Plugin.UserConfig<Valibot>\n  | Plugin.UserConfig<Zod>;\n\n/**\n * Internal plugin types.\n */\nexport type ClientPlugins =\n  | Plugin.Config<HeyApiClientAxios>\n  | Plugin.Config<HeyApiClientFetch>\n  | Plugin.Config<HeyApiClientNext>\n  | Plugin.Config<HeyApiClientNuxt>\n  | Plugin.Config<HeyApiLegacyAngular>\n  | Plugin.Config<HeyApiLegacyAxios>\n  | Plugin.Config<HeyApiLegacyFetch>\n  | Plugin.Config<HeyApiLegacyNode>\n  | Plugin.Config<HeyApiLegacyXhr>\n  | Plugin.Config<HeyApiSchemas>\n  | Plugin.Config<HeyApiSdk>\n  | Plugin.Config<HeyApiTransformers>\n  | Plugin.Config<HeyApiTypeScript>\n  | Plugin.Config<TanStackAngularQueryExperimental>\n  | Plugin.Config<TanStackReactQuery>\n  | Plugin.Config<TanStackSolidQuery>\n  | Plugin.Config<TanStackSvelteQuery>\n  | Plugin.Config<TanStackVueQuery>\n  | Plugin.Config<Fastify>\n  | Plugin.Config<Valibot>\n  | Plugin.Config<Zod>;\n\nexport const defaultPluginConfigs: DefaultPluginConfigs<ClientPlugins> = {\n  '@hey-api/client-axios': heyApiClientAxios,\n  '@hey-api/client-fetch': heyApiClientFetch,\n  '@hey-api/client-next': heyApiClientNext,\n  '@hey-api/client-nuxt': heyApiClientNuxt,\n  '@hey-api/schemas': heyApiSchemas,\n  '@hey-api/sdk': heyApiSdk,\n  '@hey-api/transformers': heyApiTransformers,\n  '@hey-api/typescript': heyApiTypeScript,\n  '@tanstack/angular-query-experimental': tanStackAngularQueryExperimental,\n  '@tanstack/react-query': tanStackReactQuery,\n  '@tanstack/solid-query': tanStackSolidQuery,\n  '@tanstack/svelte-query': tanStackSvelteQuery,\n  '@tanstack/vue-query': tanStackVueQuery,\n  fastify,\n  'legacy/angular': heyApiLegacyAngular,\n  'legacy/axios': heyApiLegacyAxios,\n  'legacy/fetch': heyApiLegacyFetch,\n  'legacy/node': heyApiLegacyNode,\n  'legacy/xhr': heyApiLegacyXhr,\n  valibot,\n  zod,\n};\n","import path from 'node:path';\n\nimport { loadConfig } from 'c12';\n\nimport { getLogs } from './getLogs';\nimport type { ClientPlugins, UserPlugins } from './plugins';\nimport { defaultPluginConfigs } from './plugins';\nimport type {\n  AnyPluginName,\n  DefaultPluginConfigs,\n  PluginContext,\n  PluginNames,\n} from './plugins/types';\nimport type { Config, UserConfig } from './types/config';\nimport { isLegacyClient, setConfig } from './utils/config';\n\n/**\n * Default plugins used to generate artifacts if plugins aren't specified.\n */\nexport const defaultPlugins = [\n  '@hey-api/typescript',\n  '@hey-api/sdk',\n] as const satisfies ReadonlyArray<UserPlugins['name']>;\n\nconst defaultWatch: Config['input']['watch'] = {\n  enabled: false,\n  interval: 1_000,\n  timeout: 60_000,\n};\n\nconst getInput = (userConfig: UserConfig): Config['input'] => {\n  let input: Config['input'] = {\n    path: '',\n    validate_EXPERIMENTAL: false,\n    watch: defaultWatch,\n  };\n  if (typeof userConfig.input === 'string') {\n    input.path = userConfig.input;\n  } else if (\n    userConfig.input &&\n    (userConfig.input.path !== undefined ||\n      userConfig.input.organization !== undefined)\n  ) {\n    // @ts-expect-error\n    input = {\n      ...input,\n      path: 'https://get.heyapi.dev',\n      ...userConfig.input,\n    };\n\n    // watch only remote files\n    if (input.watch !== undefined) {\n      input.watch = getWatch(input);\n    }\n  } else {\n    input = {\n      ...input,\n      path: userConfig.input as Record<string, unknown>,\n    };\n  }\n\n  if (input.validate_EXPERIMENTAL === true) {\n    input.validate_EXPERIMENTAL = 'warn';\n  }\n\n  if (\n    userConfig.watch !== undefined &&\n    input.watch.enabled === defaultWatch.enabled &&\n    input.watch.interval === defaultWatch.interval &&\n    input.watch.timeout === defaultWatch.timeout\n  ) {\n    input.watch = getWatch({\n      path: input.path,\n      // @ts-expect-error\n      watch: userConfig.watch,\n    });\n  }\n\n  return input;\n};\n\nconst getPluginsConfig = ({\n  pluginConfigs,\n  userPlugins,\n  userPluginsConfig,\n}: {\n  pluginConfigs: DefaultPluginConfigs<ClientPlugins>;\n  userPlugins: ReadonlyArray<AnyPluginName>;\n  userPluginsConfig: Config['plugins'];\n}): Pick<Config, 'plugins' | 'pluginOrder'> => {\n  const circularReferenceTracker = new Set<AnyPluginName>();\n  const pluginOrder = new Set<AnyPluginName>();\n  const plugins: Config['plugins'] = {};\n\n  const dfs = (name: AnyPluginName) => {\n    if (circularReferenceTracker.has(name)) {\n      throw new Error(`Circular reference detected at '${name}'`);\n    }\n\n    if (!pluginOrder.has(name)) {\n      circularReferenceTracker.add(name);\n\n      const pluginConfig = pluginConfigs[name as PluginNames];\n      if (!pluginConfig) {\n        throw new Error(\n          `unknown plugin dependency \"${name}\" - do you need to register a custom plugin with this name?`,\n        );\n      }\n\n      const defaultOptions = defaultPluginConfigs[name as PluginNames];\n      const userOptions = userPluginsConfig[name as PluginNames];\n      if (userOptions && defaultOptions) {\n        const nativePluginOption = Object.keys(userOptions).find((key) =>\n          key.startsWith('_'),\n        );\n        if (nativePluginOption) {\n          throw new Error(\n            `cannot register plugin \"${name}\" - attempting to override a native plugin option \"${nativePluginOption}\"`,\n          );\n        }\n      }\n\n      const config = {\n        _dependencies: [],\n        ...defaultOptions,\n        ...userOptions,\n      };\n\n      if (config._infer) {\n        const context: PluginContext = {\n          ensureDependency: (dependency) => {\n            if (\n              typeof dependency === 'string' &&\n              !config._dependencies.includes(dependency)\n            ) {\n              config._dependencies = [...config._dependencies, dependency];\n            }\n          },\n          pluginByTag: (tag, errorMessage) => {\n            for (const userPlugin of userPlugins) {\n              const defaultConfig =\n                defaultPluginConfigs[userPlugin as PluginNames] ||\n                pluginConfigs[userPlugin as PluginNames];\n              if (\n                defaultConfig &&\n                defaultConfig._tags?.includes(tag) &&\n                userPlugin !== name\n              ) {\n                return userPlugin;\n              }\n            }\n\n            throw new Error(\n              errorMessage ||\n                `missing plugin - no plugin with tag \"${tag}\" found`,\n            );\n          },\n        };\n        config._infer(config, context);\n      }\n\n      for (const dependency of config._dependencies) {\n        dfs(dependency);\n      }\n\n      circularReferenceTracker.delete(name);\n      pluginOrder.add(name);\n\n      // @ts-expect-error\n      plugins[name] = config;\n    }\n  };\n\n  for (const name of userPlugins) {\n    dfs(name);\n  }\n\n  return {\n    pluginOrder: Array.from(pluginOrder) as ReadonlyArray<PluginNames>,\n    plugins,\n  };\n};\n\nconst getOutput = (userConfig: UserConfig): Config['output'] => {\n  let output: Config['output'] = {\n    clean: true,\n    format: false,\n    indexFile: true,\n    lint: false,\n    path: '',\n    tsConfigPath: '',\n  };\n  if (typeof userConfig.output === 'string') {\n    output.path = userConfig.output;\n  } else {\n    output = {\n      ...output,\n      ...userConfig.output,\n    };\n  }\n  return output;\n};\n\nconst isPluginClient = (plugin: Required<UserConfig>['plugins'][number]) => {\n  if (typeof plugin === 'string') {\n    return plugin.startsWith('@hey-api/client') || plugin.startsWith('legacy/');\n  }\n\n  return (\n    plugin.name.startsWith('@hey-api/client') ||\n    plugin.name.startsWith('legacy/') ||\n    // @ts-expect-error\n    (plugin._tags && plugin._tags.includes('client'))\n  );\n};\n\nconst getPlugins = (\n  userConfig: UserConfig,\n): Pick<Config, 'plugins' | 'pluginOrder'> => {\n  const userPluginsConfig: Config['plugins'] = {};\n\n  let definedPlugins: UserConfig['plugins'] = defaultPlugins;\n  if (userConfig.plugins) {\n    userConfig.plugins = userConfig.plugins.filter(\n      (plugin) =>\n        (typeof plugin === 'string' && plugin) ||\n        (typeof plugin !== 'string' && plugin.name),\n    );\n    if (\n      userConfig.plugins.length === 1 &&\n      isPluginClient(userConfig.plugins[0]!)\n    ) {\n      definedPlugins = [...defaultPlugins, ...userConfig.plugins];\n    } else {\n      definedPlugins = userConfig.plugins;\n    }\n  }\n\n  const userPlugins = definedPlugins\n    .map((plugin) => {\n      if (typeof plugin === 'string') {\n        return plugin;\n      }\n\n      if (plugin.name) {\n        // @ts-expect-error\n        userPluginsConfig[plugin.name] = plugin;\n      }\n\n      return plugin.name;\n    })\n    .filter(Boolean);\n\n  return getPluginsConfig({\n    pluginConfigs: {\n      ...userPluginsConfig,\n      ...defaultPluginConfigs,\n    },\n    userPlugins,\n    userPluginsConfig,\n  });\n};\n\nconst getWatch = (\n  input: Pick<Config['input'], 'path' | 'watch'>,\n): Config['input']['watch'] => {\n  let watch = { ...defaultWatch };\n  // we cannot watch spec passed as an object\n  if (typeof input.path !== 'string') {\n    return watch;\n  }\n  if (typeof input.watch === 'boolean') {\n    watch.enabled = input.watch;\n  } else if (typeof input.watch === 'number') {\n    watch.enabled = true;\n    watch.interval = input.watch;\n  } else if (input.watch) {\n    watch = {\n      ...watch,\n      ...input.watch,\n    };\n  }\n  return watch;\n};\n\nconst mergeObjects = (\n  objA: Record<string, unknown> | undefined,\n  objB: Record<string, unknown> | undefined,\n): Record<string, unknown> => {\n  const a = objA || {};\n  const b = objB || {};\n  return {\n    ...a,\n    ...b,\n  };\n};\n\nconst mergeConfigs = (\n  configA: UserConfig | undefined,\n  configB: UserConfig | undefined,\n): UserConfig => {\n  const a: Partial<UserConfig> = configA || {};\n  const b: Partial<UserConfig> = configB || {};\n  const merged: UserConfig = {\n    ...(a as UserConfig),\n    ...(b as UserConfig),\n  };\n  if (typeof merged.logs === 'object') {\n    merged.logs = mergeObjects(\n      a.logs as Record<string, unknown>,\n      b.logs as Record<string, unknown>,\n    );\n  }\n  return merged;\n};\n\n/**\n * @internal\n */\nexport const initConfigs = async (\n  userConfig: UserConfig | undefined,\n): Promise<Config[]> => {\n  let configurationFile: string | undefined = undefined;\n  if (userConfig?.configFile) {\n    const parts = userConfig.configFile.split('.');\n    configurationFile = parts.slice(0, parts.length - 1).join('.');\n  }\n\n  const { config: configFromFile } = await loadConfig<UserConfig>({\n    configFile: configurationFile,\n    name: 'openapi-ts',\n  });\n\n  const userConfigs: ReadonlyArray<UserConfig> = Array.isArray(userConfig)\n    ? userConfig\n    : Array.isArray(configFromFile)\n      ? configFromFile.map((config) => mergeConfigs(config, userConfig))\n      : [mergeConfigs(configFromFile, userConfig)];\n\n  return userConfigs.map((userConfig) => {\n    const {\n      base,\n      configFile = '',\n      dryRun = false,\n      experimentalParser = true,\n      exportCore = true,\n      name,\n      request,\n      useOptions = true,\n    } = userConfig;\n\n    const logs = getLogs(userConfig);\n\n    if (logs.level === 'debug') {\n      console.warn('userConfig:', userConfig);\n    }\n\n    const input = getInput(userConfig);\n    const output = getOutput(userConfig);\n\n    if (!input.path) {\n      throw new Error(\n        'missing input - which OpenAPI specification should we use to generate your output?',\n      );\n    }\n\n    if (!output.path) {\n      throw new Error('missing output - where should we generate your output?');\n    }\n\n    if (!useOptions) {\n      console.warn(\n        '❗️ Deprecation warning: useOptions set to false. This setting will be removed in future versions. Please migrate useOptions to true https://heyapi.dev/openapi-ts/migrating.html#v0-27-38',\n      );\n    }\n\n    output.path = path.resolve(process.cwd(), output.path);\n\n    const config = setConfig({\n      ...getPlugins(userConfig),\n      base,\n      configFile,\n      dryRun,\n      experimentalParser,\n      exportCore: false,\n      input,\n      logs,\n      name,\n      output,\n      request,\n      useOptions,\n    });\n    config.exportCore = isLegacyClient(config) ? exportCore : false;\n\n    if (logs.level === 'debug') {\n      console.warn('config:', config);\n    }\n\n    return config;\n  });\n};\n"]}